{"version":3,"file":"webgpu-debug-helper.js","sources":["../../../src/format-info.ts","../../../src/utils.ts","../../../src/validation.ts","../../../src/wrap-api.ts","../../../src/shared-state.ts","../../../src/error-scope-wrapper.ts","../../node_modules/webgpu-utils/dist/1.x/webgpu-utils.module.js","../../../src/encoder-utils.ts","../../../src/pipeline.ts","../../../src/texture.ts","../../../src/binding-mixin.ts","../../../src/render-commands-mixin.ts","../../../src/render-bundle-encoder.ts","../../../src/device.ts","../../../src/canvas-context.ts","../../../src/query-support.ts","../../../src/compute-pass-encoder.ts","../../../src/render-pass-encoder.ts","../../../src/command-encoder.ts","../../../src/webgpu-debug-helper.ts"],"sourcesContent":["/* eslint-disable require-trailing-comma/require-trailing-comma */\nexport type DataInfo = {\n  copySrc: boolean,\n  copyDst: boolean,\n  storage: boolean,\n  readWriteStorage: boolean,\n};\n\nexport type ColorInfo = DataInfo & {\n  type: 'float' | 'uint' | 'sint' | 'unfilterable-float',\n  bytes: number,\n};\n\nexport type ColorRenderInfo = {\n  blend: boolean,\n  resolve: boolean,\n  byteCost: number,\n  alignment: number,\n};\n\nexport type StencilInfo = DataInfo & {\n  type: 'uint',\n  bytes: number,\n}\n\nexport type DepthInfo = DataInfo & {\n  type: 'depth',\n  bytes?: number,\n}\n\nexport type FormatInfo = {\n  blockWidth: number,\n  blockHeight: number,\n  multisample?: boolean,\n  bytesPerBlock?: number,\n  color?: ColorInfo,\n  colorRender?: ColorRenderInfo,\n  stencil?: StencilInfo,\n  depth?: DepthInfo,\n  baseFormat?: string,\n  feature?: string,\n};\n\n// exported from the WebGPU CTS by adding the following line to src/webgpu/format_info.ts\n//\n//    console.log(JSON.stringify(kAllTextureFormatInfo, null, 2));\n\nexport const kAllTextureFormatInfo: {[key: string]: FormatInfo} =  {\n  \"r8unorm\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 1\n    },\n    \"colorRender\": {\n      \"blend\": true,\n      \"resolve\": true,\n      \"byteCost\": 1,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 1\n  },\n  \"r8snorm\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 1\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 1\n  },\n  \"r8uint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 1\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 1,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 1\n  },\n  \"r8sint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"sint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 1\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 1,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 1\n  },\n  \"rg8unorm\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 2\n    },\n    \"colorRender\": {\n      \"blend\": true,\n      \"resolve\": true,\n      \"byteCost\": 2,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 2\n  },\n  \"rg8snorm\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 2\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 2\n  },\n  \"rg8uint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 2\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 2,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 2\n  },\n  \"rg8sint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"sint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 2\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 2,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 2\n  },\n  \"rgba8unorm\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": true,\n      \"resolve\": true,\n      \"byteCost\": 8,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"baseFormat\": \"rgba8unorm\",\n    \"bytesPerBlock\": 4\n  },\n  \"rgba8unorm-srgb\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": true,\n      \"resolve\": true,\n      \"byteCost\": 8,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"baseFormat\": \"rgba8unorm\",\n    \"bytesPerBlock\": 4\n  },\n  \"rgba8snorm\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 4\n  },\n  \"rgba8uint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 4,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 4\n  },\n  \"rgba8sint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"sint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 4,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 4\n  },\n  \"bgra8unorm\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": true,\n      \"resolve\": true,\n      \"byteCost\": 8,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"baseFormat\": \"bgra8unorm\",\n    \"bytesPerBlock\": 4\n  },\n  \"bgra8unorm-srgb\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": true,\n      \"resolve\": true,\n      \"byteCost\": 8,\n      \"alignment\": 1\n    },\n    \"multisample\": true,\n    \"baseFormat\": \"bgra8unorm\",\n    \"bytesPerBlock\": 4\n  },\n  \"r16uint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 2\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 2,\n      \"alignment\": 2\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 2\n  },\n  \"r16sint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"sint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 2\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 2,\n      \"alignment\": 2\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 2\n  },\n  \"r16float\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 2\n    },\n    \"colorRender\": {\n      \"blend\": true,\n      \"resolve\": true,\n      \"byteCost\": 2,\n      \"alignment\": 2\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 2\n  },\n  \"rg16uint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 4,\n      \"alignment\": 2\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 4\n  },\n  \"rg16sint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"sint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 4,\n      \"alignment\": 2\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 4\n  },\n  \"rg16float\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": true,\n      \"resolve\": true,\n      \"byteCost\": 4,\n      \"alignment\": 2\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 4\n  },\n  \"rgba16uint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 8,\n      \"alignment\": 2\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 8\n  },\n  \"rgba16sint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"sint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 8,\n      \"alignment\": 2\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 8\n  },\n  \"rgba16float\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"colorRender\": {\n      \"blend\": true,\n      \"resolve\": true,\n      \"byteCost\": 8,\n      \"alignment\": 2\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 8\n  },\n  \"r32uint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": true,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 4,\n      \"alignment\": 4\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 4\n  },\n  \"r32sint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"sint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": true,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 4,\n      \"alignment\": 4\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 4\n  },\n  \"r32float\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"unfilterable-float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": true,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 4,\n      \"alignment\": 4\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 4\n  },\n  \"rg32uint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 8,\n      \"alignment\": 4\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 8\n  },\n  \"rg32sint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"sint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 8,\n      \"alignment\": 4\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 8\n  },\n  \"rg32float\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"unfilterable-float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 8,\n      \"alignment\": 4\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 8\n  },\n  \"rgba32uint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 16,\n      \"alignment\": 4\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 16\n  },\n  \"rgba32sint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"sint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 16,\n      \"alignment\": 4\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 16\n  },\n  \"rgba32float\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"unfilterable-float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": true,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 16,\n      \"alignment\": 4\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 16\n  },\n  \"rgb10a2uint\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": false,\n      \"resolve\": false,\n      \"byteCost\": 8,\n      \"alignment\": 4\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 4\n  },\n  \"rgb10a2unorm\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"colorRender\": {\n      \"blend\": true,\n      \"resolve\": true,\n      \"byteCost\": 8,\n      \"alignment\": 4\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 4\n  },\n  \"rg11b10ufloat\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 4\n  },\n  \"rgb9e5ufloat\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"multisample\": false,\n    \"bytesPerBlock\": 4\n  },\n  \"stencil8\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"stencil\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 1\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 1\n  },\n  \"depth16unorm\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"depth\": {\n      \"type\": \"depth\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 2\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 2\n  },\n  \"depth32float\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"depth\": {\n      \"type\": \"depth\",\n      \"copySrc\": true,\n      \"copyDst\": false,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"multisample\": true,\n    \"bytesPerBlock\": 4\n  },\n  \"depth24plus\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"depth\": {\n      \"type\": \"depth\",\n      \"copySrc\": false,\n      \"copyDst\": false,\n      \"storage\": false,\n      \"readWriteStorage\": false\n    },\n    \"multisample\": true\n  },\n  \"depth24plus-stencil8\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"depth\": {\n      \"type\": \"depth\",\n      \"copySrc\": false,\n      \"copyDst\": false,\n      \"storage\": false,\n      \"readWriteStorage\": false\n    },\n    \"stencil\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 1\n    },\n    \"multisample\": true\n  },\n  \"depth32float-stencil8\": {\n    \"blockWidth\": 1,\n    \"blockHeight\": 1,\n    \"depth\": {\n      \"type\": \"depth\",\n      \"copySrc\": true,\n      \"copyDst\": false,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 4\n    },\n    \"stencil\": {\n      \"type\": \"uint\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 1\n    },\n    \"multisample\": true,\n    \"feature\": \"depth32float-stencil8\"\n  },\n  \"bc1-rgba-unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"baseFormat\": \"bc1-rgba-unorm\",\n    \"bytesPerBlock\": 8\n  },\n  \"bc1-rgba-unorm-srgb\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"baseFormat\": \"bc1-rgba-unorm\",\n    \"bytesPerBlock\": 8\n  },\n  \"bc2-rgba-unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"baseFormat\": \"bc2-rgba-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"bc2-rgba-unorm-srgb\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"baseFormat\": \"bc2-rgba-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"bc3-rgba-unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"baseFormat\": \"bc3-rgba-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"bc3-rgba-unorm-srgb\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"baseFormat\": \"bc3-rgba-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"bc4-r-unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"bytesPerBlock\": 8\n  },\n  \"bc4-r-snorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"bytesPerBlock\": 8\n  },\n  \"bc5-rg-unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"bytesPerBlock\": 16\n  },\n  \"bc5-rg-snorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"bytesPerBlock\": 16\n  },\n  \"bc6h-rgb-ufloat\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"bytesPerBlock\": 16\n  },\n  \"bc6h-rgb-float\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"bytesPerBlock\": 16\n  },\n  \"bc7-rgba-unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"baseFormat\": \"bc7-rgba-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"bc7-rgba-unorm-srgb\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-bc\",\n    \"baseFormat\": \"bc7-rgba-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"etc2-rgb8unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-etc2\",\n    \"baseFormat\": \"etc2-rgb8unorm\",\n    \"bytesPerBlock\": 8\n  },\n  \"etc2-rgb8unorm-srgb\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-etc2\",\n    \"baseFormat\": \"etc2-rgb8unorm\",\n    \"bytesPerBlock\": 8\n  },\n  \"etc2-rgb8a1unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-etc2\",\n    \"baseFormat\": \"etc2-rgb8a1unorm\",\n    \"bytesPerBlock\": 8\n  },\n  \"etc2-rgb8a1unorm-srgb\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-etc2\",\n    \"baseFormat\": \"etc2-rgb8a1unorm\",\n    \"bytesPerBlock\": 8\n  },\n  \"etc2-rgba8unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-etc2\",\n    \"baseFormat\": \"etc2-rgba8unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"etc2-rgba8unorm-srgb\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-etc2\",\n    \"baseFormat\": \"etc2-rgba8unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"eac-r11unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-etc2\",\n    \"bytesPerBlock\": 8\n  },\n  \"eac-r11snorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 8\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-etc2\",\n    \"bytesPerBlock\": 8\n  },\n  \"eac-rg11unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-etc2\",\n    \"bytesPerBlock\": 16\n  },\n  \"eac-rg11snorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-etc2\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-4x4-unorm\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-4x4-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-4x4-unorm-srgb\": {\n    \"blockWidth\": 4,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-4x4-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-5x4-unorm\": {\n    \"blockWidth\": 5,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-5x4-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-5x4-unorm-srgb\": {\n    \"blockWidth\": 5,\n    \"blockHeight\": 4,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-5x4-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-5x5-unorm\": {\n    \"blockWidth\": 5,\n    \"blockHeight\": 5,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-5x5-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-5x5-unorm-srgb\": {\n    \"blockWidth\": 5,\n    \"blockHeight\": 5,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-5x5-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-6x5-unorm\": {\n    \"blockWidth\": 6,\n    \"blockHeight\": 5,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-6x5-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-6x5-unorm-srgb\": {\n    \"blockWidth\": 6,\n    \"blockHeight\": 5,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-6x5-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-6x6-unorm\": {\n    \"blockWidth\": 6,\n    \"blockHeight\": 6,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-6x6-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-6x6-unorm-srgb\": {\n    \"blockWidth\": 6,\n    \"blockHeight\": 6,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-6x6-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-8x5-unorm\": {\n    \"blockWidth\": 8,\n    \"blockHeight\": 5,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-8x5-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-8x5-unorm-srgb\": {\n    \"blockWidth\": 8,\n    \"blockHeight\": 5,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-8x5-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-8x6-unorm\": {\n    \"blockWidth\": 8,\n    \"blockHeight\": 6,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-8x6-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-8x6-unorm-srgb\": {\n    \"blockWidth\": 8,\n    \"blockHeight\": 6,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-8x6-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-8x8-unorm\": {\n    \"blockWidth\": 8,\n    \"blockHeight\": 8,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-8x8-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-8x8-unorm-srgb\": {\n    \"blockWidth\": 8,\n    \"blockHeight\": 8,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-8x8-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-10x5-unorm\": {\n    \"blockWidth\": 10,\n    \"blockHeight\": 5,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-10x5-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-10x5-unorm-srgb\": {\n    \"blockWidth\": 10,\n    \"blockHeight\": 5,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-10x5-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-10x6-unorm\": {\n    \"blockWidth\": 10,\n    \"blockHeight\": 6,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-10x6-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-10x6-unorm-srgb\": {\n    \"blockWidth\": 10,\n    \"blockHeight\": 6,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-10x6-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-10x8-unorm\": {\n    \"blockWidth\": 10,\n    \"blockHeight\": 8,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-10x8-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-10x8-unorm-srgb\": {\n    \"blockWidth\": 10,\n    \"blockHeight\": 8,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-10x8-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-10x10-unorm\": {\n    \"blockWidth\": 10,\n    \"blockHeight\": 10,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-10x10-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-10x10-unorm-srgb\": {\n    \"blockWidth\": 10,\n    \"blockHeight\": 10,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-10x10-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-12x10-unorm\": {\n    \"blockWidth\": 12,\n    \"blockHeight\": 10,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-12x10-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-12x10-unorm-srgb\": {\n    \"blockWidth\": 12,\n    \"blockHeight\": 10,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-12x10-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-12x12-unorm\": {\n    \"blockWidth\": 12,\n    \"blockHeight\": 12,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-12x12-unorm\",\n    \"bytesPerBlock\": 16\n  },\n  \"astc-12x12-unorm-srgb\": {\n    \"blockWidth\": 12,\n    \"blockHeight\": 12,\n    \"color\": {\n      \"type\": \"float\",\n      \"copySrc\": true,\n      \"copyDst\": true,\n      \"storage\": false,\n      \"readWriteStorage\": false,\n      \"bytes\": 16\n    },\n    \"multisample\": false,\n    \"feature\": \"texture-compression-astc\",\n    \"baseFormat\": \"astc-12x12-unorm\",\n    \"bytesPerBlock\": 16\n  }\n};\n","import {\n  kAllTextureFormatInfo\n} from './format-info.js';\n\nfunction bitmaskToString(bitNames: Record<string, number>, mask: number) {\n  const names = [];\n  for (const [k, v] of Object.entries(bitNames)) {\n    if (mask & v) {\n      names.push(k);\n    }\n  }\n  return names.join('|');\n}\n\nexport function bufferUsageToString(mask: number) {\n  return bitmaskToString(GPUBufferUsage as unknown as Record<string, number>, mask);\n}\n\nexport function textureUsageToString(mask: number) {\n  return bitmaskToString(GPUTextureUsage as unknown as Record<string, number>, mask);\n}\n\nexport function unreachable(msg?: string): never {\n  throw Error(`unreachable: ${msg || ''}`);\n}\n\nexport function roundUp(v: number, align: number) {\n  return Math.ceil(v / align) * align;\n}\n\nexport function arraysEqual<T>(a: T[], b: T[]) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function trimNulls<T>(a: (T | null)[]) {\n  const ndx = a.findLastIndex(v => v !== null);\n  return a.slice(0, ndx + 1);\n}\n\nexport function reifyGPUOrigin3D(e?: GPUOrigin3D) {\n  e = e || [];\n  const d = e as GPUOrigin3DDict;\n  if (typeof d.x === 'number' || typeof d.y === 'number' || typeof d.z === 'number') {\n    return [\n      d.x ?? 0,\n      d.y ?? 0,\n      d.z ?? 0,\n    ];\n  }\n\n  const a = [...(e as number[])];\n  return [\n    a[0] ?? 0,\n    a[1] ?? 0,\n    a[2] ?? 0,\n  ];\n}\n\nexport function reifyGPUExtent3D(e: GPUExtent3D) {\n  const d = e as GPUExtent3DDict;\n  if (typeof d.width === 'number') {\n    return [\n      d.width,\n      d.height ?? 1,\n      d.depthOrArrayLayers ?? 1,\n    ];\n  }\n\n  const a = [...(e as number[])];\n  return [\n    a[0],\n    a[1] ?? 1,\n    a[2] ?? 1,\n  ];\n}\n\nexport function logicalMipLevelSpecificTextureExtent(texture: GPUTexture, mipLevel: number) {\n  switch (texture.dimension) {\n    case '1d':\n      return [\n        Math.max(1, texture.width >> mipLevel),\n        1,\n        1,\n      ];\n    case '2d':\n      return [\n        Math.max(1, texture.width >> mipLevel),\n        Math.max(1, texture.height >> mipLevel),\n        texture.depthOrArrayLayers,\n      ];\n    case '3d':\n      return [\n        Math.max(1, texture.width >> mipLevel),\n        Math.max(1, texture.height >> mipLevel),\n        Math.max(1, texture.depthOrArrayLayers >> mipLevel),\n      ];\n    default:\n      unreachable();\n      return [];\n  }\n}\n\nexport function physicalMipLevelSpecificTextureExtent(texture: GPUTexture, mipLevel: number) {\n  const {\n    blockWidth,\n    blockHeight,\n  } = kAllTextureFormatInfo[texture.format];\n\n  const [width, height, depthOrArrayLayers] = logicalMipLevelSpecificTextureExtent(texture, mipLevel);\n\n  switch (texture.dimension) {\n    case '1d':\n      return [\n        roundUp(width, blockWidth),\n        1,\n        1,\n      ];\n    case '2d':\n    case '3d':\n      return [\n        roundUp(width, blockWidth),\n        roundUp(height, blockHeight),\n        depthOrArrayLayers,\n      ];\n    default:\n      unreachable();\n      return [];\n  }\n}","import {\n  bufferUsageToString,\n  textureUsageToString,\n} from './utils.js';\nexport type LabeledObject =\n  | GPUBindGroup\n  | GPUBindGroupLayout\n  | GPUBuffer\n  | GPUCommandEncoder\n  | GPUComputePassEncoder\n  | GPUComputePipeline\n  | GPUDevice\n  | GPUQuerySet\n  | GPUPipelineLayout\n  | GPURenderPassEncoder\n  | GPURenderPipeline\n  | GPUShaderModule\n  | GPUSampler\n  | GPUTexture\n  | GPUTextureView;\n\nfunction getProperties(o: any) {\n  const keyValues = [];\n  for (const k in o) {\n    const v = o[k];\n    if (typeof v !== 'function') {\n      if (o instanceof GPUBuffer && k === 'usage') {\n        keyValues.push(`${k}: ${v} (${bufferUsageToString(v)})`);\n      } else if (o instanceof GPUTexture && k === 'usage') {\n        keyValues.push(`${k}: ${v} (${textureUsageToString(v)})`);\n      } else {\n        keyValues.push(`${k}: ${JSON.stringify(v)}`);\n      }\n    }\n  }\n  return keyValues.join(', ');\n}\n\nexport function objToString(o: LabeledObject) {\n  return `${o.constructor.name}(${o.label}){${getProperties(o)}}`;\n}\n\nexport function emitError(msg: string, objs: LabeledObject[] = []) {\n  throw new Error(`${msg}\\n${(objs).map(o => objToString(o)).join('\\n')}`);\n}\n\nexport function assert(condition: boolean, msg?: string | (() => string), resources?: any[]): asserts condition {\n  if (!condition) {\n    const lines = (resources || []).map(r => `    ${objToString(r)}`).join('\\n');\n    const m = msg ? (typeof msg === 'string' ? msg : msg()) : '';\n    emitError(`${m}${lines ? `\\n${lines}` : ''}`);\n  }\n}\n","/**\n * Adds a wrapper function to a class method that gets called before the actual function\n */\nexport function wrapFunctionBefore<K extends PropertyKey, T extends Record<K,(...args: Parameters<T[K]>) => any>>(\n    API: { prototype: T },\n    fnName: K, fn: (args: Parameters<T[K]>) => void) {\n  const origFn = API.prototype[fnName];\n  API.prototype[fnName] = function (this: T, ...args: Parameters<T[K]>) {\n    fn.call(this, args);\n    return origFn.call(this, ...args);\n  } as any;\n}\n\n/**\n * Adds a wrapper function to a class method that gets called after the actual function\n */\nexport function wrapFunctionAfter<K extends PropertyKey, T extends Record<K,(...args: Parameters<T[K]>) => any>>(\n    API: { prototype: T },\n    fnName: K, fn: (obj: ReturnType<T[K]>, args: Parameters<T[K]>) => void) {\n  const origFn = API.prototype[fnName];\n  API.prototype[fnName] = function (this: T, ...args: Parameters<T[K]>) {\n    const result = origFn.call(this, ...args);\n    fn.call(this, result, args);\n    return result;\n  } as any;\n}\n\n/**\n * Adds a wrapper function to an async class method that gets called after the actual function\n */\nexport function wrapAsyncFunctionAfter<K extends PropertyKey, T extends Record<K,(...args: Parameters<T[K]>) => any>>(\n    API: { prototype: T },\n    fnName: K, fn: (obj: Awaited<ReturnType<T[K]>>, args: Parameters<T[K]>) => void) {\n  const origFn = API.prototype[fnName];\n  API.prototype[fnName] = async function (this: T, ...args: Parameters<T[K]>) {\n    const result = await origFn.call(this, ...args);\n    fn.call(this, result, args);\n    return result;\n  } as any;\n}","import { BindGroupLayoutDescriptorPlus } from './pipeline.js';\nimport {\n  assert,\n  objToString,\n} from './validation.js';\nimport {\n  wrapFunctionBefore,\n} from './wrap-api.js';\n\nexport type DeviceResource =\n  | GPUBindGroup\n  | GPUBindGroupLayout\n  | GPUBuffer\n  | GPUCanvasContext\n  | GPUCommandEncoder\n  | GPUComputePassEncoder\n  | GPUComputePipeline\n  | GPUExternalTexture\n  | GPUPipelineLayout\n  | GPUQuerySet\n  | GPUQueue\n  | GPURenderBundle\n  | GPURenderBundleEncoder\n  | GPURenderPassEncoder\n  | GPURenderPipeline\n  | GPUSampler\n  | GPUShaderModule\n  | GPUTexture\n\nexport const s_objToDevice = new WeakMap<DeviceResource, GPUDevice>();\n\nexport type Destroyable = GPUTexture | GPUBuffer | GPUQuerySet | GPUDevice;\n\nconst s_destroyedResource = new WeakSet<Destroyable>();\n\nexport function assertNotDestroyed(obj: Destroyable) {\n  assert(!s_destroyedResource.has(obj), () => `${objToString(obj)} is destroyed`);\n}\n\nlet s_nextId = 1;\nconst s_objectToId = new WeakMap<DeviceResource, number>();\nexport function getIdForObject(obj: DeviceResource) {\n  let id = s_objectToId.get(obj);\n  if (id) {\n    return id;\n  }\n  id = s_nextId++;\n  s_objectToId.set(obj, id);\n  return id;\n}\n\nwrapFunctionBefore(GPUBuffer, 'destroy', function (this: GPUBuffer) {\n  s_destroyedResource.add(this);\n});\n\nwrapFunctionBefore(GPUTexture, 'destroy', function (this: GPUTexture) {\n  s_destroyedResource.add(this);\n});\n\nwrapFunctionBefore(GPUQuerySet, 'destroy', function (this: GPUQuerySet) {\n  s_destroyedResource.add(this);\n});\n\nwrapFunctionBefore(GPUDevice, 'destroy', function (this: GPUDevice) {\n  s_destroyedResource.add(this);\n});\n\nexport type BindGroupInfo = {\n  layoutPlus: BindGroupLayoutDescriptorPlus,\n  entries: GPUBindGroupEntry[],\n};\n\nexport const s_bindGroupToInfo = new WeakMap<GPUBindGroup, BindGroupInfo>();\n","import {\n  s_objToDevice\n} from './shared-state.js';\n\nconst deviceToErrorScopeStack: WeakMap<GPUDevice, {filter: GPUErrorFilter, errors: Promise<GPUError | null>[]}[]> = new WeakMap();\nconst origPushErrorScope = GPUDevice.prototype.pushErrorScope;\nconst origPopErrorScope = GPUDevice.prototype.popErrorScope;\n\n/*\nfunction getFilterForGPUError(error: GPUError): GPUErrorFilter {\n  if (error instanceof GPUValidationError) {\n    return 'validation';\n  }\n  if (error instanceof GPUOutOfMemoryError) {\n    return 'out-of-memory';\n  }\n  if (error instanceof GPUInternalError) {\n    return 'internal';\n  }\n  throw new Error('unknown GPUError type');\n}\n*/\n\ntype AnyFunction = (...args: any[]) => any;\n\nfunction errorWrapper<T extends AnyFunction>(this: any, device: GPUDevice, fnName: string, origFn: T, ...args: Parameters<T>): ReturnType<T> {\n  const stack = new Error();\n  origPushErrorScope.call(device, 'validation');\n  const result = origFn.call(this, ...args);\n\n  const errorScopeStack = deviceToErrorScopeStack.get(device)!;\n  const currentErrorScope = errorScopeStack.findLast(scope => scope.filter === 'validation');\n\n  const promise = origPopErrorScope.call(device)\n    .then(error => {\n      // If there was a currentErrorScope when we added pushed then remove our promise\n      if (currentErrorScope) {\n        const ndx = currentErrorScope.errors.indexOf(promise);\n        if (ndx) {\n          currentErrorScope.errors.splice(ndx, 1);\n        }\n      } else {\n        // there was no currentErrorScope so emit the error\n        if (error) {\n          device.dispatchEvent(new GPUUncapturedErrorEvent('uncapturederror', { error }));\n        }\n      }\n\n      // show it\n      if (error) {\n        console.error('WebGPU ERROR in:', fnName, args);\n        console.error(error.message);\n        console.error(stack.stack);\n      }\n\n      // return it (as a promise)\n      return error;\n     });\n\n  if (currentErrorScope) {\n    currentErrorScope.errors.push(promise);\n  }\n  return result;\n}\n\nfunction addErrorWrapper<T extends { prototype: any }>(api: T, fnName: keyof T['prototype'] & PropertyKey): void {\n  const origFn = api.prototype[fnName] as AnyFunction;\n  api.prototype[fnName] = function (this: any, ...args: any[]) {\n    return errorWrapper.call(this, this, fnName.toString(), origFn, ...args);\n  };\n}\n\nfunction addErrorWrapperWithDevice<T extends { prototype: any }>(api: T, fnName: keyof T['prototype'] & PropertyKey): void {\n  const origFn = api.prototype[fnName] as AnyFunction;\n  api.prototype[fnName] = function (this: any, ...args: any[]) {\n    const device = s_objToDevice.get(this as GPUQueue)!;\n    return errorWrapper.call(this, device, fnName.toString(), origFn, ...args);\n  };\n}\n\n/**\n * given a class returns all the method names.\n */\nfunction getAPIFunctionNames<T extends { prototype: any }>(api: T) {\n  return Object.entries(Object.getOwnPropertyDescriptors(api.prototype))\n     .filter(([, info]) => info.enumerable && typeof info.value === 'function')\n     .map(([name]) => name as keyof T['prototype'] & PropertyKey);\n}\n\nconst skip = new Set([\n  'pushErrorScope',\n  'popErrorScope',\n  'destroy',\n]);\ngetAPIFunctionNames(GPUDevice)\n  .filter(n => !skip.has(n))\n  .forEach(n => addErrorWrapper(GPUDevice, n));\ngetAPIFunctionNames(GPUQueue)\n  .forEach(n => addErrorWrapperWithDevice(GPUQueue, n));\n\nGPUDevice.prototype.pushErrorScope = (function (origFn) {\n  return function (this: GPUDevice, filter: GPUErrorFilter) {\n    origFn.call(this, filter);\n    const errorScopeStack = deviceToErrorScopeStack.get(this);\n    errorScopeStack!.push({filter, errors: []});\n  };\n})(GPUDevice.prototype.pushErrorScope);\n\nGPUDevice.prototype.popErrorScope = (function (origFn) {\n  return function (this: GPUDevice) {\n    const errorScopeStack = deviceToErrorScopeStack.get(this);\n    const errorScope = errorScopeStack!.pop();\n    if (errorScope === undefined) {\n      throw new DOMException('popErrorScope called on empty error scope stack', 'OperationError');\n    }\n    const errPromise = origFn.call(this);\n    return errorScope.errors.pop() ?? errPromise;\n  };\n})(GPUDevice.prototype.popErrorScope);\n\nGPUAdapter.prototype.requestDevice = (function (origFn) {\n  return async function (this: GPUAdapter, ...args) {\n    const device = await origFn.call(this, ...args);\n    if (device) {\n      device.addEventListener('uncapturederror', function (e) {\n        console.error((e as GPUUncapturedErrorEvent).error.message);\n      });\n      deviceToErrorScopeStack.set(device, []);\n      s_objToDevice.set(device.queue, device);\n    }\n    return device;\n  };\n})(GPUAdapter.prototype.requestDevice);\n\n","/* webgpu-utils@1.8.2, license MIT */\nconst roundUpToMultipleOf = (v, multiple) => (((v + multiple - 1) / multiple) | 0) * multiple;\nfunction keysOf(obj) {\n    return Object.keys(obj);\n}\nfunction range(count, fn) {\n    return new Array(count).fill(0).map((_, i) => fn(i));\n}\n\nclass TypedArrayViewGenerator {\n    arrayBuffer;\n    byteOffset;\n    constructor(sizeInBytes) {\n        this.arrayBuffer = new ArrayBuffer(sizeInBytes);\n        this.byteOffset = 0;\n    }\n    align(alignment) {\n        this.byteOffset = roundUpToMultipleOf(this.byteOffset, alignment);\n    }\n    pad(numBytes) {\n        this.byteOffset += numBytes;\n    }\n    getView(Ctor, numElements) {\n        const view = new Ctor(this.arrayBuffer, this.byteOffset, numElements);\n        this.byteOffset += view.byteLength;\n        return view;\n    }\n}\nfunction subarray(arr, offset, length) {\n    return arr.subarray(offset, offset + length);\n}\n// TODO: fix better?\nconst isTypedArray = (arr) => arr && typeof arr.length === 'number' && arr.buffer instanceof ArrayBuffer && typeof arr.byteLength === 'number';\n\nconst createTypeDefs = (defs) => defs;\nconst b = createTypeDefs({\n    i32: { numElements: 1, align: 4, size: 4, type: 'i32', View: Int32Array },\n    u32: { numElements: 1, align: 4, size: 4, type: 'u32', View: Uint32Array },\n    f32: { numElements: 1, align: 4, size: 4, type: 'f32', View: Float32Array },\n    f16: { numElements: 1, align: 2, size: 2, type: 'u16', View: Uint16Array },\n    vec2f: { numElements: 2, align: 8, size: 8, type: 'f32', View: Float32Array },\n    vec2i: { numElements: 2, align: 8, size: 8, type: 'i32', View: Int32Array },\n    vec2u: { numElements: 2, align: 8, size: 8, type: 'u32', View: Uint32Array },\n    vec2h: { numElements: 2, align: 4, size: 4, type: 'u16', View: Uint16Array },\n    vec3i: { numElements: 3, align: 16, size: 12, type: 'i32', View: Int32Array },\n    vec3u: { numElements: 3, align: 16, size: 12, type: 'u32', View: Uint32Array },\n    vec3f: { numElements: 3, align: 16, size: 12, type: 'f32', View: Float32Array },\n    vec3h: { numElements: 3, align: 8, size: 6, type: 'u16', View: Uint16Array },\n    vec4i: { numElements: 4, align: 16, size: 16, type: 'i32', View: Int32Array },\n    vec4u: { numElements: 4, align: 16, size: 16, type: 'u32', View: Uint32Array },\n    vec4f: { numElements: 4, align: 16, size: 16, type: 'f32', View: Float32Array },\n    vec4h: { numElements: 4, align: 8, size: 8, type: 'u16', View: Uint16Array },\n    // AlignOf(vecR)\tSizeOf(array<vecR, C>)\n    mat2x2f: { numElements: 4, align: 8, size: 16, type: 'f32', View: Float32Array },\n    mat2x2h: { numElements: 4, align: 4, size: 8, type: 'u16', View: Uint16Array },\n    mat3x2f: { numElements: 6, align: 8, size: 24, type: 'f32', View: Float32Array },\n    mat3x2h: { numElements: 6, align: 4, size: 12, type: 'u16', View: Uint16Array },\n    mat4x2f: { numElements: 8, align: 8, size: 32, type: 'f32', View: Float32Array },\n    mat4x2h: { numElements: 8, align: 4, size: 16, type: 'u16', View: Uint16Array },\n    mat2x3f: { numElements: 8, align: 16, size: 32, pad: [3, 1], type: 'f32', View: Float32Array },\n    mat2x3h: { numElements: 8, align: 8, size: 16, pad: [3, 1], type: 'u16', View: Uint16Array },\n    mat3x3f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n    mat3x3h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n    mat4x3f: { numElements: 16, align: 16, size: 64, pad: [3, 1], type: 'f32', View: Float32Array },\n    mat4x3h: { numElements: 16, align: 8, size: 32, pad: [3, 1], type: 'u16', View: Uint16Array },\n    mat2x4f: { numElements: 8, align: 16, size: 32, type: 'f32', View: Float32Array },\n    mat2x4h: { numElements: 8, align: 8, size: 16, type: 'u16', View: Uint16Array },\n    mat3x4f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n    mat3x4h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n    mat4x4f: { numElements: 16, align: 16, size: 64, type: 'f32', View: Float32Array },\n    mat4x4h: { numElements: 16, align: 8, size: 32, type: 'u16', View: Uint16Array },\n    // Note: At least as of WGSL V1 you can not create a bool for uniform or storage.\n    // You can only create one in an internal struct. But, this code generates\n    // views of structs and it needs to not fail if the struct has a bool\n    bool: { numElements: 0, align: 1, size: 0, type: 'bool', View: Uint32Array },\n});\nconst kWGSLTypeInfo = createTypeDefs({\n    ...b,\n    'atomic<i32>': b.i32,\n    'atomic<u32>': b.u32,\n    'vec2<i32>': b.vec2i,\n    'vec2<u32>': b.vec2u,\n    'vec2<f32>': b.vec2f,\n    'vec2<f16>': b.vec2h,\n    'vec3<i32>': b.vec3i,\n    'vec3<u32>': b.vec3u,\n    'vec3<f32>': b.vec3f,\n    'vec3<f16>': b.vec3h,\n    'vec4<i32>': b.vec4i,\n    'vec4<u32>': b.vec4u,\n    'vec4<f32>': b.vec4f,\n    'vec4<f16>': b.vec4h,\n    'mat2x2<f32>': b.mat2x2f,\n    'mat2x2<f16>': b.mat2x2h,\n    'mat3x2<f32>': b.mat3x2f,\n    'mat3x2<f16>': b.mat3x2h,\n    'mat4x2<f32>': b.mat4x2f,\n    'mat4x2<f16>': b.mat4x2h,\n    'mat2x3<f32>': b.mat2x3f,\n    'mat2x3<f16>': b.mat2x3h,\n    'mat3x3<f32>': b.mat3x3f,\n    'mat3x3<f16>': b.mat3x3h,\n    'mat4x3<f32>': b.mat4x3f,\n    'mat4x3<f16>': b.mat4x3h,\n    'mat2x4<f32>': b.mat2x4f,\n    'mat2x4<f16>': b.mat2x4h,\n    'mat3x4<f32>': b.mat3x4f,\n    'mat3x4<f16>': b.mat3x4h,\n    'mat4x4<f32>': b.mat4x4f,\n    'mat4x4<f16>': b.mat4x4h,\n});\nconst kWGSLTypes = keysOf(kWGSLTypeInfo);\n\n/**\n * Set which intrinsic types to make views for.\n *\n * Example:\n *\n * Given a an array of intrinsics like this\n * `array<vec3, 200>`\n *\n * The default is to create a single `Float32Array(4 * 200)`\n * because creating 200 `Float32Array` views is not usually\n * what you want.\n *\n * If you do want individual views then you'd call\n * `setIntrinsicsToView(['vec3f'])` and now you get\n * an array of 200 `Float32Array`s.\n *\n * Note: `setIntrinsicsToView` always sets ALL types. The list you\n * pass it is the types you want views created for, all other types\n * will be reset to do the default. In other words\n *\n * ```js\n * setIntrinsicsToView(['vec3f'])\n * setIntrinsicsToView(['vec2f'])\n * ```\n *\n * Only `vec2f` will have views created. `vec3f` has been reset to the default by\n * the second call\n *\n * You can pass in `true` as the 2nd parameter to make it set which types\n * to flatten and all others will be set to have views created. For example\n * to expand all types would be `setIntrinsicsToView([], true)`. To expand\n * all except `f32` would be `setIntrinsicsToView(['f32'], true)`.\n *\n * To reset all types to the default call it with no arguments\n *\n * @param types array of types to make views for\n * @param flatten whether to flatten or expand the specified types.\n */\nfunction setIntrinsicsToView(types = [], flatten) {\n    // we need to track what we've viewed because for example `vec3f` references\n    // the same info as `vec3<f32>` so we'd set one and reset the other.\n    const visited = new Set();\n    for (const type of kWGSLTypes) {\n        const info = kWGSLTypeInfo[type];\n        if (!visited.has(info)) {\n            visited.add(info);\n            info.flatten = types.includes(type) ? flatten : !flatten;\n        }\n    }\n}\nsetIntrinsicsToView();\n// This needs to be fixed! 😱\nfunction getSizeOfTypeDef(typeDef) {\n    const asArrayDef = typeDef;\n    const elementType = asArrayDef.elementType;\n    if (elementType) {\n        return asArrayDef.size;\n        /*\n        if (isIntrinsic(elementType)) {\n            const asIntrinsicDef = elementType as IntrinsicDefinition;\n            const { align } = typeInfo[asIntrinsicDef.type];\n            return roundUpToMultipleOf(typeDef.size, align) * asArrayDef.numElements;\n        } else {\n            return asArrayDef.numElements * getSizeOfTypeDef(elementType);\n        }\n        */\n    }\n    else {\n        const asStructDef = typeDef;\n        const numElements = asArrayDef.numElements || 1;\n        if (asStructDef.fields) {\n            return typeDef.size * numElements;\n        }\n        else {\n            const asIntrinsicDef = typeDef;\n            const { align } = kWGSLTypeInfo[asIntrinsicDef.type];\n            return numElements > 1\n                ? roundUpToMultipleOf(typeDef.size, align) * numElements\n                : typeDef.size;\n        }\n    }\n}\n// If numElements is undefined this is NOT an array. If it is defined then it IS an array\n// Sizes for arrays are different than sizes for non-arrays. Example\n// a vec3f non array is Float32Array(3)\n// a vec3f array of 2 is Float32Array(4 * 2)\n// a vec3f array of 1 is Float32Array(4 * 1)\nfunction makeIntrinsicTypedArrayView(typeDef, buffer, baseOffset, numElements) {\n    const { size, type } = typeDef;\n    try {\n        const { View, align } = kWGSLTypeInfo[type];\n        const isArray = numElements !== undefined;\n        const sizeInBytes = isArray\n            ? roundUpToMultipleOf(size, align)\n            : size;\n        const baseNumElements = sizeInBytes / View.BYTES_PER_ELEMENT;\n        const effectiveNumElements = isArray\n            ? (numElements === 0\n                ? (buffer.byteLength - baseOffset) / sizeInBytes\n                : numElements)\n            : 1;\n        return new View(buffer, baseOffset, baseNumElements * effectiveNumElements);\n    }\n    catch {\n        throw new Error(`unknown type: ${type}`);\n    }\n}\nfunction isIntrinsic(typeDef) {\n    return !typeDef.fields &&\n        !typeDef.elementType;\n}\n/**\n * Creates a set of named TypedArray views on an ArrayBuffer. If you don't\n * pass in an ArrayBuffer, one will be created. If you're using an unsized\n * array then you must pass in your own arraybuffer\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct Stuff {\n *    direction: vec3f,\n *    strength: f32,\n *    matrix: mat4x4f,\n * };\n * @group(0) @binding(0) var<uniform> uni: Stuff;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const views = makeTypedArrayViews(devs.uniforms.uni.typeDefinition);\n * ```\n *\n * views would effectively be\n *\n * ```js\n * views = {\n *   direction: Float32Array(arrayBuffer, 0, 3),\n *   strength: Float32Array(arrayBuffer, 3, 4),\n *   matrix: Float32Array(arraybuffer, 4, 20),\n * };\n * ```\n *\n * You can use the views directly or you can use @link {setStructuredView}\n *\n * @param typeDef Definition of the various types of views.\n * @param arrayBuffer Optional ArrayBuffer to use (if one provided one will be created)\n * @param offset Optional offset in existing ArrayBuffer to start the views.\n * @returns A bunch of named TypedArray views and the ArrayBuffer\n */\nfunction makeTypedArrayViews(typeDef, arrayBuffer, offset) {\n    const baseOffset = offset || 0;\n    const buffer = arrayBuffer || new ArrayBuffer(getSizeOfTypeDef(typeDef));\n    const makeViews = (typeDef, baseOffset) => {\n        const asArrayDef = typeDef;\n        const elementType = asArrayDef.elementType;\n        if (elementType) {\n            // TODO: Should be optional? Per Type? Depth set? Per field?\n            // The issue is, if we have `array<vec4, 1000>` we don't likely\n            // want 1000 `Float32Array(4)` views. We want 1 `Float32Array(1000 * 4)` view.\n            // On the other hand, if we have `array<mat4x4, 10>` the maybe we do want\n            // 10 `Float32Array(16)` views since you might want to do\n            // `mat4.perspective(fov, aspect, near, far, foo.bar.arrayOf10Mat4s[3])`;\n            if (isIntrinsic(elementType) && kWGSLTypeInfo[elementType.type].flatten) {\n                return makeIntrinsicTypedArrayView(elementType, buffer, baseOffset, asArrayDef.numElements);\n            }\n            else {\n                const { size } = getSizeAndAlignmentOfUnsizedArrayElementOfTypeDef(typeDef);\n                const effectiveNumElements = asArrayDef.numElements === 0\n                    ? (buffer.byteLength - baseOffset) / size\n                    : asArrayDef.numElements;\n                return range(effectiveNumElements, i => makeViews(elementType, baseOffset + size * i));\n            }\n        }\n        else if (typeof typeDef === 'string') {\n            throw Error('unreachable');\n        }\n        else {\n            const fields = typeDef.fields;\n            if (fields) {\n                const views = {};\n                for (const [name, { type, offset }] of Object.entries(fields)) {\n                    views[name] = makeViews(type, baseOffset + offset);\n                }\n                return views;\n            }\n            else {\n                return makeIntrinsicTypedArrayView(typeDef, buffer, baseOffset);\n            }\n        }\n    };\n    return { views: makeViews(typeDef, baseOffset), arrayBuffer: buffer };\n}\n/**\n * Given a set of TypeArrayViews and matching JavaScript data\n * sets the content of the views.\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct Stuff {\n *    direction: vec3f,\n *    strength: f32,\n *    matrix: mat4x4f,\n * };\n * @group(0) @binding(0) var<uniform> uni: Stuff;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const views = makeTypedArrayViews(devs.uniforms.uni.typeDefinition);\n *\n * setStructuredViews({\n *   direction: [1, 2, 3],\n *   strength: 45,\n *   matrix: [\n *     1, 0, 0, 0,\n *     0, 1, 0, 0,\n *     0, 0, 1, 0,\n *     0, 0, 0, 1,\n *   ],\n * });\n * ```\n *\n * The code above will set the various views, which all point to different\n * locations within the same array buffer.\n *\n * See @link {makeTypedArrayViews}.\n *\n * @param data The new values\n * @param views TypedArray views as returned from {@link makeTypedArrayViews}\n */\nfunction setStructuredView(data, views) {\n    if (data === undefined) {\n        return;\n    }\n    else if (isTypedArray(views)) {\n        const view = views;\n        if (view.length === 1 && typeof data === 'number') {\n            view[0] = data;\n        }\n        else {\n            if (Array.isArray(data[0]) || isTypedArray(data[0])) {\n                // complete hack!\n                // there's no type data here so let's guess based on the user's data\n                const dataLen = data[0].length;\n                const stride = dataLen === 3 ? 4 : dataLen;\n                for (let i = 0; i < data.length; ++i) {\n                    const offset = i * stride;\n                    view.set(data[i], offset);\n                }\n            }\n            else {\n                view.set(data);\n            }\n        }\n    }\n    else if (Array.isArray(views)) {\n        const asArray = views;\n        data.forEach((newValue, ndx) => {\n            setStructuredView(newValue, asArray[ndx]);\n        });\n    }\n    else {\n        const asViews = views;\n        for (const [key, newValue] of Object.entries(data)) {\n            const view = asViews[key];\n            if (view) {\n                setStructuredView(newValue, view);\n            }\n        }\n    }\n}\n/**\n * Given a VariableDefinition, create matching TypedArray views\n * @param varDef A VariableDefinition as returned from {@link makeShaderDataDefinitions}\n * @param arrayBuffer Optional ArrayBuffer for the views\n * @param offset Optional offset into the ArrayBuffer for the views\n * @returns TypedArray views for the various named fields of the structure as well\n *    as a `set` function to make them easy to set, and the arrayBuffer\n */\nfunction makeStructuredView(varDef, arrayBuffer, offset = 0) {\n    const asVarDef = varDef;\n    const typeDef = asVarDef.group === undefined ? varDef : asVarDef.typeDefinition;\n    const views = makeTypedArrayViews(typeDef, arrayBuffer, offset);\n    return {\n        ...views,\n        set(data) {\n            setStructuredView(data, views.views);\n        },\n    };\n}\nconst s_views = new WeakMap();\nfunction getViewsByCtor(arrayBuffer) {\n    let viewsByCtor = s_views.get(arrayBuffer);\n    if (!viewsByCtor) {\n        viewsByCtor = new Map();\n        s_views.set(arrayBuffer, viewsByCtor);\n    }\n    return viewsByCtor;\n}\nfunction getView(arrayBuffer, Ctor) {\n    const viewsByCtor = getViewsByCtor(arrayBuffer);\n    let view = viewsByCtor.get(Ctor);\n    if (!view) {\n        view = new Ctor(arrayBuffer);\n        viewsByCtor.set(Ctor, view);\n    }\n    return view;\n}\n// Is this something like [1,2,3]?\nfunction isArrayLikeOfNumber(data) {\n    return isTypedArray(data) || Array.isArray(data) && typeof data[0] === 'number';\n}\nfunction setIntrinsicFromArrayLikeOfNumber(typeDef, data, arrayBuffer, offset) {\n    const asIntrinsicDefinition = typeDef;\n    const type = kWGSLTypeInfo[asIntrinsicDefinition.type];\n    const view = getView(arrayBuffer, type.View);\n    const index = offset / view.BYTES_PER_ELEMENT;\n    if (typeof data === 'number') {\n        view[index] = data;\n    }\n    else {\n        view.set(data, index);\n    }\n}\n/**\n * Sets values on an existing array buffer from a TypeDefinition\n * @param typeDef A type definition provided by @link {makeShaderDataDefinitions}\n * @param data The source data\n * @param arrayBuffer The arrayBuffer who's data to set.\n * @param offset An offset in the arrayBuffer to start at.\n */\nfunction setTypedValues(typeDef, data, arrayBuffer, offset = 0) {\n    const asArrayDef = typeDef;\n    const elementType = asArrayDef.elementType;\n    if (elementType) {\n        // It's ArrayDefinition\n        if (isIntrinsic(elementType)) {\n            const asIntrinsicDef = elementType;\n            if (isArrayLikeOfNumber(data)) {\n                setIntrinsicFromArrayLikeOfNumber(asIntrinsicDef, data, arrayBuffer, offset);\n                return;\n            }\n        }\n        data.forEach((newValue, ndx) => {\n            setTypedValues(elementType, newValue, arrayBuffer, offset + elementType.size * ndx);\n        });\n        return;\n    }\n    const asStructDef = typeDef;\n    const fields = asStructDef.fields;\n    if (fields) {\n        // It's StructDefinition\n        for (const [key, newValue] of Object.entries(data)) {\n            const fieldDef = fields[key];\n            if (fieldDef) {\n                setTypedValues(fieldDef.type, newValue, arrayBuffer, offset + fieldDef.offset);\n            }\n        }\n    }\n    else {\n        // It's IntrinsicDefinition\n        setIntrinsicFromArrayLikeOfNumber(typeDef, data, arrayBuffer, offset);\n    }\n}\n/**\n * Same as @link {setTypedValues} except it takes a @link {VariableDefinition}.\n * @param varDef A variable definition provided by @link {makeShaderDataDefinitions}\n * @param data The source data\n * @param arrayBuffer The arrayBuffer who's data to set.\n * @param offset An offset in the arrayBuffer to start at.\n */\nfunction setStructuredValues(varDef, data, arrayBuffer, offset = 0) {\n    setTypedValues(varDef.typeDefinition, data, arrayBuffer, offset);\n}\nfunction getAlignmentOfTypeDef(typeDef) {\n    const asArrayDef = typeDef;\n    const elementType = asArrayDef.elementType;\n    if (elementType) {\n        return getAlignmentOfTypeDef(elementType);\n    }\n    const asStructDef = typeDef;\n    const fields = asStructDef.fields;\n    if (fields) {\n        return Object.values(fields).reduce((max, { type }) => Math.max(max, getAlignmentOfTypeDef(type)), 0);\n    }\n    const { type } = typeDef;\n    const { align } = kWGSLTypeInfo[type];\n    return align;\n}\nfunction getSizeAndAlignmentOfUnsizedArrayElementOfTypeDef(typeDef) {\n    const asArrayDef = typeDef;\n    const elementType = asArrayDef.elementType;\n    if (elementType) {\n        const unalignedSize = elementType.size;\n        const align = getAlignmentOfTypeDef(elementType);\n        return {\n            unalignedSize,\n            align,\n            size: roundUpToMultipleOf(unalignedSize, align),\n        };\n    }\n    const asStructDef = typeDef;\n    const fields = asStructDef.fields;\n    if (fields) {\n        const lastField = Object.values(fields).pop();\n        if (lastField.type.size === 0) {\n            return getSizeAndAlignmentOfUnsizedArrayElementOfTypeDef(lastField.type);\n        }\n    }\n    return {\n        size: 0,\n        unalignedSize: 0,\n        align: 1,\n    };\n}\n/**\n * Returns the size, align, and unalignedSize of \"the\" unsized array element. Unsized arrays are only\n * allowed at the outer most level or the last member of a top level struct.\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct Foo {\n *   a: u32,\n *   b: array<vec3f>,\n * };\n * @group(0) @binding(0) var<storage> f: Foo;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const { size, align, unalignedSize } = getSizeAndAlignmentOfUnsizedArrayElement(\n *    defs.storages.f);\n * // size = 16   (since you need to allocate 16 bytes per element)\n * // align = 16  (since vec3f needs to be aligned to 16 bytes)\n * // unalignedSize = 12 (since only 12 bytes are used for a vec3f)\n * ```\n *\n * Generally you only need size. Example:\n *\n * ```js\n * const code = `\n * struct Foo {\n *   a: u32,\n *   b: array<vec3f>,\n * };\n * @group(0) @binding(0) var<storage> f: Foo;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const { size } = getSizeAndAlignmentOfUnsizedArrayElement(defs.storages.f);\n * const numElements = 10;\n * const views = makeStructuredViews(\n *    defs.storages.f,\n *    new ArrayBuffer(defs.storages.f.size + size * numElements));\n * ```\n *\n * @param varDef A variable definition provided by @link {makeShaderDataDefinitions}\n * @returns the size, align, and unalignedSize in bytes of the unsized array element in this type definition.\n *   If there is no unsized array, size = 0.\n */\nfunction getSizeAndAlignmentOfUnsizedArrayElement(varDef) {\n    const asVarDef = varDef;\n    const typeDef = asVarDef.group === undefined ? varDef : asVarDef.typeDefinition;\n    return getSizeAndAlignmentOfUnsizedArrayElementOfTypeDef(typeDef);\n}\n\nclass ParseContext {\n    constructor() {\n        this.constants = new Map();\n        this.aliases = new Map();\n        this.structs = new Map();\n    }\n}\n/**\n * @class Node\n * @category AST\n * Base class for AST nodes parsed from a WGSL shader.\n */\nclass Node {\n    constructor() { }\n    get isAstNode() {\n        return true;\n    }\n    get astNodeType() {\n        return \"\";\n    }\n    evaluate(context) {\n        throw new Error(\"Cannot evaluate node\");\n    }\n    evaluateString(context) {\n        return this.evaluate(context).toString();\n    }\n    search(callback) { }\n    searchBlock(block, callback) {\n        if (block) {\n            callback(_BlockStart.instance);\n            for (const node of block) {\n                if (node instanceof Array) {\n                    this.searchBlock(node, callback);\n                }\n                else {\n                    node.search(callback);\n                }\n            }\n            callback(_BlockEnd.instance);\n        }\n    }\n}\n// For internal use only\nclass _BlockStart extends Node {\n}\n_BlockStart.instance = new _BlockStart();\n// For internal use only\nclass _BlockEnd extends Node {\n}\n_BlockEnd.instance = new _BlockEnd();\n/**\n * @class Statement\n * @extends Node\n * @category AST\n */\nclass Statement extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class Function\n * @extends Statement\n * @category AST\n */\nclass Function extends Statement {\n    constructor(name, args, returnType, body, startLine, endLine) {\n        super();\n        this.calls = new Set();\n        this.name = name;\n        this.args = args;\n        this.returnType = returnType;\n        this.body = body;\n        this.startLine = startLine;\n        this.endLine = endLine;\n    }\n    get astNodeType() {\n        return \"function\";\n    }\n    search(callback) {\n        this.searchBlock(this.body, callback);\n    }\n}\n/**\n * @class StaticAssert\n * @extends Statement\n * @category AST\n */\nclass StaticAssert extends Statement {\n    constructor(expression) {\n        super();\n        this.expression = expression;\n    }\n    get astNodeType() {\n        return \"staticAssert\";\n    }\n    search(callback) {\n        this.expression.search(callback);\n    }\n}\n/**\n * @class While\n * @extends Statement\n * @category AST\n */\nclass While extends Statement {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"while\";\n    }\n    search(callback) {\n        this.condition.search(callback);\n        this.searchBlock(this.body, callback);\n    }\n}\n/**\n * @class Continuing\n * @extends Statement\n * @category AST\n */\nclass Continuing extends Statement {\n    constructor(body) {\n        super();\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"continuing\";\n    }\n    search(callback) {\n        this.searchBlock(this.body, callback);\n    }\n}\n/**\n * @class For\n * @extends Statement\n * @category AST\n */\nclass For extends Statement {\n    constructor(init, condition, increment, body) {\n        super();\n        this.init = init;\n        this.condition = condition;\n        this.increment = increment;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"for\";\n    }\n    search(callback) {\n        var _a, _b, _c;\n        (_a = this.init) === null || _a === void 0 ? void 0 : _a.search(callback);\n        (_b = this.condition) === null || _b === void 0 ? void 0 : _b.search(callback);\n        (_c = this.increment) === null || _c === void 0 ? void 0 : _c.search(callback);\n        this.searchBlock(this.body, callback);\n    }\n}\n/**\n * @class Var\n * @extends Statement\n * @category AST\n */\nclass Var extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"var\";\n    }\n    search(callback) {\n        var _a;\n        callback(this);\n        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);\n    }\n}\n/**\n * @class Override\n * @extends Statement\n * @category AST\n */\nclass Override extends Statement {\n    constructor(name, type, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"override\";\n    }\n    search(callback) {\n        var _a;\n        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);\n    }\n}\n/**\n * @class Let\n * @extends Statement\n * @category AST\n */\nclass Let extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"let\";\n    }\n    search(callback) {\n        var _a;\n        callback(this);\n        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);\n    }\n}\n/**\n * @class Const\n * @extends Statement\n * @category AST\n */\nclass Const extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"const\";\n    }\n    evaluate(context) {\n        return this.value.evaluate(context);\n    }\n    search(callback) {\n        var _a;\n        callback(this);\n        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);\n    }\n}\nvar IncrementOperator;\n(function (IncrementOperator) {\n    IncrementOperator[\"increment\"] = \"++\";\n    IncrementOperator[\"decrement\"] = \"--\";\n})(IncrementOperator || (IncrementOperator = {}));\n(function (IncrementOperator) {\n    function parse(val) {\n        const key = val;\n        if (key == \"parse\")\n            throw new Error(\"Invalid value for IncrementOperator\");\n        return IncrementOperator[key];\n    }\n    IncrementOperator.parse = parse;\n})(IncrementOperator || (IncrementOperator = {}));\n/**\n * @class Increment\n * @extends Statement\n * @category AST\n */\nclass Increment extends Statement {\n    constructor(operator, variable) {\n        super();\n        this.operator = operator;\n        this.variable = variable;\n    }\n    get astNodeType() {\n        return \"increment\";\n    }\n    search(callback) {\n        this.variable.search(callback);\n    }\n}\nvar AssignOperator;\n(function (AssignOperator) {\n    AssignOperator[\"assign\"] = \"=\";\n    AssignOperator[\"addAssign\"] = \"+=\";\n    AssignOperator[\"subtractAssin\"] = \"-=\";\n    AssignOperator[\"multiplyAssign\"] = \"*=\";\n    AssignOperator[\"divideAssign\"] = \"/=\";\n    AssignOperator[\"moduloAssign\"] = \"%=\";\n    AssignOperator[\"andAssign\"] = \"&=\";\n    AssignOperator[\"orAssign\"] = \"|=\";\n    AssignOperator[\"xorAssign\"] = \"^=\";\n    AssignOperator[\"shiftLeftAssign\"] = \"<<=\";\n    AssignOperator[\"shiftRightAssign\"] = \">>=\";\n})(AssignOperator || (AssignOperator = {}));\n(function (AssignOperator) {\n    function parse(val) {\n        const key = val;\n        if (key == \"parse\") {\n            throw new Error(\"Invalid value for AssignOperator\");\n        }\n        //return AssignOperator[key];\n        return key;\n    }\n    AssignOperator.parse = parse;\n})(AssignOperator || (AssignOperator = {}));\n/**\n * @class Assign\n * @extends Statement\n * @category AST\n */\nclass Assign extends Statement {\n    constructor(operator, variable, value) {\n        super();\n        this.operator = operator;\n        this.variable = variable;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"assign\";\n    }\n    search(callback) {\n        this.variable.search(callback);\n        this.value.search(callback);\n    }\n}\n/**\n * @class Call\n * @extends Statement\n * @category AST\n */\nclass Call extends Statement {\n    constructor(name, args) {\n        super();\n        this.name = name;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"call\";\n    }\n    search(callback) {\n        for (const node of this.args) {\n            node.search(callback);\n        }\n        callback(this);\n    }\n}\n/**\n * @class Loop\n * @extends Statement\n * @category AST\n */\nclass Loop extends Statement {\n    constructor(body, continuing) {\n        super();\n        this.body = body;\n        this.continuing = continuing;\n    }\n    get astNodeType() {\n        return \"loop\";\n    }\n}\n/**\n * @class Switch\n * @extends Statement\n * @category AST\n */\nclass Switch extends Statement {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"body\";\n    }\n}\n/**\n * @class If\n * @extends Statement\n * @category AST\n */\nclass If extends Statement {\n    constructor(condition, body, elseif, _else) {\n        super();\n        this.condition = condition;\n        this.body = body;\n        this.elseif = elseif;\n        this.else = _else;\n    }\n    get astNodeType() {\n        return \"if\";\n    }\n    search(callback) {\n        this.condition.search(callback);\n        this.searchBlock(this.body, callback);\n        this.searchBlock(this.elseif, callback);\n        this.searchBlock(this.else, callback);\n    }\n}\n/**\n * @class Return\n * @extends Statement\n * @category AST\n */\nclass Return extends Statement {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"return\";\n    }\n    search(callback) {\n        var _a;\n        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);\n    }\n}\n/**\n * @class Enable\n * @extends Statement\n * @category AST\n */\nclass Enable extends Statement {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"enable\";\n    }\n}\n/**\n * @class Requires\n * @extends Statement\n * @category AST\n */\nclass Requires extends Statement {\n    constructor(extensions) {\n        super();\n        this.extensions = extensions;\n    }\n    get astNodeType() {\n        return \"requires\";\n    }\n}\n/**\n * @class Diagnostic\n * @extends Statement\n * @category AST\n */\nclass Diagnostic extends Statement {\n    constructor(severity, rule) {\n        super();\n        this.severity = severity;\n        this.rule = rule;\n    }\n    get astNodeType() {\n        return \"diagnostic\";\n    }\n}\n/**\n * @class Alias\n * @extends Statement\n * @category AST\n */\nclass Alias extends Statement {\n    constructor(name, type) {\n        super();\n        this.name = name;\n        this.type = type;\n    }\n    get astNodeType() {\n        return \"alias\";\n    }\n}\n/**\n * @class Discard\n * @extends Statement\n * @category AST\n */\nclass Discard extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"discard\";\n    }\n}\n/**\n * @class Break\n * @extends Statement\n * @category AST\n */\nclass Break extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"break\";\n    }\n}\n/**\n * @class Continue\n * @extends Statement\n * @category AST\n */\nclass Continue extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"continue\";\n    }\n}\n/**\n * @class Type\n * @extends Statement\n * @category AST\n */\nclass Type extends Statement {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"type\";\n    }\n    get isStruct() {\n        return false;\n    }\n    get isArray() {\n        return false;\n    }\n}\n/**\n * @class StructType\n * @extends Type\n * @category AST\n */\nclass Struct extends Type {\n    constructor(name, members, startLine, endLine) {\n        super(name);\n        this.members = members;\n        this.startLine = startLine;\n        this.endLine = endLine;\n    }\n    get astNodeType() {\n        return \"struct\";\n    }\n    get isStruct() {\n        return true;\n    }\n    /// Return the index of the member with the given name, or -1 if not found.\n    getMemberIndex(name) {\n        for (let i = 0; i < this.members.length; i++) {\n            if (this.members[i].name == name)\n                return i;\n        }\n        return -1;\n    }\n}\n/**\n * @class TemplateType\n * @extends Type\n * @category AST\n */\nclass TemplateType extends Type {\n    constructor(name, format, access) {\n        super(name);\n        this.format = format;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"template\";\n    }\n}\n/**\n * @class PointerType\n * @extends Type\n * @category AST\n */\nclass PointerType extends Type {\n    constructor(name, storage, type, access) {\n        super(name);\n        this.storage = storage;\n        this.type = type;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"pointer\";\n    }\n}\n/**\n * @class ArrayType\n * @extends Type\n * @category AST\n */\nclass ArrayType extends Type {\n    constructor(name, attributes, format, count) {\n        super(name);\n        this.attributes = attributes;\n        this.format = format;\n        this.count = count;\n    }\n    get astNodeType() {\n        return \"array\";\n    }\n    get isArray() {\n        return true;\n    }\n}\n/**\n * @class SamplerType\n * @extends Type\n * @category AST\n */\nclass SamplerType extends Type {\n    constructor(name, format, access) {\n        super(name);\n        this.format = format;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"sampler\";\n    }\n}\n/**\n * @class Expression\n * @extends Node\n * @category AST\n */\nclass Expression extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class StringExpr\n * @extends Expression\n * @category AST\n */\nclass StringExpr extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"stringExpr\";\n    }\n    toString() {\n        return this.value;\n    }\n    evaluateString() {\n        return this.value;\n    }\n}\n/**\n * @class CreateExpr\n * @extends Expression\n * @category AST\n */\nclass CreateExpr extends Expression {\n    constructor(type, args) {\n        super();\n        this.type = type;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"createExpr\";\n    }\n    search(callback) {\n        callback(this);\n        for (const node of this.args) {\n            node.search(callback);\n        }\n    }\n}\n/**\n * @class CallExpr\n * @extends Expression\n * @category AST\n */\nclass CallExpr extends Expression {\n    constructor(name, args) {\n        super();\n        this.name = name;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"callExpr\";\n    }\n    evaluate(context) {\n        switch (this.name) {\n            case \"abs\":\n                return Math.abs(this.args[0].evaluate(context));\n            case \"acos\":\n                return Math.acos(this.args[0].evaluate(context));\n            case \"acosh\":\n                return Math.acosh(this.args[0].evaluate(context));\n            case \"asin\":\n                return Math.asin(this.args[0].evaluate(context));\n            case \"asinh\":\n                return Math.asinh(this.args[0].evaluate(context));\n            case \"atan\":\n                return Math.atan(this.args[0].evaluate(context));\n            case \"atan2\":\n                return Math.atan2(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"atanh\":\n                return Math.atanh(this.args[0].evaluate(context));\n            case \"ceil\":\n                return Math.ceil(this.args[0].evaluate(context));\n            case \"clamp\":\n                return Math.min(Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context)), this.args[2].evaluate(context));\n            case \"cos\":\n                return Math.cos(this.args[0].evaluate(context));\n            //case \"cross\":\n            //TODO: (x[i] * y[j] - x[j] * y[i])\n            case \"degrees\":\n                return (this.args[0].evaluate(context) * 180) / Math.PI;\n            //case \"determinant\":\n            //TODO implement\n            case \"distance\":\n                return Math.sqrt(Math.pow(this.args[0].evaluate(context) - this.args[1].evaluate(context), 2));\n            case \"dot\":\n            //TODO: (x[i] * y[i])\n            case \"exp\":\n                return Math.exp(this.args[0].evaluate(context));\n            case \"exp2\":\n                return Math.pow(2, this.args[0].evaluate(context));\n            //case \"extractBits\":\n            //TODO: implement\n            //case \"firstLeadingBit\":\n            //TODO: implement\n            case \"floor\":\n                return Math.floor(this.args[0].evaluate(context));\n            case \"fma\":\n                return (this.args[0].evaluate(context) * this.args[1].evaluate(context) +\n                    this.args[2].evaluate(context));\n            case \"fract\":\n                return (this.args[0].evaluate(context) -\n                    Math.floor(this.args[0].evaluate(context)));\n            //case \"frexp\":\n            //TODO: implement\n            case \"inverseSqrt\":\n                return 1 / Math.sqrt(this.args[0].evaluate(context));\n            //case \"length\":\n            //TODO: implement\n            case \"log\":\n                return Math.log(this.args[0].evaluate(context));\n            case \"log2\":\n                return Math.log2(this.args[0].evaluate(context));\n            case \"max\":\n                return Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"min\":\n                return Math.min(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"mix\":\n                return (this.args[0].evaluate(context) *\n                    (1 - this.args[2].evaluate(context)) +\n                    this.args[1].evaluate(context) * this.args[2].evaluate(context));\n            case \"modf\":\n                return (this.args[0].evaluate(context) -\n                    Math.floor(this.args[0].evaluate(context)));\n            case \"pow\":\n                return Math.pow(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"radians\":\n                return (this.args[0].evaluate(context) * Math.PI) / 180;\n            case \"round\":\n                return Math.round(this.args[0].evaluate(context));\n            case \"sign\":\n                return Math.sign(this.args[0].evaluate(context));\n            case \"sin\":\n                return Math.sin(this.args[0].evaluate(context));\n            case \"sinh\":\n                return Math.sinh(this.args[0].evaluate(context));\n            case \"saturate\":\n                return Math.min(Math.max(this.args[0].evaluate(context), 0), 1);\n            case \"smoothstep\":\n                return (this.args[0].evaluate(context) *\n                    this.args[0].evaluate(context) *\n                    (3 - 2 * this.args[0].evaluate(context)));\n            case \"sqrt\":\n                return Math.sqrt(this.args[0].evaluate(context));\n            case \"step\":\n                return this.args[0].evaluate(context) < this.args[1].evaluate(context)\n                    ? 0\n                    : 1;\n            case \"tan\":\n                return Math.tan(this.args[0].evaluate(context));\n            case \"tanh\":\n                return Math.tanh(this.args[0].evaluate(context));\n            case \"trunc\":\n                return Math.trunc(this.args[0].evaluate(context));\n            default:\n                throw new Error(\"Non const function: \" + this.name);\n        }\n    }\n    search(callback) {\n        for (const node of this.args) {\n            node.search(callback);\n        }\n        callback(this);\n    }\n}\n/**\n * @class VariableExpr\n * @extends Expression\n * @category AST\n */\nclass VariableExpr extends Expression {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"varExpr\";\n    }\n    search(callback) {\n        callback(this);\n        if (this.postfix) {\n            this.postfix.search(callback);\n        }\n    }\n    evaluate(context) {\n        const constant = context.constants.get(this.name);\n        if (!constant) {\n            throw new Error(\"Cannot evaluate node\");\n        }\n        return constant.evaluate(context);\n    }\n}\n/**\n * @class ConstExpr\n * @extends Expression\n * @category AST\n */\nclass ConstExpr extends Expression {\n    constructor(name, initializer) {\n        super();\n        this.name = name;\n        this.initializer = initializer;\n    }\n    get astNodeType() {\n        return \"constExpr\";\n    }\n    evaluate(context) {\n        var _a, _b;\n        if (this.initializer instanceof CreateExpr) {\n            // This is a struct constant\n            const property = (_a = this.postfix) === null || _a === void 0 ? void 0 : _a.evaluateString(context);\n            const type = (_b = this.initializer.type) === null || _b === void 0 ? void 0 : _b.name;\n            const struct = context.structs.get(type);\n            const memberIndex = struct === null || struct === void 0 ? void 0 : struct.getMemberIndex(property);\n            if (memberIndex != -1) {\n                const value = this.initializer.args[memberIndex].evaluate(context);\n                return value;\n            }\n            console.log(memberIndex);\n        }\n        return this.initializer.evaluate(context);\n    }\n    search(callback) {\n        this.initializer.search(callback);\n    }\n}\n/**\n * @class LiteralExpr\n * @extends Expression\n * @category AST\n */\nclass LiteralExpr extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"literalExpr\";\n    }\n    evaluate() {\n        return this.value;\n    }\n}\n/**\n * @class BitcastExpr\n * @extends Expression\n * @category AST\n */\nclass BitcastExpr extends Expression {\n    constructor(type, value) {\n        super();\n        this.type = type;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"bitcastExpr\";\n    }\n    search(callback) {\n        this.value.search(callback);\n    }\n}\n/**\n * @class TypecastExpr\n * @extends Expression\n * @category AST\n */\nclass TypecastExpr extends Expression {\n    constructor(type, args) {\n        super();\n        this.type = type;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"typecastExpr\";\n    }\n    evaluate(context) {\n        return this.args[0].evaluate(context);\n    }\n    search(callback) {\n        this.searchBlock(this.args, callback);\n    }\n}\n/**\n * @class GroupingExpr\n * @extends Expression\n * @category AST\n */\nclass GroupingExpr extends Expression {\n    constructor(contents) {\n        super();\n        this.contents = contents;\n    }\n    get astNodeType() {\n        return \"groupExpr\";\n    }\n    evaluate(context) {\n        return this.contents[0].evaluate(context);\n    }\n    search(callback) {\n        this.searchBlock(this.contents, callback);\n    }\n}\n/**\n * @class ArrayIndex\n * @extends Expression\n * @category AST\n */\nclass ArrayIndex extends Expression {\n    constructor(index) {\n        super();\n        this.index = index;\n    }\n    search(callback) {\n        this.index.search(callback);\n    }\n}\n/**\n * @class Operator\n * @extends Expression\n * @category AST\n */\nclass Operator extends Expression {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class UnaryOperator\n * @extends Operator\n * @category AST\n * @property {string} operator +, -, !, ~\n */\nclass UnaryOperator extends Operator {\n    constructor(operator, right) {\n        super();\n        this.operator = operator;\n        this.right = right;\n    }\n    get astNodeType() {\n        return \"unaryOp\";\n    }\n    evaluate(context) {\n        switch (this.operator) {\n            case \"+\":\n                return this.right.evaluate(context);\n            case \"-\":\n                return -this.right.evaluate(context);\n            case \"!\":\n                return this.right.evaluate(context) ? 0 : 1;\n            case \"~\":\n                return ~this.right.evaluate(context);\n            default:\n                throw new Error(\"Unknown unary operator: \" + this.operator);\n        }\n    }\n    search(callback) {\n        this.right.search(callback);\n    }\n}\n/**\n * @class BinaryOperator\n * @extends Operator\n * @category AST\n * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||\n */\nclass BinaryOperator extends Operator {\n    constructor(operator, left, right) {\n        super();\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n    }\n    get astNodeType() {\n        return \"binaryOp\";\n    }\n    evaluate(context) {\n        switch (this.operator) {\n            case \"+\":\n                return this.left.evaluate(context) + this.right.evaluate(context);\n            case \"-\":\n                return this.left.evaluate(context) - this.right.evaluate(context);\n            case \"*\":\n                return this.left.evaluate(context) * this.right.evaluate(context);\n            case \"/\":\n                return this.left.evaluate(context) / this.right.evaluate(context);\n            case \"%\":\n                return this.left.evaluate(context) % this.right.evaluate(context);\n            case \"==\":\n                return this.left.evaluate(context) == this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"!=\":\n                return this.left.evaluate(context) != this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"<\":\n                return this.left.evaluate(context) < this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \">\":\n                return this.left.evaluate(context) > this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"<=\":\n                return this.left.evaluate(context) <= this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \">=\":\n                return this.left.evaluate(context) >= this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"&&\":\n                return this.left.evaluate(context) && this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"||\":\n                return this.left.evaluate(context) || this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            default:\n                throw new Error(`Unknown operator ${this.operator}`);\n        }\n    }\n    search(callback) {\n        this.left.search(callback);\n        this.right.search(callback);\n    }\n}\n/**\n * @class SwitchCase\n * @extends Node\n * @category AST\n */\nclass SwitchCase extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class Case\n * @extends SwitchCase\n * @category AST\n */\nclass Case extends SwitchCase {\n    constructor(selector, body) {\n        super();\n        this.selector = selector;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"case\";\n    }\n    search(callback) {\n        this.searchBlock(this.body, callback);\n    }\n}\n/**\n * @class Default\n * @extends SwitchCase\n * @category AST\n */\nclass Default extends SwitchCase {\n    constructor(body) {\n        super();\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"default\";\n    }\n    search(callback) {\n        this.searchBlock(this.body, callback);\n    }\n}\n/**\n * @class Argument\n * @extends Node\n * @category AST\n */\nclass Argument extends Node {\n    constructor(name, type, attributes) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n    }\n    get astNodeType() {\n        return \"argument\";\n    }\n}\n/**\n * @class ElseIf\n * @extends Node\n * @category AST\n */\nclass ElseIf extends Node {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"elseif\";\n    }\n    search(callback) {\n        this.condition.search(callback);\n        this.searchBlock(this.body, callback);\n    }\n}\n/**\n * @class Member\n * @extends Node\n * @category AST\n */\nclass Member extends Node {\n    constructor(name, type, attributes) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n    }\n    get astNodeType() {\n        return \"member\";\n    }\n}\n/**\n * @class Attribute\n * @extends Node\n * @category AST\n */\nclass Attribute extends Node {\n    constructor(name, value) {\n        super();\n        this.name = name;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"attribute\";\n    }\n}\n\nvar _a;\nvar TokenClass;\n(function (TokenClass) {\n    TokenClass[TokenClass[\"token\"] = 0] = \"token\";\n    TokenClass[TokenClass[\"keyword\"] = 1] = \"keyword\";\n    TokenClass[TokenClass[\"reserved\"] = 2] = \"reserved\";\n})(TokenClass || (TokenClass = {}));\nclass TokenType {\n    constructor(name, type, rule) {\n        this.name = name;\n        this.type = type;\n        this.rule = rule;\n    }\n    toString() {\n        return this.name;\n    }\n}\n/// Catalog of defined token types, keywords, and reserved words.\nclass TokenTypes {\n}\n_a = TokenTypes;\nTokenTypes.none = new TokenType(\"\", TokenClass.reserved, \"\");\nTokenTypes.eof = new TokenType(\"EOF\", TokenClass.token, \"\");\nTokenTypes.reserved = {\n    asm: new TokenType(\"asm\", TokenClass.reserved, \"asm\"),\n    bf16: new TokenType(\"bf16\", TokenClass.reserved, \"bf16\"),\n    do: new TokenType(\"do\", TokenClass.reserved, \"do\"),\n    enum: new TokenType(\"enum\", TokenClass.reserved, \"enum\"),\n    f16: new TokenType(\"f16\", TokenClass.reserved, \"f16\"),\n    f64: new TokenType(\"f64\", TokenClass.reserved, \"f64\"),\n    handle: new TokenType(\"handle\", TokenClass.reserved, \"handle\"),\n    i8: new TokenType(\"i8\", TokenClass.reserved, \"i8\"),\n    i16: new TokenType(\"i16\", TokenClass.reserved, \"i16\"),\n    i64: new TokenType(\"i64\", TokenClass.reserved, \"i64\"),\n    mat: new TokenType(\"mat\", TokenClass.reserved, \"mat\"),\n    premerge: new TokenType(\"premerge\", TokenClass.reserved, \"premerge\"),\n    regardless: new TokenType(\"regardless\", TokenClass.reserved, \"regardless\"),\n    typedef: new TokenType(\"typedef\", TokenClass.reserved, \"typedef\"),\n    u8: new TokenType(\"u8\", TokenClass.reserved, \"u8\"),\n    u16: new TokenType(\"u16\", TokenClass.reserved, \"u16\"),\n    u64: new TokenType(\"u64\", TokenClass.reserved, \"u64\"),\n    unless: new TokenType(\"unless\", TokenClass.reserved, \"unless\"),\n    using: new TokenType(\"using\", TokenClass.reserved, \"using\"),\n    vec: new TokenType(\"vec\", TokenClass.reserved, \"vec\"),\n    void: new TokenType(\"void\", TokenClass.reserved, \"void\"),\n};\nTokenTypes.keywords = {\n    array: new TokenType(\"array\", TokenClass.keyword, \"array\"),\n    atomic: new TokenType(\"atomic\", TokenClass.keyword, \"atomic\"),\n    bool: new TokenType(\"bool\", TokenClass.keyword, \"bool\"),\n    f32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\n    i32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\n    mat2x2: new TokenType(\"mat2x2\", TokenClass.keyword, \"mat2x2\"),\n    mat2x3: new TokenType(\"mat2x3\", TokenClass.keyword, \"mat2x3\"),\n    mat2x4: new TokenType(\"mat2x4\", TokenClass.keyword, \"mat2x4\"),\n    mat3x2: new TokenType(\"mat3x2\", TokenClass.keyword, \"mat3x2\"),\n    mat3x3: new TokenType(\"mat3x3\", TokenClass.keyword, \"mat3x3\"),\n    mat3x4: new TokenType(\"mat3x4\", TokenClass.keyword, \"mat3x4\"),\n    mat4x2: new TokenType(\"mat4x2\", TokenClass.keyword, \"mat4x2\"),\n    mat4x3: new TokenType(\"mat4x3\", TokenClass.keyword, \"mat4x3\"),\n    mat4x4: new TokenType(\"mat4x4\", TokenClass.keyword, \"mat4x4\"),\n    ptr: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),\n    sampler: new TokenType(\"sampler\", TokenClass.keyword, \"sampler\"),\n    sampler_comparison: new TokenType(\"sampler_comparison\", TokenClass.keyword, \"sampler_comparison\"),\n    struct: new TokenType(\"struct\", TokenClass.keyword, \"struct\"),\n    texture_1d: new TokenType(\"texture_1d\", TokenClass.keyword, \"texture_1d\"),\n    texture_2d: new TokenType(\"texture_2d\", TokenClass.keyword, \"texture_2d\"),\n    texture_2d_array: new TokenType(\"texture_2d_array\", TokenClass.keyword, \"texture_2d_array\"),\n    texture_3d: new TokenType(\"texture_3d\", TokenClass.keyword, \"texture_3d\"),\n    texture_cube: new TokenType(\"texture_cube\", TokenClass.keyword, \"texture_cube\"),\n    texture_cube_array: new TokenType(\"texture_cube_array\", TokenClass.keyword, \"texture_cube_array\"),\n    texture_multisampled_2d: new TokenType(\"texture_multisampled_2d\", TokenClass.keyword, \"texture_multisampled_2d\"),\n    texture_storage_1d: new TokenType(\"texture_storage_1d\", TokenClass.keyword, \"texture_storage_1d\"),\n    texture_storage_2d: new TokenType(\"texture_storage_2d\", TokenClass.keyword, \"texture_storage_2d\"),\n    texture_storage_2d_array: new TokenType(\"texture_storage_2d_array\", TokenClass.keyword, \"texture_storage_2d_array\"),\n    texture_storage_3d: new TokenType(\"texture_storage_3d\", TokenClass.keyword, \"texture_storage_3d\"),\n    texture_depth_2d: new TokenType(\"texture_depth_2d\", TokenClass.keyword, \"texture_depth_2d\"),\n    texture_depth_2d_array: new TokenType(\"texture_depth_2d_array\", TokenClass.keyword, \"texture_depth_2d_array\"),\n    texture_depth_cube: new TokenType(\"texture_depth_cube\", TokenClass.keyword, \"texture_depth_cube\"),\n    texture_depth_cube_array: new TokenType(\"texture_depth_cube_array\", TokenClass.keyword, \"texture_depth_cube_array\"),\n    texture_depth_multisampled_2d: new TokenType(\"texture_depth_multisampled_2d\", TokenClass.keyword, \"texture_depth_multisampled_2d\"),\n    texture_external: new TokenType(\"texture_external\", TokenClass.keyword, \"texture_external\"),\n    u32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\n    vec2: new TokenType(\"vec2\", TokenClass.keyword, \"vec2\"),\n    vec3: new TokenType(\"vec3\", TokenClass.keyword, \"vec3\"),\n    vec4: new TokenType(\"vec4\", TokenClass.keyword, \"vec4\"),\n    bitcast: new TokenType(\"bitcast\", TokenClass.keyword, \"bitcast\"),\n    block: new TokenType(\"block\", TokenClass.keyword, \"block\"),\n    break: new TokenType(\"break\", TokenClass.keyword, \"break\"),\n    case: new TokenType(\"case\", TokenClass.keyword, \"case\"),\n    continue: new TokenType(\"continue\", TokenClass.keyword, \"continue\"),\n    continuing: new TokenType(\"continuing\", TokenClass.keyword, \"continuing\"),\n    default: new TokenType(\"default\", TokenClass.keyword, \"default\"),\n    diagnostic: new TokenType(\"diagnostic\", TokenClass.keyword, \"diagnostic\"),\n    discard: new TokenType(\"discard\", TokenClass.keyword, \"discard\"),\n    else: new TokenType(\"else\", TokenClass.keyword, \"else\"),\n    enable: new TokenType(\"enable\", TokenClass.keyword, \"enable\"),\n    fallthrough: new TokenType(\"fallthrough\", TokenClass.keyword, \"fallthrough\"),\n    false: new TokenType(\"false\", TokenClass.keyword, \"false\"),\n    fn: new TokenType(\"fn\", TokenClass.keyword, \"fn\"),\n    for: new TokenType(\"for\", TokenClass.keyword, \"for\"),\n    function: new TokenType(\"function\", TokenClass.keyword, \"function\"),\n    if: new TokenType(\"if\", TokenClass.keyword, \"if\"),\n    let: new TokenType(\"let\", TokenClass.keyword, \"let\"),\n    const: new TokenType(\"const\", TokenClass.keyword, \"const\"),\n    loop: new TokenType(\"loop\", TokenClass.keyword, \"loop\"),\n    while: new TokenType(\"while\", TokenClass.keyword, \"while\"),\n    private: new TokenType(\"private\", TokenClass.keyword, \"private\"),\n    read: new TokenType(\"read\", TokenClass.keyword, \"read\"),\n    read_write: new TokenType(\"read_write\", TokenClass.keyword, \"read_write\"),\n    return: new TokenType(\"return\", TokenClass.keyword, \"return\"),\n    requires: new TokenType(\"requires\", TokenClass.keyword, \"requires\"),\n    storage: new TokenType(\"storage\", TokenClass.keyword, \"storage\"),\n    switch: new TokenType(\"switch\", TokenClass.keyword, \"switch\"),\n    true: new TokenType(\"true\", TokenClass.keyword, \"true\"),\n    alias: new TokenType(\"alias\", TokenClass.keyword, \"alias\"),\n    type: new TokenType(\"type\", TokenClass.keyword, \"type\"),\n    uniform: new TokenType(\"uniform\", TokenClass.keyword, \"uniform\"),\n    var: new TokenType(\"var\", TokenClass.keyword, \"var\"),\n    override: new TokenType(\"override\", TokenClass.keyword, \"override\"),\n    workgroup: new TokenType(\"workgroup\", TokenClass.keyword, \"workgroup\"),\n    write: new TokenType(\"write\", TokenClass.keyword, \"write\"),\n    r8unorm: new TokenType(\"r8unorm\", TokenClass.keyword, \"r8unorm\"),\n    r8snorm: new TokenType(\"r8snorm\", TokenClass.keyword, \"r8snorm\"),\n    r8uint: new TokenType(\"r8uint\", TokenClass.keyword, \"r8uint\"),\n    r8sint: new TokenType(\"r8sint\", TokenClass.keyword, \"r8sint\"),\n    r16uint: new TokenType(\"r16uint\", TokenClass.keyword, \"r16uint\"),\n    r16sint: new TokenType(\"r16sint\", TokenClass.keyword, \"r16sint\"),\n    r16float: new TokenType(\"r16float\", TokenClass.keyword, \"r16float\"),\n    rg8unorm: new TokenType(\"rg8unorm\", TokenClass.keyword, \"rg8unorm\"),\n    rg8snorm: new TokenType(\"rg8snorm\", TokenClass.keyword, \"rg8snorm\"),\n    rg8uint: new TokenType(\"rg8uint\", TokenClass.keyword, \"rg8uint\"),\n    rg8sint: new TokenType(\"rg8sint\", TokenClass.keyword, \"rg8sint\"),\n    r32uint: new TokenType(\"r32uint\", TokenClass.keyword, \"r32uint\"),\n    r32sint: new TokenType(\"r32sint\", TokenClass.keyword, \"r32sint\"),\n    r32float: new TokenType(\"r32float\", TokenClass.keyword, \"r32float\"),\n    rg16uint: new TokenType(\"rg16uint\", TokenClass.keyword, \"rg16uint\"),\n    rg16sint: new TokenType(\"rg16sint\", TokenClass.keyword, \"rg16sint\"),\n    rg16float: new TokenType(\"rg16float\", TokenClass.keyword, \"rg16float\"),\n    rgba8unorm: new TokenType(\"rgba8unorm\", TokenClass.keyword, \"rgba8unorm\"),\n    rgba8unorm_srgb: new TokenType(\"rgba8unorm_srgb\", TokenClass.keyword, \"rgba8unorm_srgb\"),\n    rgba8snorm: new TokenType(\"rgba8snorm\", TokenClass.keyword, \"rgba8snorm\"),\n    rgba8uint: new TokenType(\"rgba8uint\", TokenClass.keyword, \"rgba8uint\"),\n    rgba8sint: new TokenType(\"rgba8sint\", TokenClass.keyword, \"rgba8sint\"),\n    bgra8unorm: new TokenType(\"bgra8unorm\", TokenClass.keyword, \"bgra8unorm\"),\n    bgra8unorm_srgb: new TokenType(\"bgra8unorm_srgb\", TokenClass.keyword, \"bgra8unorm_srgb\"),\n    rgb10a2unorm: new TokenType(\"rgb10a2unorm\", TokenClass.keyword, \"rgb10a2unorm\"),\n    rg11b10float: new TokenType(\"rg11b10float\", TokenClass.keyword, \"rg11b10float\"),\n    rg32uint: new TokenType(\"rg32uint\", TokenClass.keyword, \"rg32uint\"),\n    rg32sint: new TokenType(\"rg32sint\", TokenClass.keyword, \"rg32sint\"),\n    rg32float: new TokenType(\"rg32float\", TokenClass.keyword, \"rg32float\"),\n    rgba16uint: new TokenType(\"rgba16uint\", TokenClass.keyword, \"rgba16uint\"),\n    rgba16sint: new TokenType(\"rgba16sint\", TokenClass.keyword, \"rgba16sint\"),\n    rgba16float: new TokenType(\"rgba16float\", TokenClass.keyword, \"rgba16float\"),\n    rgba32uint: new TokenType(\"rgba32uint\", TokenClass.keyword, \"rgba32uint\"),\n    rgba32sint: new TokenType(\"rgba32sint\", TokenClass.keyword, \"rgba32sint\"),\n    rgba32float: new TokenType(\"rgba32float\", TokenClass.keyword, \"rgba32float\"),\n    static_assert: new TokenType(\"static_assert\", TokenClass.keyword, \"static_assert\"),\n    // WGSL grammar has a few keywords that have different token names than the strings they\n    // represent. Aliasing them here.\n    /*int32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\n        uint32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\n        float32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\n        pointer: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),*/\n};\nTokenTypes.tokens = {\n    decimal_float_literal: new TokenType(\"decimal_float_literal\", TokenClass.token, /((-?[0-9]*\\.[0-9]+|-?[0-9]+\\.[0-9]*)((e|E)(\\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\\+|-)?[0-9]+f?)|([0-9]+f)/),\n    hex_float_literal: new TokenType(\"hex_float_literal\", TokenClass.token, /-?0x((([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.[0-9a-fA-F]*)((p|P)(\\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\\+|-)?[0-9]+f?))/),\n    int_literal: new TokenType(\"int_literal\", TokenClass.token, /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),\n    uint_literal: new TokenType(\"uint_literal\", TokenClass.token, /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),\n    ident: new TokenType(\"ident\", TokenClass.token, /[_a-zA-Z][0-9a-zA-Z_]*/),\n    and: new TokenType(\"and\", TokenClass.token, \"&\"),\n    and_and: new TokenType(\"and_and\", TokenClass.token, \"&&\"),\n    arrow: new TokenType(\"arrow \", TokenClass.token, \"->\"),\n    attr: new TokenType(\"attr\", TokenClass.token, \"@\"),\n    attr_left: new TokenType(\"attr_left\", TokenClass.token, \"[[\"),\n    attr_right: new TokenType(\"attr_right\", TokenClass.token, \"]]\"),\n    forward_slash: new TokenType(\"forward_slash\", TokenClass.token, \"/\"),\n    bang: new TokenType(\"bang\", TokenClass.token, \"!\"),\n    bracket_left: new TokenType(\"bracket_left\", TokenClass.token, \"[\"),\n    bracket_right: new TokenType(\"bracket_right\", TokenClass.token, \"]\"),\n    brace_left: new TokenType(\"brace_left\", TokenClass.token, \"{\"),\n    brace_right: new TokenType(\"brace_right\", TokenClass.token, \"}\"),\n    colon: new TokenType(\"colon\", TokenClass.token, \":\"),\n    comma: new TokenType(\"comma\", TokenClass.token, \",\"),\n    equal: new TokenType(\"equal\", TokenClass.token, \"=\"),\n    equal_equal: new TokenType(\"equal_equal\", TokenClass.token, \"==\"),\n    not_equal: new TokenType(\"not_equal\", TokenClass.token, \"!=\"),\n    greater_than: new TokenType(\"greater_than\", TokenClass.token, \">\"),\n    greater_than_equal: new TokenType(\"greater_than_equal\", TokenClass.token, \">=\"),\n    shift_right: new TokenType(\"shift_right\", TokenClass.token, \">>\"),\n    less_than: new TokenType(\"less_than\", TokenClass.token, \"<\"),\n    less_than_equal: new TokenType(\"less_than_equal\", TokenClass.token, \"<=\"),\n    shift_left: new TokenType(\"shift_left\", TokenClass.token, \"<<\"),\n    modulo: new TokenType(\"modulo\", TokenClass.token, \"%\"),\n    minus: new TokenType(\"minus\", TokenClass.token, \"-\"),\n    minus_minus: new TokenType(\"minus_minus\", TokenClass.token, \"--\"),\n    period: new TokenType(\"period\", TokenClass.token, \".\"),\n    plus: new TokenType(\"plus\", TokenClass.token, \"+\"),\n    plus_plus: new TokenType(\"plus_plus\", TokenClass.token, \"++\"),\n    or: new TokenType(\"or\", TokenClass.token, \"|\"),\n    or_or: new TokenType(\"or_or\", TokenClass.token, \"||\"),\n    paren_left: new TokenType(\"paren_left\", TokenClass.token, \"(\"),\n    paren_right: new TokenType(\"paren_right\", TokenClass.token, \")\"),\n    semicolon: new TokenType(\"semicolon\", TokenClass.token, \";\"),\n    star: new TokenType(\"star\", TokenClass.token, \"*\"),\n    tilde: new TokenType(\"tilde\", TokenClass.token, \"~\"),\n    underscore: new TokenType(\"underscore\", TokenClass.token, \"_\"),\n    xor: new TokenType(\"xor\", TokenClass.token, \"^\"),\n    plus_equal: new TokenType(\"plus_equal\", TokenClass.token, \"+=\"),\n    minus_equal: new TokenType(\"minus_equal\", TokenClass.token, \"-=\"),\n    times_equal: new TokenType(\"times_equal\", TokenClass.token, \"*=\"),\n    division_equal: new TokenType(\"division_equal\", TokenClass.token, \"/=\"),\n    modulo_equal: new TokenType(\"modulo_equal\", TokenClass.token, \"%=\"),\n    and_equal: new TokenType(\"and_equal\", TokenClass.token, \"&=\"),\n    or_equal: new TokenType(\"or_equal\", TokenClass.token, \"|=\"),\n    xor_equal: new TokenType(\"xor_equal\", TokenClass.token, \"^=\"),\n    shift_right_equal: new TokenType(\"shift_right_equal\", TokenClass.token, \">>=\"),\n    shift_left_equal: new TokenType(\"shift_left_equal\", TokenClass.token, \"<<=\"),\n};\nTokenTypes.simpleTokens = {\n    \"@\": _a.tokens.attr,\n    \"{\": _a.tokens.brace_left,\n    \"}\": _a.tokens.brace_right,\n    \":\": _a.tokens.colon,\n    \",\": _a.tokens.comma,\n    \"(\": _a.tokens.paren_left,\n    \")\": _a.tokens.paren_right,\n    \";\": _a.tokens.semicolon,\n};\nTokenTypes.literalTokens = {\n    \"&\": _a.tokens.and,\n    \"&&\": _a.tokens.and_and,\n    \"->\": _a.tokens.arrow,\n    \"[[\": _a.tokens.attr_left,\n    \"]]\": _a.tokens.attr_right,\n    \"/\": _a.tokens.forward_slash,\n    \"!\": _a.tokens.bang,\n    \"[\": _a.tokens.bracket_left,\n    \"]\": _a.tokens.bracket_right,\n    \"=\": _a.tokens.equal,\n    \"==\": _a.tokens.equal_equal,\n    \"!=\": _a.tokens.not_equal,\n    \">\": _a.tokens.greater_than,\n    \">=\": _a.tokens.greater_than_equal,\n    \">>\": _a.tokens.shift_right,\n    \"<\": _a.tokens.less_than,\n    \"<=\": _a.tokens.less_than_equal,\n    \"<<\": _a.tokens.shift_left,\n    \"%\": _a.tokens.modulo,\n    \"-\": _a.tokens.minus,\n    \"--\": _a.tokens.minus_minus,\n    \".\": _a.tokens.period,\n    \"+\": _a.tokens.plus,\n    \"++\": _a.tokens.plus_plus,\n    \"|\": _a.tokens.or,\n    \"||\": _a.tokens.or_or,\n    \"*\": _a.tokens.star,\n    \"~\": _a.tokens.tilde,\n    \"_\": _a.tokens.underscore,\n    \"^\": _a.tokens.xor,\n    \"+=\": _a.tokens.plus_equal,\n    \"-=\": _a.tokens.minus_equal,\n    \"*=\": _a.tokens.times_equal,\n    \"/=\": _a.tokens.division_equal,\n    \"%=\": _a.tokens.modulo_equal,\n    \"&=\": _a.tokens.and_equal,\n    \"|=\": _a.tokens.or_equal,\n    \"^=\": _a.tokens.xor_equal,\n    \">>=\": _a.tokens.shift_right_equal,\n    \"<<=\": _a.tokens.shift_left_equal,\n};\nTokenTypes.regexTokens = {\n    decimal_float_literal: _a.tokens.decimal_float_literal,\n    hex_float_literal: _a.tokens.hex_float_literal,\n    int_literal: _a.tokens.int_literal,\n    uint_literal: _a.tokens.uint_literal,\n    ident: _a.tokens.ident,\n};\nTokenTypes.storage_class = [\n    _a.keywords.function,\n    _a.keywords.private,\n    _a.keywords.workgroup,\n    _a.keywords.uniform,\n    _a.keywords.storage,\n];\nTokenTypes.access_mode = [\n    _a.keywords.read,\n    _a.keywords.write,\n    _a.keywords.read_write,\n];\nTokenTypes.sampler_type = [\n    _a.keywords.sampler,\n    _a.keywords.sampler_comparison,\n];\nTokenTypes.sampled_texture_type = [\n    _a.keywords.texture_1d,\n    _a.keywords.texture_2d,\n    _a.keywords.texture_2d_array,\n    _a.keywords.texture_3d,\n    _a.keywords.texture_cube,\n    _a.keywords.texture_cube_array,\n];\nTokenTypes.multisampled_texture_type = [\n    _a.keywords.texture_multisampled_2d,\n];\nTokenTypes.storage_texture_type = [\n    _a.keywords.texture_storage_1d,\n    _a.keywords.texture_storage_2d,\n    _a.keywords.texture_storage_2d_array,\n    _a.keywords.texture_storage_3d,\n];\nTokenTypes.depth_texture_type = [\n    _a.keywords.texture_depth_2d,\n    _a.keywords.texture_depth_2d_array,\n    _a.keywords.texture_depth_cube,\n    _a.keywords.texture_depth_cube_array,\n    _a.keywords.texture_depth_multisampled_2d,\n];\nTokenTypes.texture_external_type = [_a.keywords.texture_external];\nTokenTypes.any_texture_type = [\n    ..._a.sampled_texture_type,\n    ..._a.multisampled_texture_type,\n    ..._a.storage_texture_type,\n    ..._a.depth_texture_type,\n    ..._a.texture_external_type,\n];\nTokenTypes.texel_format = [\n    _a.keywords.r8unorm,\n    _a.keywords.r8snorm,\n    _a.keywords.r8uint,\n    _a.keywords.r8sint,\n    _a.keywords.r16uint,\n    _a.keywords.r16sint,\n    _a.keywords.r16float,\n    _a.keywords.rg8unorm,\n    _a.keywords.rg8snorm,\n    _a.keywords.rg8uint,\n    _a.keywords.rg8sint,\n    _a.keywords.r32uint,\n    _a.keywords.r32sint,\n    _a.keywords.r32float,\n    _a.keywords.rg16uint,\n    _a.keywords.rg16sint,\n    _a.keywords.rg16float,\n    _a.keywords.rgba8unorm,\n    _a.keywords.rgba8unorm_srgb,\n    _a.keywords.rgba8snorm,\n    _a.keywords.rgba8uint,\n    _a.keywords.rgba8sint,\n    _a.keywords.bgra8unorm,\n    _a.keywords.bgra8unorm_srgb,\n    _a.keywords.rgb10a2unorm,\n    _a.keywords.rg11b10float,\n    _a.keywords.rg32uint,\n    _a.keywords.rg32sint,\n    _a.keywords.rg32float,\n    _a.keywords.rgba16uint,\n    _a.keywords.rgba16sint,\n    _a.keywords.rgba16float,\n    _a.keywords.rgba32uint,\n    _a.keywords.rgba32sint,\n    _a.keywords.rgba32float,\n];\nTokenTypes.const_literal = [\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.decimal_float_literal,\n    _a.tokens.hex_float_literal,\n    _a.keywords.true,\n    _a.keywords.false,\n];\nTokenTypes.literal_or_ident = [\n    _a.tokens.ident,\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.decimal_float_literal,\n    _a.tokens.hex_float_literal,\n];\nTokenTypes.element_count_expression = [\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.ident,\n];\nTokenTypes.template_types = [\n    _a.keywords.vec2,\n    _a.keywords.vec3,\n    _a.keywords.vec4,\n    _a.keywords.mat2x2,\n    _a.keywords.mat2x3,\n    _a.keywords.mat2x4,\n    _a.keywords.mat3x2,\n    _a.keywords.mat3x3,\n    _a.keywords.mat3x4,\n    _a.keywords.mat4x2,\n    _a.keywords.mat4x3,\n    _a.keywords.mat4x4,\n    _a.keywords.atomic,\n    _a.keywords.bitcast,\n    ..._a.any_texture_type,\n];\n// The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.\n// The attribute grammar should be ident | block.\nTokenTypes.attribute_name = [_a.tokens.ident, _a.keywords.block, _a.keywords.diagnostic];\nTokenTypes.assignment_operators = [\n    _a.tokens.equal,\n    _a.tokens.plus_equal,\n    _a.tokens.minus_equal,\n    _a.tokens.times_equal,\n    _a.tokens.division_equal,\n    _a.tokens.modulo_equal,\n    _a.tokens.and_equal,\n    _a.tokens.or_equal,\n    _a.tokens.xor_equal,\n    _a.tokens.shift_right_equal,\n    _a.tokens.shift_left_equal,\n];\nTokenTypes.increment_operators = [\n    _a.tokens.plus_plus,\n    _a.tokens.minus_minus,\n];\n/// A token parsed by the WgslScanner.\nclass Token {\n    constructor(type, lexeme, line) {\n        this.type = type;\n        this.lexeme = lexeme;\n        this.line = line;\n    }\n    toString() {\n        return this.lexeme;\n    }\n    isTemplateType() {\n        return TokenTypes.template_types.indexOf(this.type) != -1;\n    }\n    isArrayType() {\n        return this.type == TokenTypes.keywords.array;\n    }\n    isArrayOrTemplateType() {\n        return this.isArrayType() || this.isTemplateType();\n    }\n}\n/// Lexical scanner for the WGSL language. This takes an input source text and generates a list\n/// of Token objects, which can then be fed into the WgslParser to generate an AST.\nclass WgslScanner {\n    constructor(source) {\n        this._tokens = [];\n        this._start = 0;\n        this._current = 0;\n        this._line = 1;\n        this._source = source !== null && source !== void 0 ? source : \"\";\n    }\n    /// Scan all tokens from the source.\n    scanTokens() {\n        while (!this._isAtEnd()) {\n            this._start = this._current;\n            if (!this.scanToken()) {\n                throw `Invalid syntax at line ${this._line}`;\n            }\n        }\n        this._tokens.push(new Token(TokenTypes.eof, \"\", this._line));\n        return this._tokens;\n    }\n    /// Scan a single token from the source.\n    scanToken() {\n        // Find the longest consecutive set of characters that match a rule.\n        let lexeme = this._advance();\n        // Skip line-feed, adding to the line counter.\n        if (lexeme == \"\\n\") {\n            this._line++;\n            return true;\n        }\n        // Skip whitespace\n        if (this._isWhitespace(lexeme)) {\n            return true;\n        }\n        if (lexeme == \"/\") {\n            // If it's a // comment, skip everything until the next line-feed.\n            if (this._peekAhead() == \"/\") {\n                while (lexeme != \"\\n\") {\n                    if (this._isAtEnd()) {\n                        return true;\n                    }\n                    lexeme = this._advance();\n                }\n                // skip the linefeed\n                this._line++;\n                return true;\n            }\n            else if (this._peekAhead() == \"*\") {\n                // If it's a / * block comment, skip everything until the matching * /,\n                // allowing for nested block comments.\n                this._advance();\n                let commentLevel = 1;\n                while (commentLevel > 0) {\n                    if (this._isAtEnd()) {\n                        return true;\n                    }\n                    lexeme = this._advance();\n                    if (lexeme == \"\\n\") {\n                        this._line++;\n                    }\n                    else if (lexeme == \"*\") {\n                        if (this._peekAhead() == \"/\") {\n                            this._advance();\n                            commentLevel--;\n                            if (commentLevel == 0) {\n                                return true;\n                            }\n                        }\n                    }\n                    else if (lexeme == \"/\") {\n                        if (this._peekAhead() == \"*\") {\n                            this._advance();\n                            commentLevel++;\n                        }\n                    }\n                }\n                return true;\n            }\n        }\n        // Shortcut single character tokens\n        const simpleToken = TokenTypes.simpleTokens[lexeme];\n        if (simpleToken) {\n            this._addToken(simpleToken);\n            return true;\n        }\n        // Shortcut keywords and identifiers\n        let matchType = TokenTypes.none;\n        const isAlpha = this._isAlpha(lexeme);\n        const isUnderscore = lexeme === \"_\";\n        if (this._isAlphaNumeric(lexeme)) {\n            let nextChar = this._peekAhead();\n            while (this._isAlphaNumeric(nextChar)) {\n                lexeme += this._advance();\n                nextChar = this._peekAhead();\n            }\n        }\n        if (isAlpha) {\n            const matchedType = TokenTypes.keywords[lexeme];\n            if (matchedType) {\n                this._addToken(matchedType);\n                return true;\n            }\n        }\n        if (isAlpha || isUnderscore) {\n            this._addToken(TokenTypes.tokens.ident);\n            return true;\n        }\n        // Scan for the next valid token type\n        for (;;) {\n            let matchedType = this._findType(lexeme);\n            // An exception to \"longest lexeme\" rule is '>>'. In the case of 1>>2, it's a\n            // shift_right.\n            // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,\n            // and one to close the array).\n            // Another ambiguity is '>='. In the case of vec2<i32>=vec2(1,2),\n            // it's a greather_than and an equal, not a greater_than_equal.\n            // WGSL requires context sensitive parsing to resolve these ambiguities. Both of these cases\n            // are predicated on it the > either closing a template, or being part of an operator.\n            // The solution here is to check if there was a less_than up to some number of tokens\n            // previously, and the token prior to that is a keyword that requires a '<', then it will be\n            // split into two operators; otherwise it's a single operator.\n            const nextLexeme = this._peekAhead();\n            if (lexeme == \">\" && (nextLexeme == \">\" || nextLexeme == \"=\")) {\n                let foundLessThan = false;\n                let ti = this._tokens.length - 1;\n                for (let count = 0; count < 5 && ti >= 0; ++count, --ti) {\n                    if (this._tokens[ti].type === TokenTypes.tokens.less_than) {\n                        if (ti > 0 && this._tokens[ti - 1].isArrayOrTemplateType()) {\n                            foundLessThan = true;\n                        }\n                        break;\n                    }\n                }\n                // If there was a less_than in the recent token history, then this is probably a\n                // greater_than.\n                if (foundLessThan) {\n                    this._addToken(matchedType);\n                    return true;\n                }\n            }\n            // The current lexeme may not match any rule, but some token types may be invalid for\n            // part of the string but valid after a few more characters.\n            // For example, 0x.5 is a hex_float_literal. But as it's being scanned,\n            // \"0\" is a int_literal, then \"0x\" is invalid. If we stopped there, it would return\n            // the int_literal \"0\", but that's incorrect. So if we look forward a few characters,\n            // we'd get \"0x.\", which is still invalid, followed by \"0x.5\" which is the correct\n            // hex_float_literal. So that means if we hit an non-matching string, we should look\n            // ahead up to two characters to see if the string starts matching a valid rule again.\n            if (matchedType === TokenTypes.none) {\n                let lookAheadLexeme = lexeme;\n                let lookAhead = 0;\n                const maxLookAhead = 2;\n                for (let li = 0; li < maxLookAhead; ++li) {\n                    lookAheadLexeme += this._peekAhead(li);\n                    matchedType = this._findType(lookAheadLexeme);\n                    if (matchedType !== TokenTypes.none) {\n                        lookAhead = li;\n                        break;\n                    }\n                }\n                if (matchedType === TokenTypes.none) {\n                    if (matchType === TokenTypes.none) {\n                        return false;\n                    }\n                    this._current--;\n                    this._addToken(matchType);\n                    return true;\n                }\n                lexeme = lookAheadLexeme;\n                this._current += lookAhead + 1;\n            }\n            matchType = matchedType;\n            if (this._isAtEnd()) {\n                break;\n            }\n            lexeme += this._advance();\n        }\n        // We got to the end of the input stream. Then the token we've ready so far is it.\n        if (matchType === TokenTypes.none) {\n            return false;\n        }\n        this._addToken(matchType);\n        return true;\n    }\n    _findType(lexeme) {\n        for (const name in TokenTypes.regexTokens) {\n            const type = TokenTypes.regexTokens[name];\n            if (this._match(lexeme, type.rule)) {\n                return type;\n            }\n        }\n        const type = TokenTypes.literalTokens[lexeme];\n        if (type) {\n            return type;\n        }\n        return TokenTypes.none;\n    }\n    _match(lexeme, rule) {\n        const match = rule.exec(lexeme);\n        return match && match.index == 0 && match[0] == lexeme;\n    }\n    _isAtEnd() {\n        return this._current >= this._source.length;\n    }\n    _isAlpha(c) {\n        return (c >= \"a\" && c <= \"z\") || (c >= \"A\" && c <= \"Z\");\n    }\n    _isAlphaNumeric(c) {\n        return (c >= \"a\" && c <= \"z\") || (c >= \"A\" && c <= \"Z\") || c == \"_\" || (c >= \"0\" && c <= \"9\");\n    }\n    _isWhitespace(c) {\n        return c == \" \" || c == \"\\t\" || c == \"\\r\";\n    }\n    _advance(amount = 0) {\n        let c = this._source[this._current];\n        amount = amount || 0;\n        amount++;\n        this._current += amount;\n        return c;\n    }\n    _peekAhead(offset = 0) {\n        offset = offset || 0;\n        if (this._current + offset >= this._source.length) {\n            return \"\\0\";\n        }\n        return this._source[this._current + offset];\n    }\n    _addToken(type) {\n        const text = this._source.substring(this._start, this._current);\n        this._tokens.push(new Token(type, text, this._line));\n    }\n}\n\n/**\n * @author Brendan Duncan / https://github.com/brendan-duncan\n */\n/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).\nclass WgslParser {\n    constructor() {\n        this._tokens = [];\n        this._current = 0;\n        this._currentLine = 0;\n        this._context = new ParseContext();\n        this._deferArrayCountEval = [];\n    }\n    parse(tokensOrCode) {\n        this._initialize(tokensOrCode);\n        this._deferArrayCountEval.length = 0;\n        const statements = [];\n        while (!this._isAtEnd()) {\n            const statement = this._global_decl_or_directive();\n            if (!statement) {\n                break;\n            }\n            statements.push(statement);\n        }\n        // Since constants can be declared after they are used, and\n        // constants can be used to size arrays, defer calculating the\n        // size until after the shader has finished parsing.\n        if (this._deferArrayCountEval.length > 0) {\n            for (const arrayDecl of this._deferArrayCountEval) {\n                const arrayType = arrayDecl[\"arrayType\"];\n                const countNode = arrayDecl[\"countNode\"];\n                if (countNode instanceof VariableExpr) {\n                    const variable = countNode;\n                    const name = variable.name;\n                    const constant = this._context.constants.get(name);\n                    if (constant) {\n                        try {\n                            const count = constant.evaluate(this._context);\n                            arrayType.count = count;\n                        }\n                        catch (e) {\n                        }\n                    }\n                }\n            }\n            this._deferArrayCountEval.length = 0;\n        }\n        return statements;\n    }\n    _initialize(tokensOrCode) {\n        if (tokensOrCode) {\n            if (typeof tokensOrCode == \"string\") {\n                const scanner = new WgslScanner(tokensOrCode);\n                this._tokens = scanner.scanTokens();\n            }\n            else {\n                this._tokens = tokensOrCode;\n            }\n        }\n        else {\n            this._tokens = [];\n        }\n        this._current = 0;\n    }\n    _error(token, message) {\n        return {\n            token,\n            message,\n            toString: function () {\n                return `${message}`;\n            },\n        };\n    }\n    _isAtEnd() {\n        return (this._current >= this._tokens.length ||\n            this._peek().type == TokenTypes.eof);\n    }\n    _match(types) {\n        if (types instanceof TokenType) {\n            if (this._check(types)) {\n                this._advance();\n                return true;\n            }\n            return false;\n        }\n        for (let i = 0, l = types.length; i < l; ++i) {\n            const type = types[i];\n            if (this._check(type)) {\n                this._advance();\n                return true;\n            }\n        }\n        return false;\n    }\n    _consume(types, message) {\n        if (this._check(types)) {\n            return this._advance();\n        }\n        throw this._error(this._peek(), message);\n    }\n    _check(types) {\n        if (this._isAtEnd()) {\n            return false;\n        }\n        const tk = this._peek();\n        if (types instanceof Array) {\n            const t = tk.type;\n            const index = types.indexOf(t);\n            return index != -1;\n        }\n        return tk.type == types;\n    }\n    _advance() {\n        var _a, _b;\n        this._currentLine = (_b = (_a = this._peek()) === null || _a === void 0 ? void 0 : _a.line) !== null && _b !== void 0 ? _b : -1;\n        if (!this._isAtEnd()) {\n            this._current++;\n        }\n        return this._previous();\n    }\n    _peek() {\n        return this._tokens[this._current];\n    }\n    _previous() {\n        return this._tokens[this._current - 1];\n    }\n    _global_decl_or_directive() {\n        // semicolon\n        // global_variable_decl semicolon\n        // global_constant_decl semicolon\n        // type_alias semicolon\n        // struct_decl\n        // function_decl\n        // enable_directive\n        // Ignore any stand-alone semicolons\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\n            ;\n        if (this._match(TokenTypes.keywords.alias)) {\n            const type = this._type_alias();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return type;\n        }\n        if (this._match(TokenTypes.keywords.diagnostic)) {\n            const directive = this._diagnostic();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return directive;\n        }\n        if (this._match(TokenTypes.keywords.requires)) {\n            const requires = this._requires_directive();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return requires;\n        }\n        if (this._match(TokenTypes.keywords.enable)) {\n            const enable = this._enable_directive();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return enable;\n        }\n        // The following statements have an optional attribute*\n        const attrs = this._attribute();\n        if (this._check(TokenTypes.keywords.var)) {\n            const _var = this._global_variable_decl();\n            if (_var != null) {\n                _var.attributes = attrs;\n            }\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _var;\n        }\n        if (this._check(TokenTypes.keywords.override)) {\n            const _override = this._override_variable_decl();\n            if (_override != null) {\n                _override.attributes = attrs;\n            }\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _override;\n        }\n        if (this._check(TokenTypes.keywords.let)) {\n            const _let = this._global_let_decl();\n            if (_let != null) {\n                _let.attributes = attrs;\n            }\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _let;\n        }\n        if (this._check(TokenTypes.keywords.const)) {\n            const _const = this._global_const_decl();\n            if (_const != null) {\n                _const.attributes = attrs;\n            }\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _const;\n        }\n        if (this._check(TokenTypes.keywords.struct)) {\n            const _struct = this._struct_decl();\n            if (_struct != null) {\n                _struct.attributes = attrs;\n            }\n            return _struct;\n        }\n        if (this._check(TokenTypes.keywords.fn)) {\n            const _fn = this._function_decl();\n            if (_fn != null) {\n                _fn.attributes = attrs;\n            }\n            return _fn;\n        }\n        return null;\n    }\n    _function_decl() {\n        // attribute* function_header compound_statement\n        // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?\n        if (!this._match(TokenTypes.keywords.fn)) {\n            return null;\n        }\n        const startLine = this._currentLine;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\").toString();\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '(' for function arguments.\");\n        const args = [];\n        if (!this._check(TokenTypes.tokens.paren_right)) {\n            do {\n                if (this._check(TokenTypes.tokens.paren_right)) {\n                    break;\n                }\n                const argAttrs = this._attribute();\n                const name = this._consume(TokenTypes.tokens.ident, \"Expected argument name.\").toString();\n                this._consume(TokenTypes.tokens.colon, \"Expected ':' for argument type.\");\n                const typeAttrs = this._attribute();\n                const type = this._type_decl();\n                if (type != null) {\n                    type.attributes = typeAttrs;\n                    args.push(new Argument(name, type, argAttrs));\n                }\n            } while (this._match(TokenTypes.tokens.comma));\n        }\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' after function arguments.\");\n        let _return = null;\n        if (this._match(TokenTypes.tokens.arrow)) {\n            const attrs = this._attribute();\n            _return = this._type_decl();\n            if (_return != null) {\n                _return.attributes = attrs;\n            }\n        }\n        const body = this._compound_statement();\n        const endLine = this._currentLine;\n        return new Function(name, args, _return, body, startLine, endLine);\n    }\n    _compound_statement() {\n        // brace_left statement* brace_right\n        const statements = [];\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for block.\");\n        while (!this._check(TokenTypes.tokens.brace_right)) {\n            const statement = this._statement();\n            if (statement !== null) {\n                statements.push(statement);\n            }\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for block.\");\n        return statements;\n    }\n    _statement() {\n        // semicolon\n        // return_statement semicolon\n        // if_statement\n        // switch_statement\n        // loop_statement\n        // for_statement\n        // func_call_statement semicolon\n        // variable_statement semicolon\n        // break_statement semicolon\n        // continue_statement semicolon\n        // continuing_statement compound_statement\n        // discard semicolon\n        // assignment_statement semicolon\n        // compound_statement\n        // increment_statement semicolon\n        // decrement_statement semicolon\n        // static_assert_statement semicolon\n        // Ignore any stand-alone semicolons\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\n            ;\n        if (this._check(TokenTypes.tokens.attr)) {\n            this._attribute();\n        }\n        if (this._check(TokenTypes.keywords.if)) {\n            return this._if_statement();\n        }\n        if (this._check(TokenTypes.keywords.switch)) {\n            return this._switch_statement();\n        }\n        if (this._check(TokenTypes.keywords.loop)) {\n            return this._loop_statement();\n        }\n        if (this._check(TokenTypes.keywords.for)) {\n            return this._for_statement();\n        }\n        if (this._check(TokenTypes.keywords.while)) {\n            return this._while_statement();\n        }\n        if (this._check(TokenTypes.keywords.continuing)) {\n            return this._continuing_statement();\n        }\n        if (this._check(TokenTypes.keywords.static_assert)) {\n            return this._static_assert_statement();\n        }\n        if (this._check(TokenTypes.tokens.brace_left)) {\n            return this._compound_statement();\n        }\n        let result = null;\n        if (this._check(TokenTypes.keywords.return)) {\n            result = this._return_statement();\n        }\n        else if (this._check([\n            TokenTypes.keywords.var,\n            TokenTypes.keywords.let,\n            TokenTypes.keywords.const,\n        ])) {\n            result = this._variable_statement();\n        }\n        else if (this._match(TokenTypes.keywords.discard)) {\n            result = new Discard();\n        }\n        else if (this._match(TokenTypes.keywords.break)) {\n            result = new Break();\n        }\n        else if (this._match(TokenTypes.keywords.continue)) {\n            result = new Continue();\n        }\n        else {\n            result =\n                this._increment_decrement_statement() ||\n                    this._func_call_statement() ||\n                    this._assignment_statement();\n        }\n        if (result != null) {\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';' after statement.\");\n        }\n        return result;\n    }\n    _static_assert_statement() {\n        if (!this._match(TokenTypes.keywords.static_assert)) {\n            return null;\n        }\n        const expression = this._optional_paren_expression();\n        return new StaticAssert(expression);\n    }\n    _while_statement() {\n        if (!this._match(TokenTypes.keywords.while)) {\n            return null;\n        }\n        const condition = this._optional_paren_expression();\n        if (this._check(TokenTypes.tokens.attr)) {\n            this._attribute();\n        }\n        const block = this._compound_statement();\n        return new While(condition, block);\n    }\n    _continuing_statement() {\n        if (!this._match(TokenTypes.keywords.continuing)) {\n            return null;\n        }\n        const block = this._compound_statement();\n        return new Continuing(block);\n    }\n    _for_statement() {\n        // for paren_left for_header paren_right compound_statement\n        if (!this._match(TokenTypes.keywords.for)) {\n            return null;\n        }\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?\n        const init = !this._check(TokenTypes.tokens.semicolon)\n            ? this._for_init()\n            : null;\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n        const condition = !this._check(TokenTypes.tokens.semicolon)\n            ? this._short_circuit_or_expression()\n            : null;\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n        const increment = !this._check(TokenTypes.tokens.paren_right)\n            ? this._for_increment()\n            : null;\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        if (this._check(TokenTypes.tokens.attr)) {\n            this._attribute();\n        }\n        const body = this._compound_statement();\n        return new For(init, condition, increment, body);\n    }\n    _for_init() {\n        // (variable_statement assignment_statement func_call_statement)?\n        return (this._variable_statement() ||\n            this._func_call_statement() ||\n            this._assignment_statement());\n    }\n    _for_increment() {\n        // (assignment_statement func_call_statement increment_statement)?\n        return (this._func_call_statement() ||\n            this._increment_decrement_statement() ||\n            this._assignment_statement());\n    }\n    _variable_statement() {\n        // variable_decl\n        // variable_decl equal short_circuit_or_expression\n        // let (ident variable_ident_decl) equal short_circuit_or_expression\n        // const (ident variable_ident_decl) equal short_circuit_or_expression\n        if (this._check(TokenTypes.keywords.var)) {\n            const _var = this._variable_decl();\n            if (_var === null) {\n                throw this._error(this._peek(), \"Variable declaration expected.\");\n            }\n            let value = null;\n            if (this._match(TokenTypes.tokens.equal)) {\n                value = this._short_circuit_or_expression();\n            }\n            return new Var(_var.name, _var.type, _var.storage, _var.access, value);\n        }\n        if (this._match(TokenTypes.keywords.let)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for let.\").toString();\n            let type = null;\n            if (this._match(TokenTypes.tokens.colon)) {\n                const typeAttrs = this._attribute();\n                type = this._type_decl();\n                if (type != null) {\n                    type.attributes = typeAttrs;\n                }\n            }\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for let.\");\n            const value = this._short_circuit_or_expression();\n            return new Let(name, type, null, null, value);\n        }\n        if (this._match(TokenTypes.keywords.const)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for const.\").toString();\n            let type = null;\n            if (this._match(TokenTypes.tokens.colon)) {\n                const typeAttrs = this._attribute();\n                type = this._type_decl();\n                if (type != null) {\n                    type.attributes = typeAttrs;\n                }\n            }\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for const.\");\n            const value = this._short_circuit_or_expression();\n            return new Const(name, type, null, null, value);\n        }\n        return null;\n    }\n    _increment_decrement_statement() {\n        const savedPos = this._current;\n        const _var = this._unary_expression();\n        if (_var == null) {\n            return null;\n        }\n        if (!this._check(TokenTypes.increment_operators)) {\n            this._current = savedPos;\n            return null;\n        }\n        const token = this._consume(TokenTypes.increment_operators, \"Expected increment operator\");\n        return new Increment(token.type === TokenTypes.tokens.plus_plus\n            ? IncrementOperator.increment\n            : IncrementOperator.decrement, _var);\n    }\n    _assignment_statement() {\n        // (unary_expression underscore) equal short_circuit_or_expression\n        let _var = null;\n        if (this._check(TokenTypes.tokens.brace_right)) {\n            return null;\n        }\n        let isUnderscore = this._match(TokenTypes.tokens.underscore);\n        if (!isUnderscore) {\n            _var = this._unary_expression();\n        }\n        if (!isUnderscore && _var == null) {\n            return null;\n        }\n        const type = this._consume(TokenTypes.assignment_operators, \"Expected assignment operator.\");\n        const value = this._short_circuit_or_expression();\n        return new Assign(AssignOperator.parse(type.lexeme), _var, value);\n    }\n    _func_call_statement() {\n        // ident argument_expression_list\n        if (!this._check(TokenTypes.tokens.ident)) {\n            return null;\n        }\n        const savedPos = this._current;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\");\n        const args = this._argument_expression_list();\n        if (args === null) {\n            this._current = savedPos;\n            return null;\n        }\n        return new Call(name.lexeme, args);\n    }\n    _loop_statement() {\n        // loop brace_left statement* continuing_statement? brace_right\n        if (!this._match(TokenTypes.keywords.loop)) {\n            return null;\n        }\n        if (this._check(TokenTypes.tokens.attr)) {\n            this._attribute();\n        }\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for loop.\");\n        // statement*\n        const statements = [];\n        let statement = this._statement();\n        while (statement !== null) {\n            if (Array.isArray(statement)) {\n                for (let s of statement) {\n                    statements.push(s);\n                }\n            }\n            else {\n                statements.push(statement);\n            }\n            statement = this._statement();\n        }\n        // continuing_statement: continuing compound_statement\n        let continuing = null;\n        if (this._match(TokenTypes.keywords.continuing)) {\n            continuing = this._compound_statement();\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for loop.\");\n        return new Loop(statements, continuing);\n    }\n    _switch_statement() {\n        // switch optional_paren_expression brace_left switch_body+ brace_right\n        if (!this._match(TokenTypes.keywords.switch)) {\n            return null;\n        }\n        const condition = this._optional_paren_expression();\n        if (this._check(TokenTypes.tokens.attr)) {\n            this._attribute();\n        }\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for switch.\");\n        const body = this._switch_body();\n        if (body == null || body.length == 0) {\n            throw this._error(this._previous(), \"Expected 'case' or 'default'.\");\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for switch.\");\n        return new Switch(condition, body);\n    }\n    _switch_body() {\n        // case case_selectors colon brace_left case_body? brace_right\n        // default colon brace_left case_body? brace_right\n        const cases = [];\n        if (this._match(TokenTypes.keywords.case)) {\n            const selector = this._case_selectors();\n            this._match(TokenTypes.tokens.colon); // colon is optional\n            if (this._check(TokenTypes.tokens.attr)) {\n                this._attribute();\n            }\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch case.\");\n            const body = this._case_body();\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch case.\");\n            cases.push(new Case(selector, body));\n        }\n        if (this._match(TokenTypes.keywords.default)) {\n            this._match(TokenTypes.tokens.colon); // colon is optional\n            if (this._check(TokenTypes.tokens.attr)) {\n                this._attribute();\n            }\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch default.\");\n            const body = this._case_body();\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch default.\");\n            cases.push(new Default(body));\n        }\n        if (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {\n            const _cases = this._switch_body();\n            cases.push(_cases[0]);\n        }\n        return cases;\n    }\n    _case_selectors() {\n        // const_literal (comma const_literal)* comma?\n        const selectors = [\n            this._shift_expression(), //?.evaluate(this._context).toString() ?? \"\",\n        ];\n        while (this._match(TokenTypes.tokens.comma)) {\n            selectors.push(this._shift_expression());\n        }\n        return selectors;\n    }\n    _case_body() {\n        // statement case_body?\n        // fallthrough semicolon\n        if (this._match(TokenTypes.keywords.fallthrough)) {\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return [];\n        }\n        let statement = this._statement();\n        if (statement == null) {\n            return [];\n        }\n        if (!(statement instanceof Array)) {\n            statement = [statement];\n        }\n        const nextStatement = this._case_body();\n        if (nextStatement.length == 0) {\n            return statement;\n        }\n        return [...statement, nextStatement[0]];\n    }\n    _if_statement() {\n        // if optional_paren_expression compound_statement elseif_statement? else_statement?\n        if (!this._match(TokenTypes.keywords.if)) {\n            return null;\n        }\n        const condition = this._optional_paren_expression();\n        if (this._check(TokenTypes.tokens.attr)) {\n            this._attribute();\n        }\n        const block = this._compound_statement();\n        let elseif = [];\n        if (this._match_elseif()) {\n            if (this._check(TokenTypes.tokens.attr)) {\n                this._attribute();\n            }\n            elseif = this._elseif_statement(elseif);\n        }\n        let _else = null;\n        if (this._match(TokenTypes.keywords.else)) {\n            if (this._check(TokenTypes.tokens.attr)) {\n                this._attribute();\n            }\n            _else = this._compound_statement();\n        }\n        return new If(condition, block, elseif, _else);\n    }\n    _match_elseif() {\n        if (this._tokens[this._current].type === TokenTypes.keywords.else &&\n            this._tokens[this._current + 1].type === TokenTypes.keywords.if) {\n            this._advance();\n            this._advance();\n            return true;\n        }\n        return false;\n    }\n    _elseif_statement(elseif = []) {\n        // else_if optional_paren_expression compound_statement elseif_statement?\n        const condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        elseif.push(new ElseIf(condition, block));\n        if (this._match_elseif()) {\n            if (this._check(TokenTypes.tokens.attr)) {\n                this._attribute();\n            }\n            this._elseif_statement(elseif);\n        }\n        return elseif;\n    }\n    _return_statement() {\n        // return short_circuit_or_expression?\n        if (!this._match(TokenTypes.keywords.return)) {\n            return null;\n        }\n        const value = this._short_circuit_or_expression();\n        return new Return(value);\n    }\n    _short_circuit_or_expression() {\n        // short_circuit_and_expression\n        // short_circuit_or_expression or_or short_circuit_and_expression\n        let expr = this._short_circuit_and_expr();\n        while (this._match(TokenTypes.tokens.or_or)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._short_circuit_and_expr());\n        }\n        return expr;\n    }\n    _short_circuit_and_expr() {\n        // inclusive_or_expression\n        // short_circuit_and_expression and_and inclusive_or_expression\n        let expr = this._inclusive_or_expression();\n        while (this._match(TokenTypes.tokens.and_and)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._inclusive_or_expression());\n        }\n        return expr;\n    }\n    _inclusive_or_expression() {\n        // exclusive_or_expression\n        // inclusive_or_expression or exclusive_or_expression\n        let expr = this._exclusive_or_expression();\n        while (this._match(TokenTypes.tokens.or)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._exclusive_or_expression());\n        }\n        return expr;\n    }\n    _exclusive_or_expression() {\n        // and_expression\n        // exclusive_or_expression xor and_expression\n        let expr = this._and_expression();\n        while (this._match(TokenTypes.tokens.xor)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._and_expression());\n        }\n        return expr;\n    }\n    _and_expression() {\n        // equality_expression\n        // and_expression and equality_expression\n        let expr = this._equality_expression();\n        while (this._match(TokenTypes.tokens.and)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._equality_expression());\n        }\n        return expr;\n    }\n    _equality_expression() {\n        // relational_expression\n        // relational_expression equal_equal relational_expression\n        // relational_expression not_equal relational_expression\n        const expr = this._relational_expression();\n        if (this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])) {\n            return new BinaryOperator(this._previous().toString(), expr, this._relational_expression());\n        }\n        return expr;\n    }\n    _relational_expression() {\n        // shift_expression\n        // relational_expression less_than shift_expression\n        // relational_expression greater_than shift_expression\n        // relational_expression less_than_equal shift_expression\n        // relational_expression greater_than_equal shift_expression\n        let expr = this._shift_expression();\n        while (this._match([\n            TokenTypes.tokens.less_than,\n            TokenTypes.tokens.greater_than,\n            TokenTypes.tokens.less_than_equal,\n            TokenTypes.tokens.greater_than_equal,\n        ])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._shift_expression());\n        }\n        return expr;\n    }\n    _shift_expression() {\n        // additive_expression\n        // shift_expression shift_left additive_expression\n        // shift_expression shift_right additive_expression\n        let expr = this._additive_expression();\n        while (this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._additive_expression());\n        }\n        return expr;\n    }\n    _additive_expression() {\n        // multiplicative_expression\n        // additive_expression plus multiplicative_expression\n        // additive_expression minus multiplicative_expression\n        let expr = this._multiplicative_expression();\n        while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._multiplicative_expression());\n        }\n        return expr;\n    }\n    _multiplicative_expression() {\n        // unary_expression\n        // multiplicative_expression star unary_expression\n        // multiplicative_expression forward_slash unary_expression\n        // multiplicative_expression modulo unary_expression\n        let expr = this._unary_expression();\n        while (this._match([\n            TokenTypes.tokens.star,\n            TokenTypes.tokens.forward_slash,\n            TokenTypes.tokens.modulo,\n        ])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._unary_expression());\n        }\n        return expr;\n    }\n    _unary_expression() {\n        // singular_expression\n        // minus unary_expression\n        // bang unary_expression\n        // tilde unary_expression\n        // star unary_expression\n        // and unary_expression\n        if (this._match([\n            TokenTypes.tokens.minus,\n            TokenTypes.tokens.bang,\n            TokenTypes.tokens.tilde,\n            TokenTypes.tokens.star,\n            TokenTypes.tokens.and,\n        ])) {\n            return new UnaryOperator(this._previous().toString(), this._unary_expression());\n        }\n        return this._singular_expression();\n    }\n    _singular_expression() {\n        // primary_expression postfix_expression ?\n        const expr = this._primary_expression();\n        const p = this._postfix_expression();\n        if (p) {\n            expr.postfix = p;\n        }\n        return expr;\n    }\n    _postfix_expression() {\n        // bracket_left short_circuit_or_expression bracket_right postfix_expression?\n        if (this._match(TokenTypes.tokens.bracket_left)) {\n            const expr = this._short_circuit_or_expression();\n            this._consume(TokenTypes.tokens.bracket_right, \"Expected ']'.\");\n            const arrayIndex = new ArrayIndex(expr);\n            const p = this._postfix_expression();\n            if (p) {\n                arrayIndex.postfix = p;\n            }\n            return arrayIndex;\n        }\n        // period ident postfix_expression?\n        if (this._match(TokenTypes.tokens.period)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected member name.\");\n            const p = this._postfix_expression();\n            const expr = new StringExpr(name.lexeme);\n            if (p) {\n                expr.postfix = p;\n            }\n            return expr;\n        }\n        return null;\n    }\n    _getStruct(name) {\n        if (this._context.aliases.has(name)) {\n            const alias = this._context.aliases.get(name).type;\n            return alias;\n        }\n        if (this._context.structs.has(name)) {\n            const struct = this._context.structs.get(name);\n            return struct;\n        }\n        return null;\n    }\n    _primary_expression() {\n        // ident argument_expression_list?\n        if (this._match(TokenTypes.tokens.ident)) {\n            const name = this._previous().toString();\n            if (this._check(TokenTypes.tokens.paren_left)) {\n                const args = this._argument_expression_list();\n                const struct = this._getStruct(name);\n                if (struct != null) {\n                    return new CreateExpr(struct, args);\n                }\n                return new CallExpr(name, args);\n            }\n            if (this._context.constants.has(name)) {\n                const c = this._context.constants.get(name);\n                return new ConstExpr(name, c.value);\n            }\n            return new VariableExpr(name);\n        }\n        // const_literal\n        if (this._match(TokenTypes.const_literal)) {\n            return new LiteralExpr(parseFloat(this._previous().toString()));\n        }\n        // paren_expression\n        if (this._check(TokenTypes.tokens.paren_left)) {\n            return this._paren_expression();\n        }\n        // bitcast less_than type_decl greater_than paren_expression\n        if (this._match(TokenTypes.keywords.bitcast)) {\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<'.\");\n            const type = this._type_decl();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\n            const value = this._paren_expression();\n            return new BitcastExpr(type, value);\n        }\n        // type_decl argument_expression_list\n        const type = this._type_decl();\n        const args = this._argument_expression_list();\n        return new TypecastExpr(type, args);\n    }\n    _argument_expression_list() {\n        // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right\n        if (!this._match(TokenTypes.tokens.paren_left)) {\n            return null;\n        }\n        const args = [];\n        do {\n            if (this._check(TokenTypes.tokens.paren_right)) {\n                break;\n            }\n            const arg = this._short_circuit_or_expression();\n            args.push(arg);\n        } while (this._match(TokenTypes.tokens.comma));\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' for agument list\");\n        return args;\n    }\n    _optional_paren_expression() {\n        // [paren_left] short_circuit_or_expression [paren_right]\n        this._match(TokenTypes.tokens.paren_left);\n        const expr = this._short_circuit_or_expression();\n        this._match(TokenTypes.tokens.paren_right);\n        return new GroupingExpr([expr]);\n    }\n    _paren_expression() {\n        // paren_left short_circuit_or_expression paren_right\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        const expr = this._short_circuit_or_expression();\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        return new GroupingExpr([expr]);\n    }\n    _struct_decl() {\n        // attribute* struct ident struct_body_decl\n        if (!this._match(TokenTypes.keywords.struct)) {\n            return null;\n        }\n        const startLine = this._currentLine;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected name for struct.\").toString();\n        // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for struct body.\");\n        const members = [];\n        while (!this._check(TokenTypes.tokens.brace_right)) {\n            // struct_member: attribute* variable_ident_decl\n            const memberAttrs = this._attribute();\n            const memberName = this._consume(TokenTypes.tokens.ident, \"Expected variable name.\").toString();\n            this._consume(TokenTypes.tokens.colon, \"Expected ':' for struct member type.\");\n            const typeAttrs = this._attribute();\n            const memberType = this._type_decl();\n            if (memberType != null) {\n                memberType.attributes = typeAttrs;\n            }\n            if (!this._check(TokenTypes.tokens.brace_right))\n                this._consume(TokenTypes.tokens.comma, \"Expected ',' for struct member.\");\n            else\n                this._match(TokenTypes.tokens.comma); // trailing comma optional.\n            members.push(new Member(memberName, memberType, memberAttrs));\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' after struct body.\");\n        const endLine = this._currentLine;\n        const structNode = new Struct(name, members, startLine, endLine);\n        this._context.structs.set(name, structNode);\n        return structNode;\n    }\n    _global_variable_decl() {\n        // attribute* variable_decl (equal const_expression)?\n        const _var = this._variable_decl();\n        if (_var && this._match(TokenTypes.tokens.equal)) {\n            _var.value = this._const_expression();\n        }\n        return _var;\n    }\n    _override_variable_decl() {\n        // attribute* override_decl (equal const_expression)?\n        const _override = this._override_decl();\n        if (_override && this._match(TokenTypes.tokens.equal)) {\n            _override.value = this._const_expression();\n        }\n        return _override;\n    }\n    _global_const_decl() {\n        // attribute* const (ident variable_ident_decl) global_const_initializer?\n        if (!this._match(TokenTypes.keywords.const)) {\n            return null;\n        }\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null) {\n                type.attributes = attrs;\n            }\n        }\n        let value = null;\n        if (this._match(TokenTypes.tokens.equal)) {\n            const valueExpr = this._short_circuit_or_expression();\n            if (valueExpr instanceof CreateExpr) {\n                value = valueExpr;\n            }\n            else if (valueExpr instanceof ConstExpr &&\n                valueExpr.initializer instanceof CreateExpr) {\n                value = valueExpr.initializer;\n            }\n            else {\n                try {\n                    const constValue = valueExpr.evaluate(this._context);\n                    value = new LiteralExpr(constValue);\n                }\n                catch (_a) {\n                    value = valueExpr;\n                }\n            }\n        }\n        const c = new Const(name.toString(), type, \"\", \"\", value);\n        this._context.constants.set(c.name, c);\n        return c;\n    }\n    _global_let_decl() {\n        // attribute* let (ident variable_ident_decl) global_const_initializer?\n        if (!this._match(TokenTypes.keywords.let)) {\n            return null;\n        }\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null) {\n                type.attributes = attrs;\n            }\n        }\n        let value = null;\n        if (this._match(TokenTypes.tokens.equal)) {\n            value = this._const_expression();\n        }\n        return new Let(name.toString(), type, \"\", \"\", value);\n    }\n    _const_expression() {\n        // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right\n        // const_literal\n        if (this._match(TokenTypes.const_literal)) {\n            return new StringExpr(this._previous().toString());\n        }\n        const type = this._type_decl();\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        let args = [];\n        while (!this._check(TokenTypes.tokens.paren_right)) {\n            args.push(this._const_expression());\n            if (!this._check(TokenTypes.tokens.comma)) {\n                break;\n            }\n            this._advance();\n        }\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        return new CreateExpr(type, args);\n    }\n    _variable_decl() {\n        // var variable_qualifier? (ident variable_ident_decl)\n        if (!this._match(TokenTypes.keywords.var)) {\n            return null;\n        }\n        // variable_qualifier: less_than storage_class (comma access_mode)? greater_than\n        let storage = \"\";\n        let access = \"\";\n        if (this._match(TokenTypes.tokens.less_than)) {\n            storage = this._consume(TokenTypes.storage_class, \"Expected storage_class.\").toString();\n            if (this._match(TokenTypes.tokens.comma))\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode.\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\n        }\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null) {\n                type.attributes = attrs;\n            }\n        }\n        return new Var(name.toString(), type, storage, access, null);\n    }\n    _override_decl() {\n        // override (ident variable_ident_decl)\n        if (!this._match(TokenTypes.keywords.override)) {\n            return null;\n        }\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null) {\n                type.attributes = attrs;\n            }\n        }\n        return new Override(name.toString(), type, null);\n    }\n    _diagnostic() {\n        // diagnostic(severity_control_name, diagnostic_rule_name)\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('\");\n        const severity = this._consume(TokenTypes.tokens.ident, \"Expected severity control name.\");\n        this._consume(TokenTypes.tokens.comma, \"Expected ','\");\n        const rule = this._consume(TokenTypes.tokens.ident, \"Expected diagnostic rule name.\");\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\n        return new Diagnostic(severity.toString(), rule.toString());\n    }\n    _enable_directive() {\n        // enable ident semicolon\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\n        return new Enable(name.toString());\n    }\n    _requires_directive() {\n        // requires extension [, extension]* semicolon\n        const extensions = [this._consume(TokenTypes.tokens.ident, \"identity expected.\").toString()];\n        while (this._match(TokenTypes.tokens.comma)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\n            extensions.push(name.toString());\n        }\n        return new Requires(extensions);\n    }\n    _type_alias() {\n        // type ident equal type_decl\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\n        this._consume(TokenTypes.tokens.equal, \"Expected '=' for type alias.\");\n        let aliasType = this._type_decl();\n        if (aliasType === null) {\n            throw this._error(this._peek(), \"Expected Type for Alias.\");\n        }\n        if (this._context.aliases.has(aliasType.name)) {\n            aliasType = this._context.aliases.get(aliasType.name).type;\n        }\n        const aliasNode = new Alias(name.toString(), aliasType);\n        this._context.aliases.set(aliasNode.name, aliasNode);\n        return aliasNode;\n    }\n    _type_decl() {\n        // ident\n        // bool\n        // float32\n        // int32\n        // uint32\n        // vec2 less_than type_decl greater_than\n        // vec3 less_than type_decl greater_than\n        // vec4 less_than type_decl greater_than\n        // mat2x2 less_than type_decl greater_than\n        // mat2x3 less_than type_decl greater_than\n        // mat2x4 less_than type_decl greater_than\n        // mat3x2 less_than type_decl greater_than\n        // mat3x3 less_than type_decl greater_than\n        // mat3x4 less_than type_decl greater_than\n        // mat4x2 less_than type_decl greater_than\n        // mat4x3 less_than type_decl greater_than\n        // mat4x4 less_than type_decl greater_than\n        // atomic less_than type_decl greater_than\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\n        // array_type_decl\n        // texture_sampler_types\n        if (this._check([\n            TokenTypes.tokens.ident,\n            ...TokenTypes.texel_format,\n            TokenTypes.keywords.bool,\n            TokenTypes.keywords.f32,\n            TokenTypes.keywords.i32,\n            TokenTypes.keywords.u32,\n        ])) {\n            const type = this._advance();\n            const typeName = type.toString();\n            if (this._context.structs.has(typeName)) {\n                return this._context.structs.get(typeName);\n            }\n            if (this._context.aliases.has(typeName)) {\n                return this._context.aliases.get(typeName).type;\n            }\n            return new Type(type.toString());\n        }\n        // texture_sampler_types\n        let type = this._texture_sampler_types();\n        if (type) {\n            return type;\n        }\n        if (this._check(TokenTypes.template_types)) {\n            let type = this._advance().toString();\n            let format = null;\n            let access = null;\n            if (this._match(TokenTypes.tokens.less_than)) {\n                format = this._type_decl();\n                access = null;\n                if (this._match(TokenTypes.tokens.comma)) {\n                    access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\n                }\n                this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for type.\");\n            }\n            return new TemplateType(type, format, access);\n        }\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\n        if (this._match(TokenTypes.keywords.ptr)) {\n            let pointer = this._previous().toString();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for pointer.\");\n            const storage = this._consume(TokenTypes.storage_class, \"Expected storage_class for pointer\");\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' for pointer.\");\n            const decl = this._type_decl();\n            let access = null;\n            if (this._match(TokenTypes.tokens.comma)) {\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\n            }\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for pointer.\");\n            return new PointerType(pointer, storage.toString(), decl, access);\n        }\n        // The following type_decl's have an optional attribyte_list*\n        const attrs = this._attribute();\n        // attribute* array\n        // attribute* array less_than type_decl (comma element_count_expression)? greater_than\n        if (this._match(TokenTypes.keywords.array)) {\n            let format = null;\n            let countInt = -1;\n            const array = this._previous();\n            let countNode = null;\n            if (this._match(TokenTypes.tokens.less_than)) {\n                format = this._type_decl();\n                if (this._context.aliases.has(format.name)) {\n                    format = this._context.aliases.get(format.name).type;\n                }\n                let count = \"\";\n                if (this._match(TokenTypes.tokens.comma)) {\n                    countNode = this._shift_expression();\n                    // If we can't evaluate the node, defer evaluating it until after the shader has\n                    // finished being parsed, because const statements can be declared **after** they\n                    // are used.\n                    try {\n                        count = countNode.evaluate(this._context).toString();\n                        countNode = null;\n                    }\n                    catch (e) {\n                        count = \"1\";\n                    }\n                }\n                this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for array.\");\n                countInt = count ? parseInt(count) : 0;\n            }\n            const arrayType = new ArrayType(array.toString(), attrs, format, countInt);\n            if (countNode) {\n                this._deferArrayCountEval.push({ arrayType, countNode });\n            }\n            return arrayType;\n        }\n        return null;\n    }\n    _texture_sampler_types() {\n        // sampler_type\n        if (this._match(TokenTypes.sampler_type)) {\n            return new SamplerType(this._previous().toString(), null, null);\n        }\n        // depth_texture_type\n        if (this._match(TokenTypes.depth_texture_type)) {\n            return new SamplerType(this._previous().toString(), null, null);\n        }\n        // sampled_texture_type less_than type_decl greater_than\n        // multisampled_texture_type less_than type_decl greater_than\n        if (this._match(TokenTypes.sampled_texture_type) ||\n            this._match(TokenTypes.multisampled_texture_type)) {\n            const sampler = this._previous();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\n            const format = this._type_decl();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\n            return new SamplerType(sampler.toString(), format, null);\n        }\n        // storage_texture_type less_than texel_format comma access_mode greater_than\n        if (this._match(TokenTypes.storage_texture_type)) {\n            const sampler = this._previous();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\n            const format = this._consume(TokenTypes.texel_format, \"Invalid texel format.\").toString();\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' after texel format.\");\n            const access = this._consume(TokenTypes.access_mode, \"Expected access mode for storage texture type.\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\n            return new SamplerType(sampler.toString(), format, access);\n        }\n        return null;\n    }\n    _attribute() {\n        // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right\n        // attr ident\n        let attributes = [];\n        while (this._match(TokenTypes.tokens.attr)) {\n            const name = this._consume(TokenTypes.attribute_name, \"Expected attribute name\");\n            const attr = new Attribute(name.toString(), null);\n            if (this._match(TokenTypes.tokens.paren_left)) {\n                // literal_or_ident\n                attr.value = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                if (this._check(TokenTypes.tokens.comma)) {\n                    this._advance();\n                    do {\n                        const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                        if (!(attr.value instanceof Array)) {\n                            attr.value = [attr.value];\n                        }\n                        attr.value.push(v);\n                    } while (this._match(TokenTypes.tokens.comma));\n                }\n                this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\n            }\n            attributes.push(attr);\n        }\n        // Deprecated:\n        // attr_left (attribute comma)* attribute attr_right\n        while (this._match(TokenTypes.tokens.attr_left)) {\n            if (!this._check(TokenTypes.tokens.attr_right)) {\n                do {\n                    const name = this._consume(TokenTypes.attribute_name, \"Expected attribute name\");\n                    const attr = new Attribute(name.toString(), null);\n                    if (this._match(TokenTypes.tokens.paren_left)) {\n                        // literal_or_ident\n                        attr.value = [\n                            this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString(),\n                        ];\n                        if (this._check(TokenTypes.tokens.comma)) {\n                            this._advance();\n                            do {\n                                const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                                attr.value.push(v);\n                            } while (this._match(TokenTypes.tokens.comma));\n                        }\n                        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\n                    }\n                    attributes.push(attr);\n                } while (this._match(TokenTypes.tokens.comma));\n            }\n            // Consume ]]\n            this._consume(TokenTypes.tokens.attr_right, \"Expected ']]' after attribute declarations\");\n        }\n        if (attributes.length == 0) {\n            return null;\n        }\n        return attributes;\n    }\n}\n\n/**\n * @author Brendan Duncan / https://github.com/brendan-duncan\n */\nclass TypeInfo {\n    constructor(name, attributes) {\n        this.name = name;\n        this.attributes = attributes;\n        this.size = 0;\n    }\n    get isArray() {\n        return false;\n    }\n    get isStruct() {\n        return false;\n    }\n    get isTemplate() {\n        return false;\n    }\n}\nclass MemberInfo {\n    constructor(name, type, attributes) {\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n        this.offset = 0;\n        this.size = 0;\n    }\n    get isArray() {\n        return this.type.isArray;\n    }\n    get isStruct() {\n        return this.type.isStruct;\n    }\n    get isTemplate() {\n        return this.type.isTemplate;\n    }\n    get align() {\n        return this.type.isStruct ? this.type.align : 0;\n    }\n    get members() {\n        return this.type.isStruct ? this.type.members : null;\n    }\n    get format() {\n        return this.type.isArray\n            ? this.type.format\n            : this.type.isTemplate\n                ? this.type.format\n                : null;\n    }\n    get count() {\n        return this.type.isArray ? this.type.count : 0;\n    }\n    get stride() {\n        return this.type.isArray ? this.type.stride : this.size;\n    }\n}\nclass StructInfo extends TypeInfo {\n    constructor(name, attributes) {\n        super(name, attributes);\n        this.members = [];\n        this.align = 0;\n        this.startLine = -1;\n        this.endLine = -1;\n        this.inUse = false;\n    }\n    get isStruct() {\n        return true;\n    }\n}\nclass ArrayInfo extends TypeInfo {\n    constructor(name, attributes) {\n        super(name, attributes);\n        this.count = 0;\n        this.stride = 0;\n    }\n    get isArray() {\n        return true;\n    }\n}\nclass TemplateInfo extends TypeInfo {\n    constructor(name, format, attributes, access) {\n        super(name, attributes);\n        this.format = format;\n        this.access = access;\n    }\n    get isTemplate() {\n        return true;\n    }\n}\nvar ResourceType;\n(function (ResourceType) {\n    ResourceType[ResourceType[\"Uniform\"] = 0] = \"Uniform\";\n    ResourceType[ResourceType[\"Storage\"] = 1] = \"Storage\";\n    ResourceType[ResourceType[\"Texture\"] = 2] = \"Texture\";\n    ResourceType[ResourceType[\"Sampler\"] = 3] = \"Sampler\";\n    ResourceType[ResourceType[\"StorageTexture\"] = 4] = \"StorageTexture\";\n})(ResourceType || (ResourceType = {}));\nclass VariableInfo {\n    constructor(name, type, group, binding, attributes, resourceType, access) {\n        this.name = name;\n        this.type = type;\n        this.group = group;\n        this.binding = binding;\n        this.attributes = attributes;\n        this.resourceType = resourceType;\n        this.access = access;\n    }\n    get isArray() {\n        return this.type.isArray;\n    }\n    get isStruct() {\n        return this.type.isStruct;\n    }\n    get isTemplate() {\n        return this.type.isTemplate;\n    }\n    get size() {\n        return this.type.size;\n    }\n    get align() {\n        return this.type.isStruct ? this.type.align : 0;\n    }\n    get members() {\n        return this.type.isStruct ? this.type.members : null;\n    }\n    get format() {\n        return this.type.isArray\n            ? this.type.format\n            : this.type.isTemplate\n                ? this.type.format\n                : null;\n    }\n    get count() {\n        return this.type.isArray ? this.type.count : 0;\n    }\n    get stride() {\n        return this.type.isArray ? this.type.stride : this.size;\n    }\n}\nclass AliasInfo {\n    constructor(name, type) {\n        this.name = name;\n        this.type = type;\n    }\n}\nclass _TypeSize {\n    constructor(align, size) {\n        this.align = align;\n        this.size = size;\n    }\n}\nclass InputInfo {\n    constructor(name, type, locationType, location) {\n        this.name = name;\n        this.type = type;\n        this.locationType = locationType;\n        this.location = location;\n        this.interpolation = null;\n    }\n}\nclass OutputInfo {\n    constructor(name, type, locationType, location) {\n        this.name = name;\n        this.type = type;\n        this.locationType = locationType;\n        this.location = location;\n    }\n}\nclass FunctionInfo {\n    constructor(name, stage = null) {\n        this.stage = null;\n        this.inputs = [];\n        this.outputs = [];\n        this.resources = [];\n        this.startLine = -1;\n        this.endLine = -1;\n        this.inUse = false;\n        this.calls = new Set();\n        this.name = name;\n        this.stage = stage;\n    }\n}\nclass EntryFunctions {\n    constructor() {\n        this.vertex = [];\n        this.fragment = [];\n        this.compute = [];\n    }\n}\nclass OverrideInfo {\n    constructor(name, type, attributes, id) {\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n        this.id = id;\n    }\n}\nclass _FunctionResources {\n    constructor(node) {\n        this.resources = null;\n        this.inUse = false;\n        this.info = null;\n        this.node = node;\n    }\n}\nclass WgslReflect {\n    constructor(code) {\n        /// All top-level uniform vars in the shader.\n        this.uniforms = [];\n        /// All top-level storage vars in the shader.\n        this.storage = [];\n        /// All top-level texture vars in the shader;\n        this.textures = [];\n        // All top-level sampler vars in the shader.\n        this.samplers = [];\n        /// All top-level type aliases in the shader.\n        this.aliases = [];\n        /// All top-level overrides in the shader.\n        this.overrides = [];\n        /// All top-level structs in the shader.\n        this.structs = [];\n        /// All entry functions in the shader: vertex, fragment, and/or compute.\n        this.entry = new EntryFunctions();\n        /// All functions in the shader, including entry functions.\n        this.functions = [];\n        this._types = new Map();\n        this._functions = new Map();\n        if (code) {\n            this.update(code);\n        }\n    }\n    _isStorageTexture(type) {\n        return (type.name == \"texture_storage_1d\" ||\n            type.name == \"texture_storage_2d\" ||\n            type.name == \"texture_storage_2d_array\" ||\n            type.name == \"texture_storage_3d\");\n    }\n    update(code) {\n        const parser = new WgslParser();\n        const ast = parser.parse(code);\n        for (const node of ast) {\n            if (node instanceof Function) {\n                this._functions.set(node.name, new _FunctionResources(node));\n            }\n        }\n        for (const node of ast) {\n            if (node instanceof Struct) {\n                const info = this._getTypeInfo(node, null);\n                if (info instanceof StructInfo) {\n                    this.structs.push(info);\n                }\n            }\n        }\n        for (const node of ast) {\n            if (node instanceof Alias) {\n                this.aliases.push(this._getAliasInfo(node));\n                continue;\n            }\n            if (node instanceof Override) {\n                const v = node;\n                const id = this._getAttributeNum(v.attributes, \"id\", 0);\n                const type = v.type != null ? this._getTypeInfo(v.type, v.attributes) : null;\n                this.overrides.push(new OverrideInfo(v.name, type, v.attributes, id));\n                continue;\n            }\n            if (this._isUniformVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Uniform, v.access);\n                this.uniforms.push(varInfo);\n                continue;\n            }\n            if (this._isStorageVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const isStorageTexture = this._isStorageTexture(type);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Storage, v.access);\n                this.storage.push(varInfo);\n                continue;\n            }\n            if (this._isTextureVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const isStorageTexture = this._isStorageTexture(type);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Texture, v.access);\n                if (isStorageTexture) {\n                    this.storage.push(varInfo);\n                }\n                else {\n                    this.textures.push(varInfo);\n                }\n                continue;\n            }\n            if (this._isSamplerVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Sampler, v.access);\n                this.samplers.push(varInfo);\n                continue;\n            }\n            if (node instanceof Function) {\n                const vertexStage = this._getAttribute(node, \"vertex\");\n                const fragmentStage = this._getAttribute(node, \"fragment\");\n                const computeStage = this._getAttribute(node, \"compute\");\n                const stage = vertexStage || fragmentStage || computeStage;\n                const fn = new FunctionInfo(node.name, stage === null || stage === void 0 ? void 0 : stage.name);\n                fn.startLine = node.startLine;\n                fn.endLine = node.endLine;\n                this.functions.push(fn);\n                this._functions.get(node.name).info = fn;\n                if (stage) {\n                    this._functions.get(node.name).inUse = true;\n                    fn.inUse = true;\n                    fn.resources = this._findResources(node, !!stage);\n                    fn.inputs = this._getInputs(node.args);\n                    fn.outputs = this._getOutputs(node.returnType);\n                    this.entry[stage.name].push(fn);\n                }\n                continue;\n            }\n        }\n        for (const fn of this._functions.values()) {\n            if (fn.info) {\n                fn.info.inUse = fn.inUse;\n                this._addCalls(fn.node, fn.info.calls);\n            }\n        }\n        for (const u of this.uniforms) {\n            this._markStructsInUse(u.type);\n        }\n        for (const s of this.storage) {\n            this._markStructsInUse(s.type);\n        }\n    }\n    _markStructsInUse(type) {\n        if (type.isStruct) {\n            type.inUse = true;\n            for (const m of type.members) {\n                this._markStructsInUse(m.type);\n            }\n        }\n        else if (type.isArray) {\n            this._markStructsInUse(type.format);\n        }\n        else if (type.isTemplate) {\n            this._markStructsInUse(type.format);\n        }\n        else {\n            const alias = this._getAlias(type.name);\n            if (alias) {\n                this._markStructsInUse(alias);\n            }\n        }\n    }\n    _addCalls(fn, calls) {\n        var _a;\n        for (const call of fn.calls) {\n            const info = (_a = this._functions.get(call.name)) === null || _a === void 0 ? void 0 : _a.info;\n            if (info) {\n                calls.add(info);\n            }\n        }\n    }\n    /// Find a resource by its group and binding.\n    findResource(group, binding) {\n        for (const u of this.uniforms) {\n            if (u.group == group && u.binding == binding) {\n                return u;\n            }\n        }\n        for (const s of this.storage) {\n            if (s.group == group && s.binding == binding) {\n                return s;\n            }\n        }\n        for (const t of this.textures) {\n            if (t.group == group && t.binding == binding) {\n                return t;\n            }\n        }\n        for (const s of this.samplers) {\n            if (s.group == group && s.binding == binding) {\n                return s;\n            }\n        }\n        return null;\n    }\n    _findResource(name) {\n        for (const u of this.uniforms) {\n            if (u.name == name) {\n                return u;\n            }\n        }\n        for (const s of this.storage) {\n            if (s.name == name) {\n                return s;\n            }\n        }\n        for (const t of this.textures) {\n            if (t.name == name) {\n                return t;\n            }\n        }\n        for (const s of this.samplers) {\n            if (s.name == name) {\n                return s;\n            }\n        }\n        return null;\n    }\n    _markStructsFromAST(type) {\n        const info = this._getTypeInfo(type, null);\n        this._markStructsInUse(info);\n    }\n    _findResources(fn, isEntry) {\n        const resources = [];\n        const self = this;\n        const varStack = [];\n        fn.search((node) => {\n            if (node instanceof _BlockStart) {\n                varStack.push({});\n            }\n            else if (node instanceof _BlockEnd) {\n                varStack.pop();\n            }\n            else if (node instanceof Var) {\n                const v = node;\n                if (isEntry && v.type !== null) {\n                    this._markStructsFromAST(v.type);\n                }\n                if (varStack.length > 0) {\n                    varStack[varStack.length - 1][v.name] = v;\n                }\n            }\n            else if (node instanceof CreateExpr) {\n                const c = node;\n                if (isEntry && c.type !== null) {\n                    this._markStructsFromAST(c.type);\n                }\n            }\n            else if (node instanceof Let) {\n                const v = node;\n                if (isEntry && v.type !== null) {\n                    this._markStructsFromAST(v.type);\n                }\n                if (varStack.length > 0) {\n                    varStack[varStack.length - 1][v.name] = v;\n                }\n            }\n            else if (node instanceof VariableExpr) {\n                const v = node;\n                // Check to see if the variable is a local variable before checking to see if it's\n                // a resource.\n                if (varStack.length > 0) {\n                    const varInfo = varStack[varStack.length - 1][v.name];\n                    if (varInfo) {\n                        return;\n                    }\n                }\n                const varInfo = self._findResource(v.name);\n                if (varInfo) {\n                    resources.push(varInfo);\n                }\n            }\n            else if (node instanceof CallExpr) {\n                const c = node;\n                const callFn = self._functions.get(c.name);\n                if (callFn) {\n                    if (isEntry) {\n                        callFn.inUse = true;\n                    }\n                    fn.calls.add(callFn.node);\n                    if (callFn.resources === null) {\n                        callFn.resources = self._findResources(callFn.node, isEntry);\n                    }\n                    resources.push(...callFn.resources);\n                }\n            }\n            else if (node instanceof Call) {\n                const c = node;\n                const callFn = self._functions.get(c.name);\n                if (callFn) {\n                    if (isEntry) {\n                        callFn.inUse = true;\n                    }\n                    fn.calls.add(callFn.node);\n                    if (callFn.resources === null) {\n                        callFn.resources = self._findResources(callFn.node, isEntry);\n                    }\n                    resources.push(...callFn.resources);\n                }\n            }\n        });\n        return [...new Map(resources.map(r => [r.name, r])).values()];\n    }\n    getBindGroups() {\n        const groups = [];\n        function _makeRoom(group, binding) {\n            if (group >= groups.length) {\n                groups.length = group + 1;\n            }\n            if (groups[group] === undefined) {\n                groups[group] = [];\n            }\n            if (binding >= groups[group].length) {\n                groups[group].length = binding + 1;\n            }\n        }\n        for (const u of this.uniforms) {\n            _makeRoom(u.group, u.binding);\n            const group = groups[u.group];\n            group[u.binding] = u;\n        }\n        for (const u of this.storage) {\n            _makeRoom(u.group, u.binding);\n            const group = groups[u.group];\n            group[u.binding] = u;\n        }\n        for (const t of this.textures) {\n            _makeRoom(t.group, t.binding);\n            const group = groups[t.group];\n            group[t.binding] = t;\n        }\n        for (const t of this.samplers) {\n            _makeRoom(t.group, t.binding);\n            const group = groups[t.group];\n            group[t.binding] = t;\n        }\n        return groups;\n    }\n    _getOutputs(type, outputs = undefined) {\n        if (outputs === undefined) {\n            outputs = [];\n        }\n        if (type instanceof Struct) {\n            this._getStructOutputs(type, outputs);\n        }\n        else {\n            const output = this._getOutputInfo(type);\n            if (output !== null) {\n                outputs.push(output);\n            }\n        }\n        return outputs;\n    }\n    _getStructOutputs(struct, outputs) {\n        for (const m of struct.members) {\n            if (m.type instanceof Struct) {\n                this._getStructOutputs(m.type, outputs);\n            }\n            else {\n                const location = this._getAttribute(m, \"location\") || this._getAttribute(m, \"builtin\");\n                if (location !== null) {\n                    const typeInfo = this._getTypeInfo(m.type, m.type.attributes);\n                    const locationValue = this._parseInt(location.value);\n                    const info = new OutputInfo(m.name, typeInfo, location.name, locationValue);\n                    outputs.push(info);\n                }\n            }\n        }\n    }\n    _getOutputInfo(type) {\n        const location = this._getAttribute(type, \"location\") ||\n            this._getAttribute(type, \"builtin\");\n        if (location !== null) {\n            const typeInfo = this._getTypeInfo(type, type.attributes);\n            const locationValue = this._parseInt(location.value);\n            const info = new OutputInfo(\"\", typeInfo, location.name, locationValue);\n            return info;\n        }\n        return null;\n    }\n    _getInputs(args, inputs = undefined) {\n        if (inputs === undefined) {\n            inputs = [];\n        }\n        for (const arg of args) {\n            if (arg.type instanceof Struct) {\n                this._getStructInputs(arg.type, inputs);\n            }\n            else {\n                const input = this._getInputInfo(arg);\n                if (input !== null) {\n                    inputs.push(input);\n                }\n            }\n        }\n        return inputs;\n    }\n    _getStructInputs(struct, inputs) {\n        for (const m of struct.members) {\n            if (m.type instanceof Struct) {\n                this._getStructInputs(m.type, inputs);\n            }\n            else {\n                const input = this._getInputInfo(m);\n                if (input !== null) {\n                    inputs.push(input);\n                }\n            }\n        }\n    }\n    _getInputInfo(node) {\n        const location = this._getAttribute(node, \"location\") ||\n            this._getAttribute(node, \"builtin\");\n        if (location !== null) {\n            const interpolation = this._getAttribute(node, \"interpolation\");\n            const type = this._getTypeInfo(node.type, node.attributes);\n            const locationValue = this._parseInt(location.value);\n            const info = new InputInfo(node.name, type, location.name, locationValue);\n            if (interpolation !== null) {\n                info.interpolation = this._parseString(interpolation.value);\n            }\n            return info;\n        }\n        return null;\n    }\n    _parseString(s) {\n        if (s instanceof Array) {\n            s = s[0];\n        }\n        return s;\n    }\n    _parseInt(s) {\n        if (s instanceof Array) {\n            s = s[0];\n        }\n        const n = parseInt(s);\n        return isNaN(n) ? s : n;\n    }\n    _getAlias(name) {\n        for (const a of this.aliases) {\n            if (a.name == name) {\n                return a.type;\n            }\n        }\n        return null;\n    }\n    _getAliasInfo(node) {\n        return new AliasInfo(node.name, this._getTypeInfo(node.type, null));\n    }\n    _getTypeInfo(type, attributes) {\n        if (this._types.has(type)) {\n            return this._types.get(type);\n        }\n        if (type instanceof ArrayType) {\n            const a = type;\n            const t = this._getTypeInfo(a.format, a.attributes);\n            const info = new ArrayInfo(a.name, attributes);\n            info.format = t;\n            info.count = a.count;\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        if (type instanceof Struct) {\n            const s = type;\n            const info = new StructInfo(s.name, attributes);\n            info.startLine = s.startLine;\n            info.endLine = s.endLine;\n            for (const m of s.members) {\n                const t = this._getTypeInfo(m.type, m.attributes);\n                info.members.push(new MemberInfo(m.name, t, m.attributes));\n            }\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        if (type instanceof SamplerType) {\n            const s = type;\n            const formatIsType = s.format instanceof Type;\n            const format = s.format\n                ? formatIsType\n                    ? this._getTypeInfo(s.format, null)\n                    : new TypeInfo(s.format, null)\n                : null;\n            const info = new TemplateInfo(s.name, format, attributes, s.access);\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        if (type instanceof TemplateType) {\n            const t = type;\n            const format = t.format ? this._getTypeInfo(t.format, null) : null;\n            const info = new TemplateInfo(t.name, format, attributes, t.access);\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        const info = new TypeInfo(type.name, attributes);\n        this._types.set(type, info);\n        this._updateTypeInfo(info);\n        return info;\n    }\n    _updateTypeInfo(type) {\n        var _a, _b;\n        const typeSize = this._getTypeSize(type);\n        type.size = (_a = typeSize === null || typeSize === void 0 ? void 0 : typeSize.size) !== null && _a !== void 0 ? _a : 0;\n        if (type instanceof ArrayInfo) {\n            const formatInfo = this._getTypeSize(type[\"format\"]);\n            type.stride = (_b = formatInfo === null || formatInfo === void 0 ? void 0 : formatInfo.size) !== null && _b !== void 0 ? _b : 0;\n            this._updateTypeInfo(type[\"format\"]);\n        }\n        if (type instanceof StructInfo) {\n            this._updateStructInfo(type);\n        }\n    }\n    _updateStructInfo(struct) {\n        var _a;\n        let offset = 0;\n        let lastSize = 0;\n        let lastOffset = 0;\n        let structAlign = 0;\n        for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {\n            const member = struct.members[mi];\n            const sizeInfo = this._getTypeSize(member);\n            if (!sizeInfo) {\n                continue;\n            }\n            (_a = this._getAlias(member.type.name)) !== null && _a !== void 0 ? _a : member.type;\n            const align = sizeInfo.align;\n            const size = sizeInfo.size;\n            offset = this._roundUp(align, offset + lastSize);\n            lastSize = size;\n            lastOffset = offset;\n            structAlign = Math.max(structAlign, align);\n            member.offset = offset;\n            member.size = size;\n            this._updateTypeInfo(member.type);\n        }\n        struct.size = this._roundUp(structAlign, lastOffset + lastSize);\n        struct.align = structAlign;\n    }\n    _getTypeSize(type) {\n        var _a;\n        if (type === null || type === undefined) {\n            return null;\n        }\n        const explicitSize = this._getAttributeNum(type.attributes, \"size\", 0);\n        const explicitAlign = this._getAttributeNum(type.attributes, \"align\", 0);\n        if (type instanceof MemberInfo) {\n            type = type.type;\n        }\n        if (type instanceof TypeInfo) {\n            const alias = this._getAlias(type.name);\n            if (alias !== null) {\n                type = alias;\n            }\n        }\n        {\n            const info = WgslReflect._typeInfo[type.name];\n            if (info !== undefined) {\n                const divisor = type[\"format\"] === \"f16\" ? 2 : 1;\n                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\n            }\n        }\n        {\n            const info = WgslReflect._typeInfo[type.name.substring(0, type.name.length - 1)];\n            if (info) {\n                const divisor = type.name[type.name.length - 1] === \"h\" ? 2 : 1;\n                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\n            }\n        }\n        if (type instanceof ArrayInfo) {\n            let arrayType = type;\n            let align = 8;\n            let size = 8;\n            // Type                 AlignOf(T)          Sizeof(T)\n            // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))\n            // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)\n            //\n            // @stride(Q)\n            // array<E, N>          AlignOf(E)          N * Q\n            //\n            // @stride(Q)\n            // array<E>             AlignOf(E)          Nruntime * Q\n            //const E = type.format.name;\n            const E = this._getTypeSize(arrayType.format);\n            if (E !== null) {\n                size = E.size;\n                align = E.align;\n            }\n            const N = arrayType.count;\n            const stride = this._getAttributeNum((_a = type === null || type === void 0 ? void 0 : type.attributes) !== null && _a !== void 0 ? _a : null, \"stride\", this._roundUp(align, size));\n            size = N * stride;\n            if (explicitSize) {\n                size = explicitSize;\n            }\n            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));\n        }\n        if (type instanceof StructInfo) {\n            let align = 0;\n            let size = 0;\n            // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))\n            //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))\n            //                          Where L is the last member of the structure\n            let offset = 0;\n            let lastSize = 0;\n            let lastOffset = 0;\n            for (const m of type.members) {\n                const mi = this._getTypeSize(m.type);\n                if (mi !== null) {\n                    align = Math.max(mi.align, align);\n                    offset = this._roundUp(mi.align, offset + lastSize);\n                    lastSize = mi.size;\n                    lastOffset = offset;\n                }\n            }\n            size = this._roundUp(align, lastOffset + lastSize);\n            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));\n        }\n        return null;\n    }\n    _isUniformVar(node) {\n        return node instanceof Var && node.storage == \"uniform\";\n    }\n    _isStorageVar(node) {\n        return node instanceof Var && node.storage == \"storage\";\n    }\n    _isTextureVar(node) {\n        return (node instanceof Var &&\n            node.type !== null &&\n            WgslReflect._textureTypes.indexOf(node.type.name) != -1);\n    }\n    _isSamplerVar(node) {\n        return (node instanceof Var &&\n            node.type !== null &&\n            WgslReflect._samplerTypes.indexOf(node.type.name) != -1);\n    }\n    _getAttribute(node, name) {\n        const obj = node;\n        if (!obj || !obj[\"attributes\"]) {\n            return null;\n        }\n        const attrs = obj[\"attributes\"];\n        for (let a of attrs) {\n            if (a.name == name) {\n                return a;\n            }\n        }\n        return null;\n    }\n    _getAttributeNum(attributes, name, defaultValue) {\n        if (attributes === null) {\n            return defaultValue;\n        }\n        for (let a of attributes) {\n            if (a.name == name) {\n                let v = a !== null && a.value !== null ? a.value : defaultValue;\n                if (v instanceof Array) {\n                    v = v[0];\n                }\n                if (typeof v === \"number\") {\n                    return v;\n                }\n                if (typeof v === \"string\") {\n                    return parseInt(v);\n                }\n                return defaultValue;\n            }\n        }\n        return defaultValue;\n    }\n    _roundUp(k, n) {\n        return Math.ceil(n / k) * k;\n    }\n}\n// Type                 AlignOf(T)          Sizeof(T)\n// i32, u32, or f32     4                   4\n// atomic<T>            4                   4\n// vec2<T>              8                   8\n// vec3<T>              16                  12\n// vec4<T>              16                  16\n// mat2x2<f32>          8                   16\n// mat3x2<f32>          8                   24\n// mat4x2<f32>          8                   32\n// mat2x3<f32>          16                  32\n// mat3x3<f32>          16                  48\n// mat4x3<f32>          16                  64\n// mat2x4<f32>          16                  32\n// mat3x4<f32>          16                  48\n// mat4x4<f32>          16                  64\nWgslReflect._typeInfo = {\n    f16: { align: 2, size: 2 },\n    i32: { align: 4, size: 4 },\n    u32: { align: 4, size: 4 },\n    f32: { align: 4, size: 4 },\n    atomic: { align: 4, size: 4 },\n    vec2: { align: 8, size: 8 },\n    vec3: { align: 16, size: 12 },\n    vec4: { align: 16, size: 16 },\n    mat2x2: { align: 8, size: 16 },\n    mat3x2: { align: 8, size: 24 },\n    mat4x2: { align: 8, size: 32 },\n    mat2x3: { align: 16, size: 32 },\n    mat3x3: { align: 16, size: 48 },\n    mat4x3: { align: 16, size: 64 },\n    mat2x4: { align: 16, size: 32 },\n    mat3x4: { align: 16, size: 48 },\n    mat4x4: { align: 16, size: 64 },\n};\nWgslReflect._textureTypes = TokenTypes.any_texture_type.map((t) => {\n    return t.name;\n});\nWgslReflect._samplerTypes = TokenTypes.sampler_type.map((t) => {\n    return t.name;\n});\n\nfunction getEntryPointForStage(defs, stage, stageFlags) {\n    const { entryPoint: entryPointName } = stage;\n    if (entryPointName) {\n        const ep = defs.entryPoints[entryPointName];\n        return (ep && ep.stage === stageFlags) ? ep : undefined;\n    }\n    return Object.values(defs.entryPoints).filter(ep => ep.stage === stageFlags)[0];\n}\nfunction getStageResources(defs, stage, stageFlags) {\n    if (!stage) {\n        return [];\n    }\n    const entryPoint = getEntryPointForStage(defs, stage, stageFlags);\n    return entryPoint?.resources || [];\n}\nconst byBinding = (a, b) => Math.sign(a.binding - b.binding);\n/**\n * Gets GPUBindGroupLayoutDescriptors for the given pipeline.\n *\n * Important: Assumes you pipeline is valid (it doesn't check for errors).\n *\n * Note: In WebGPU some layouts must be specified manually. For example an unfiltered-float\n *    sampler can not be derived since it is unknown at compile time pipeline creation time\n *    which texture you'll use.\n *\n * MAINTENANCE_TODO: Add example\n *\n * @param defs ShaderDataDefinitions or an array of ShaderDataDefinitions as\n *    returned from @link {makeShaderDataDefinitions}. If an array more than 1\n *    definition it's assumed the vertex shader is in the first and the fragment\n *    shader in the second.\n * @param desc A PipelineDescriptor. You should be able to pass in the same object you passed\n *    to `createRenderPipeline` or `createComputePipeline`.\n * @returns An array of GPUBindGroupLayoutDescriptors which you can pass, one at a time, to\n *    `createBindGroupLayout`. Note: the array will be sparse if there are gaps in group\n *    numbers. Note: Each GPUBindGroupLayoutDescriptor.entries will be sorted by binding.\n */\nfunction makeBindGroupLayoutDescriptors(defs, desc) {\n    defs = Array.isArray(defs) ? defs : [defs];\n    const resources = [\n        ...getStageResources(defs[0], desc.vertex, GPUShaderStage.VERTEX),\n        ...getStageResources(defs[defs.length - 1], desc.fragment, GPUShaderStage.FRAGMENT),\n        ...getStageResources(defs[0], desc.compute, GPUShaderStage.COMPUTE),\n    ];\n    const bindGroupLayoutDescriptorsByGroupByBinding = [];\n    for (const resource of resources) {\n        const bindingsToBindGroupEntry = bindGroupLayoutDescriptorsByGroupByBinding[resource.group] || new Map();\n        bindGroupLayoutDescriptorsByGroupByBinding[resource.group] = bindingsToBindGroupEntry;\n        // Should we error here if the 2 don't match?\n        const entry = bindingsToBindGroupEntry.get(resource.entry.binding);\n        bindingsToBindGroupEntry.set(resource.entry.binding, {\n            ...resource.entry,\n            visibility: resource.entry.visibility | (entry?.visibility || 0),\n        });\n    }\n    const descriptors = bindGroupLayoutDescriptorsByGroupByBinding.map(v => ({ entries: [...v.values()].sort(byBinding) }));\n    for (let i = 0; i < descriptors.length; ++i) {\n        if (!descriptors[i]) {\n            descriptors[i] = { entries: [] };\n        }\n    }\n    return descriptors;\n}\nfunction getNamedVariables(reflect, variables) {\n    return Object.fromEntries(variables.map(v => {\n        const typeDefinition = addVariableType(reflect, v, 0);\n        return [\n            v.name,\n            {\n                typeDefinition,\n                group: v.group,\n                binding: v.binding,\n                size: typeDefinition.size,\n            },\n        ];\n    }));\n}\nfunction makeStructDefinition(reflect, structInfo, offset) {\n    // StructDefinition\n    const fields = Object.fromEntries(structInfo.members.map(m => {\n        return [\n            m.name,\n            {\n                offset: m.offset,\n                type: addType(reflect, m.type, 0),\n            },\n        ];\n    }));\n    return {\n        fields,\n        size: structInfo.size,\n        offset,\n    };\n}\nfunction getTextureSampleType(type) {\n    if (type.name.includes('depth')) {\n        return 'depth';\n    }\n    // unfiltered-float\n    switch (type.format?.name) {\n        case 'f32': return 'float';\n        case 'i32': return 'sint';\n        case 'u32': return 'uint';\n        default:\n            throw new Error('unknown texture sample type');\n    }\n}\nfunction getViewDimension(type) {\n    if (type.name.includes('2d_array')) {\n        return '2d-array';\n    }\n    if (type.name.includes('cube_array')) {\n        return 'cube-array';\n    }\n    if (type.name.includes('3d')) {\n        return '3d';\n    }\n    if (type.name.includes('1d')) {\n        return '1d';\n    }\n    if (type.name.includes('cube')) {\n        return 'cube';\n    }\n    return '2d';\n}\nfunction getStorageTextureAccess(type) {\n    switch (type.access) {\n        case 'read': return 'read-only';\n        case 'write': return 'write-only';\n        case 'read_write': return 'read-write';\n        default:\n            throw new Error('unknonw storage texture access');\n    }\n}\nfunction getSamplerType(type) {\n    // \"non-filtering\" can only be specified manually.\n    return type.name.endsWith('_comparison')\n        ? 'comparison'\n        : 'filtering';\n}\nfunction getBindGroupLayoutEntry(resource, visibility) {\n    const { binding, access, type } = resource;\n    switch (resource.resourceType) {\n        case ResourceType.Uniform:\n            return {\n                binding,\n                visibility,\n                buffer: {},\n            };\n        case ResourceType.Storage:\n            return {\n                binding,\n                visibility,\n                buffer: {\n                    type: (access === '' || access === 'read') ? 'read-only-storage' : 'storage',\n                },\n            };\n        case ResourceType.Texture: {\n            if (type.name === 'texture_external') {\n                return {\n                    binding,\n                    visibility,\n                    externalTexture: {},\n                };\n            }\n            const multisampled = type.name.includes('multisampled');\n            return {\n                binding,\n                visibility,\n                texture: {\n                    sampleType: getTextureSampleType(type),\n                    viewDimension: getViewDimension(type),\n                    multisampled,\n                },\n            };\n        }\n        case ResourceType.Sampler:\n            return {\n                binding,\n                visibility,\n                sampler: {\n                    type: getSamplerType(type),\n                },\n            };\n        case ResourceType.StorageTexture:\n            return {\n                binding,\n                visibility,\n                storageTexture: {\n                    access: getStorageTextureAccess(type),\n                    format: type.format.name,\n                    viewDimension: getViewDimension(type),\n                },\n            };\n        default:\n            throw new Error('unknown resource type');\n    }\n}\nfunction addEntryPoints(funcInfos, stage) {\n    const entryPoints = {};\n    for (const info of funcInfos) {\n        entryPoints[info.name] = {\n            stage,\n            resources: info.resources.map(resource => {\n                const { name, group } = resource;\n                return {\n                    name,\n                    group,\n                    entry: getBindGroupLayoutEntry(resource, stage),\n                };\n            }),\n        };\n    }\n    return entryPoints;\n}\n/**\n * Given a WGSL shader, returns data definitions for structures,\n * uniforms, and storage buffers\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct MyStruct {\n *    color: vec4f,\n *    brightness: f32,\n *    kernel: array<f32, 9>,\n * };\n * @group(0) @binding(0) var<uniform> myUniforms: MyUniforms;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const myUniformValues = makeStructuredView(defs.uniforms.myUniforms);\n *\n * myUniformValues.set({\n *   color: [1, 0, 1, 1],\n *   brightness: 0.8,\n *   kernel: [\n *      1, 0, -1,\n *      2, 0, -2,\n *      1, 0, -1,\n *   ],\n * });\n * device.queue.writeBuffer(uniformBuffer, 0, myUniformValues.arrayBuffer);\n * ```\n *\n * @param code WGSL shader. Note: it is not required for this to be a complete shader\n * @returns definitions of the structures by name. Useful for passing to {@link makeStructuredView}\n */\nfunction makeShaderDataDefinitions(code) {\n    const reflect = new WgslReflect(code);\n    const structs = Object.fromEntries(reflect.structs.map(structInfo => {\n        return [structInfo.name, makeStructDefinition(reflect, structInfo, 0)];\n    }));\n    const uniforms = getNamedVariables(reflect, reflect.uniforms);\n    const storages = getNamedVariables(reflect, reflect.storage.filter(v => v.resourceType === ResourceType.Storage));\n    const storageTextures = getNamedVariables(reflect, reflect.storage.filter(v => v.resourceType === ResourceType.StorageTexture));\n    const textures = getNamedVariables(reflect, reflect.textures.filter(v => v.type.name !== 'texture_external'));\n    const externalTextures = getNamedVariables(reflect, reflect.textures.filter(v => v.type.name === 'texture_external'));\n    const samplers = getNamedVariables(reflect, reflect.samplers);\n    const entryPoints = {\n        ...addEntryPoints(reflect.entry.vertex, GPUShaderStage.VERTEX),\n        ...addEntryPoints(reflect.entry.fragment, GPUShaderStage.FRAGMENT),\n        ...addEntryPoints(reflect.entry.compute, GPUShaderStage.COMPUTE),\n    };\n    return {\n        externalTextures,\n        samplers,\n        structs,\n        storages,\n        storageTextures,\n        textures,\n        uniforms,\n        entryPoints,\n    };\n}\nfunction assert(cond, msg = '') {\n    if (!cond) {\n        throw new Error(msg);\n    }\n}\n/*\n write down what I want for a given type\n\n    struct VSUniforms {\n        foo: u32,\n    };\n    @group(4) @binding(1) var<uniform> uni1: f32;\n    @group(3) @binding(2) var<uniform> uni2: array<f32, 5>;\n    @group(2) @binding(3) var<uniform> uni3: VSUniforms;\n    @group(1) @binding(4) var<uniform> uni4: array<VSUniforms, 6>;\n\n    uni1: {\n        type: 'f32',\n        numElements: undefined\n    },\n    uni2: {\n        type: 'array',\n        elementType: 'f32'\n        numElements: 5,\n    },\n    uni3: {\n        type: 'struct',\n        fields: {\n            foo: {\n                type: 'f32',\n                numElements: undefined\n            }\n        },\n    },\n    uni4: {\n        type: 'array',\n        elementType:\n        fields: {\n            foo: {\n                type: 'f32',\n                numElements: undefined\n            }\n        },\n        fields: {\n            foo: {\n                type: 'f32',\n                numElements: undefined\n            }\n        },\n        ...\n    ]\n\n    */\nfunction addVariableType(reflect, v, offset) {\n    switch (v.resourceType) {\n        case ResourceType.Uniform:\n        case ResourceType.Storage:\n        case ResourceType.StorageTexture:\n            return addType(reflect, v.type, offset);\n        default:\n            return {\n                size: 0,\n                type: v.type.name,\n            };\n    }\n}\nfunction addType(reflect, typeInfo, offset) {\n    if (typeInfo.isArray) {\n        assert(!typeInfo.isStruct, 'struct array is invalid');\n        assert(!typeInfo.isStruct, 'template array is invalid');\n        const arrayInfo = typeInfo;\n        // ArrayDefinition\n        return {\n            size: arrayInfo.size,\n            elementType: addType(reflect, arrayInfo.format, offset),\n            numElements: arrayInfo.count,\n        };\n    }\n    else if (typeInfo.isStruct) {\n        assert(!typeInfo.isTemplate, 'template struct is invalid');\n        const structInfo = typeInfo;\n        return makeStructDefinition(reflect, structInfo, offset);\n    }\n    else {\n        // template is like vec4<f32> or mat4x4<f16>\n        const asTemplateInfo = typeInfo;\n        const type = typeInfo.isTemplate\n            ? `${asTemplateInfo.name}<${asTemplateInfo.format.name}>`\n            : typeInfo.name;\n        // IntrinsicDefinition\n        return {\n            size: typeInfo.size,\n            type: type,\n        };\n    }\n}\n\nfunction guessTextureBindingViewDimensionForTexture(texture) {\n    switch (texture.dimension) {\n        case '1d':\n            return '1d';\n        case '3d':\n            return '3d';\n        default: // to shut up TS\n        case '2d':\n            return texture.depthOrArrayLayers > 1 ? '2d-array' : '2d';\n    }\n}\nfunction normalizeGPUExtent3Dict(size) {\n    return [size.width, size.height || 1, size.depthOrArrayLayers || 1];\n}\n/**\n * Converts a `GPUExtent3D` into an array of numbers\n *\n * `GPUExtent3D` has two forms `[width, height?, depth?]` or\n * `{width: number, height?: number, depthOrArrayLayers?: number}`\n *\n * You pass one of those in here and it returns an array of 3 numbers\n * so that your code doesn't have to deal with multiple forms.\n *\n * @param size\n * @returns an array of 3 numbers, [width, height, depthOrArrayLayers]\n */\nfunction normalizeGPUExtent3D(size) {\n    return (Array.isArray(size) || isTypedArray(size))\n        ? [...size, 1, 1].slice(0, 3)\n        : normalizeGPUExtent3Dict(size);\n}\n/**\n * Given a GPUExtent3D returns the number of mip levels needed\n *\n * @param size\n * @returns number of mip levels needed for the given size\n */\nfunction numMipLevels(size, dimension) {\n    const sizes = normalizeGPUExtent3D(size);\n    const maxSize = Math.max(...sizes.slice(0, dimension === '3d' ? 3 : 2));\n    return 1 + Math.log2(maxSize) | 0;\n}\nfunction getMipmapGenerationWGSL(textureBindingViewDimension) {\n    let textureSnippet;\n    let sampleSnippet;\n    switch (textureBindingViewDimension) {\n        case '2d':\n            textureSnippet = 'texture_2d<f32>';\n            sampleSnippet = 'textureSample(ourTexture, ourSampler, fsInput.texcoord)';\n            break;\n        case '2d-array':\n            textureSnippet = 'texture_2d_array<f32>';\n            sampleSnippet = `\n          textureSample(\n              ourTexture,\n              ourSampler,\n              fsInput.texcoord,\n              uni.layer)`;\n            break;\n        case 'cube':\n            textureSnippet = 'texture_cube<f32>';\n            sampleSnippet = `\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1))`;\n            break;\n        case 'cube-array':\n            textureSnippet = 'texture_cube_array<f32>';\n            sampleSnippet = `\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1), uni.layer)`;\n            break;\n        default:\n            throw new Error(`unsupported view: ${textureBindingViewDimension}`);\n    }\n    return `\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        struct Uniforms {\n          layer: u32,\n        };\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: ${textureSnippet};\n        @group(0) @binding(2) var<uniform> uni: Uniforms;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          _ = uni.layer; // make sure this is used so all pipelines have the same bindings\n          return ${sampleSnippet};\n        }\n      `;\n}\n// Use a WeakMap so the device can be destroyed and/or lost\nconst byDevice = new WeakMap();\n/**\n * Generates mip levels from level 0 to the last mip for an existing texture\n *\n * The texture must have been created with TEXTURE_BINDING and RENDER_ATTACHMENT\n * and been created with mip levels\n *\n * @param device A GPUDevice\n * @param texture The texture to create mips for\n * @param textureBindingViewDimension This is only needed in compatibility mode\n *   and it is only needed when the texture is going to be used as a cube map.\n */\nfunction generateMipmap(device, texture, textureBindingViewDimension) {\n    let perDeviceInfo = byDevice.get(device);\n    if (!perDeviceInfo) {\n        perDeviceInfo = {\n            pipelineByFormatAndView: {},\n            moduleByViewType: {},\n        };\n        byDevice.set(device, perDeviceInfo);\n    }\n    let { sampler, uniformBuffer, uniformValues, } = perDeviceInfo;\n    const { pipelineByFormatAndView, moduleByViewType, } = perDeviceInfo;\n    textureBindingViewDimension = textureBindingViewDimension || guessTextureBindingViewDimensionForTexture(texture);\n    let module = moduleByViewType[textureBindingViewDimension];\n    if (!module) {\n        const code = getMipmapGenerationWGSL(textureBindingViewDimension);\n        module = device.createShaderModule({\n            label: `mip level generation for ${textureBindingViewDimension}`,\n            code,\n        });\n        moduleByViewType[textureBindingViewDimension] = module;\n    }\n    if (!sampler) {\n        sampler = device.createSampler({\n            minFilter: 'linear',\n            magFilter: 'linear',\n        });\n        uniformBuffer = device.createBuffer({\n            size: 16,\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n        });\n        uniformValues = new Uint32Array(1);\n        Object.assign(perDeviceInfo, { sampler, uniformBuffer, uniformValues });\n    }\n    const id = `${texture.format}.${textureBindingViewDimension}`;\n    if (!pipelineByFormatAndView[id]) {\n        pipelineByFormatAndView[id] = device.createRenderPipeline({\n            label: `mip level generator pipeline for ${textureBindingViewDimension}`,\n            layout: 'auto',\n            vertex: {\n                module,\n                entryPoint: 'vs',\n            },\n            fragment: {\n                module,\n                entryPoint: 'fs',\n                targets: [{ format: texture.format }],\n            },\n        });\n    }\n    const pipeline = pipelineByFormatAndView[id];\n    for (let baseMipLevel = 1; baseMipLevel < texture.mipLevelCount; ++baseMipLevel) {\n        for (let baseArrayLayer = 0; baseArrayLayer < texture.depthOrArrayLayers; ++baseArrayLayer) {\n            uniformValues[0] = baseArrayLayer;\n            device.queue.writeBuffer(uniformBuffer, 0, uniformValues);\n            const bindGroup = device.createBindGroup({\n                layout: pipeline.getBindGroupLayout(0),\n                entries: [\n                    { binding: 0, resource: sampler },\n                    {\n                        binding: 1,\n                        resource: texture.createView({\n                            dimension: textureBindingViewDimension,\n                            baseMipLevel: baseMipLevel - 1,\n                            mipLevelCount: 1,\n                        }),\n                    },\n                    { binding: 2, resource: { buffer: uniformBuffer } },\n                ],\n            });\n            const renderPassDescriptor = {\n                label: 'mip gen renderPass',\n                colorAttachments: [\n                    {\n                        view: texture.createView({\n                            dimension: '2d',\n                            baseMipLevel,\n                            mipLevelCount: 1,\n                            baseArrayLayer,\n                            arrayLayerCount: 1,\n                        }),\n                        loadOp: 'clear',\n                        storeOp: 'store',\n                    },\n                ],\n            };\n            const encoder = device.createCommandEncoder({\n                label: 'mip gen encoder',\n            });\n            const pass = encoder.beginRenderPass(renderPassDescriptor);\n            pass.setPipeline(pipeline);\n            pass.setBindGroup(0, bindGroup);\n            pass.draw(3);\n            pass.end();\n            const commandBuffer = encoder.finish();\n            device.queue.submit([commandBuffer]);\n        }\n    }\n}\n\nconst kTypedArrayToAttribFormat = new Map([\n    [Int8Array, { formats: ['sint8', 'snorm8'], defaultForType: 1 }],\n    [Uint8Array, { formats: ['uint8', 'unorm8'], defaultForType: 1 }],\n    [Int16Array, { formats: ['sint16', 'snorm16'], defaultForType: 1 }],\n    [Uint16Array, { formats: ['uint16', 'unorm16'], defaultForType: 1 }],\n    [Int32Array, { formats: ['sint32', 'snorm32'], defaultForType: 0 }],\n    [Uint32Array, { formats: ['uint32', 'unorm32'], defaultForType: 0 }],\n    [Float32Array, { formats: ['float32', 'float32'], defaultForType: 0 }],\n    // TODO: Add Float16Array\n]);\nconst kVertexFormatPrefixToType = new Map([...kTypedArrayToAttribFormat.entries()].map(([Type, { formats: [s1, s2] }]) => [[s1, Type], [s2, Type]]).flat());\nfunction isIndices(name) {\n    return name === \"indices\";\n}\nfunction makeTypedArrayFromArrayUnion(array, name) {\n    if (isTypedArray(array)) {\n        return array;\n    }\n    let asFullSpec = array;\n    if (isTypedArray(asFullSpec.data)) {\n        return asFullSpec.data;\n    }\n    if (Array.isArray(array) || typeof array === 'number') {\n        asFullSpec = {\n            data: array,\n        };\n    }\n    let Type = asFullSpec.type;\n    if (!Type) {\n        if (isIndices(name)) {\n            Type = Uint32Array;\n        }\n        else {\n            Type = Float32Array;\n        }\n    }\n    return new Type(asFullSpec.data); // ugh!\n}\nfunction getArray(array) {\n    const arr = array.length ? array : array.data;\n    return arr;\n}\nconst kNameToNumComponents = [\n    { re: /coord|texture|uv/i, numComponents: 2 },\n    { re: /color|colour/i, numComponents: 4 },\n];\nfunction guessNumComponentsFromNameImpl(name) {\n    for (const { re, numComponents } of kNameToNumComponents) {\n        if (re.test(name)) {\n            return numComponents;\n        }\n    }\n    return 3;\n}\nfunction guessNumComponentsFromName(name, length) {\n    const numComponents = guessNumComponentsFromNameImpl(name);\n    if (length % numComponents > 0) {\n        throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n    }\n    return numComponents;\n}\nfunction getNumComponents(array, arrayName) {\n    return array.numComponents || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\nconst kVertexFormatRE = /(\\w+)(?:x(\\d))$/;\nfunction numComponentsAndTypeFromVertexFormat(format) {\n    const m = kVertexFormatRE.exec(format);\n    const [prefix, numComponents] = m ? [m[1], parseInt(m[2])] : [format, 1];\n    return {\n        Type: kVertexFormatPrefixToType.get(prefix),\n        numComponents,\n    };\n}\nfunction createTypedArrayOfSameType(typedArray, arrayBuffer) {\n    const Ctor = Object.getPrototypeOf(typedArray).constructor;\n    return new Ctor(arrayBuffer);\n}\n/**\n * Given a set of named arrays, generates an array `GPUBufferLayout`s\n *\n * Examples:\n *\n * ```js\n *   const arrays = {\n *     position: [1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1],\n *     normal: [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1],\n *     texcoord: [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],\n *   };\n *\n *   const { bufferLayouts, typedArrays } = createBufferLayoutsFromArrays(arrays);\n * ```\n *\n * results in `bufferLayouts` being\n *\n * ```js\n * [\n *   {\n *     stepMode: 'vertex',\n *     arrayStride: 32,\n *     attributes: [\n *       { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *       { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *       { shaderLocation: 2, offset: 24, format: 'float32x2' },\n *     ],\n *   },\n * ]\n * ```\n *\n * and `typedArrays` being\n *\n * ```\n * [\n *   someFloat32Array0,\n *   someFloat32Array1,\n *   someFloat32Array2,\n * ]\n * ```\n *\n * See {@link Arrays} for details on the various types of arrays.\n *\n * Note: If typed arrays are passed in the same typed arrays will come out (copies will not be made)\n */\nfunction createBufferLayoutsFromArrays(arrays, options = {}) {\n    const interleave = options.interleave === undefined ? true : options.interleave;\n    const stepMode = options.stepMode || 'vertex';\n    const shaderLocations = options.shaderLocation\n        ? (Array.isArray(options.shaderLocation) ? options.shaderLocation : [options.shaderLocation])\n        : [0];\n    let currentOffset = 0;\n    const bufferLayouts = [];\n    const attributes = [];\n    const typedArrays = [];\n    Object.keys(arrays)\n        .filter(arrayName => !isIndices(arrayName))\n        .forEach(arrayName => {\n        const array = arrays[arrayName];\n        const data = makeTypedArrayFromArrayUnion(array, arrayName);\n        const totalNumComponents = getNumComponents(array, arrayName);\n        // if totalNumComponents > 4 then we clearly need to split this into multiple\n        // attributes\n        // (a) <= 4 doesn't mean don't split and\n        // (b) how to split? We could divide by 4 and if it's not even then divide by 3\n        //     as a guess?\n        //     5 is error? or 1x4 + 1x1?\n        //     6 is 2x3\n        //     7 is error? or 1x4 + 1x3?\n        //     8 is 2x4\n        //     9 is 3x3\n        //    10 is error? or 2x4 + 1x2?\n        //    11 is error? or 2x4 + 1x3?\n        //    12 is 3x4 or 4x3?\n        //    13 is error? or 3x4 + 1x1 or 4x3 + 1x1?\n        //    14 is error? or 3x4 + 1x2 or 4x3 + 1x2?\n        //    15 is error? or 3x4 + 1x3 or 4x3 + 1x3?\n        //    16 is 4x4\n        const by4 = totalNumComponents / 4;\n        const by3 = totalNumComponents / 3;\n        const step = by4 % 1 === 0 ? 4 : (by3 % 1 === 0 ? 3 : 4);\n        for (let component = 0; component < totalNumComponents; component += step) {\n            const numComponents = Math.min(step, totalNumComponents - component);\n            const offset = currentOffset;\n            currentOffset += numComponents * data.BYTES_PER_ELEMENT;\n            const { defaultForType, formats } = kTypedArrayToAttribFormat.get(Object.getPrototypeOf(data).constructor);\n            const normalize = array.normalize;\n            const formatNdx = typeof normalize === 'undefined' ? defaultForType : (normalize ? 1 : 0);\n            const format = `${formats[formatNdx]}${numComponents > 1 ? `x${numComponents}` : ''}`;\n            // TODO: cleanup with generator?\n            const shaderLocation = shaderLocations.shift();\n            if (shaderLocations.length === 0) {\n                shaderLocations.push(shaderLocation + 1);\n            }\n            attributes.push({\n                offset,\n                format,\n                shaderLocation,\n            });\n            typedArrays.push({\n                data,\n                offset: component,\n                stride: totalNumComponents,\n            });\n        }\n        if (!interleave) {\n            bufferLayouts.push({\n                stepMode,\n                arrayStride: currentOffset,\n                attributes: attributes.slice(),\n            });\n            currentOffset = 0;\n            attributes.length = 0;\n        }\n    });\n    if (attributes.length) {\n        bufferLayouts.push({\n            stepMode,\n            arrayStride: currentOffset,\n            attributes: attributes,\n        });\n    }\n    return {\n        bufferLayouts,\n        typedArrays,\n    };\n}\nfunction getTypedArrayWithOffsetAndStride(ta, numComponents) {\n    return (isTypedArray(ta)\n        ? { data: ta, offset: 0, stride: numComponents }\n        : ta);\n}\n/**\n * Given an array of `GPUVertexAttribute`s and a corresponding array\n * of TypedArrays, interleaves the contents of the typed arrays\n * into the given ArrayBuffer\n *\n * example:\n *\n * ```js\n * const attributes: GPUVertexAttribute[] = [\n *   { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *   { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *   { shaderLocation: 2, offset: 24, format: 'float32x2' },\n * ];\n * const typedArrays = [\n *   new Float32Array([1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1]),\n *   new Float32Array([1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1]),\n *   new Float32Array([1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1]),\n * ];\n * const arrayStride = (3 + 3 + 2) * 4;  // pos + nrm + uv\n * const arrayBuffer = new ArrayBuffer(arrayStride * 24)\n * interleaveVertexData(attributes, typedArrays, arrayStride, arrayBuffer)\n * ```\n *\n * results in the contents of `arrayBuffer` to be the 3 TypedArrays interleaved\n *\n * See {@link Arrays} for details on the various types of arrays.\n *\n * Note: You can generate `attributes` and `typedArrays` above by calling\n * {@link createBufferLayoutsFromArrays}\n */\nfunction interleaveVertexData(attributes, typedArrays, arrayStride, arrayBuffer) {\n    const views = new Map();\n    const getView = (typedArray) => {\n        const Ctor = Object.getPrototypeOf(typedArray).constructor;\n        const view = views.get(Ctor);\n        if (view) {\n            return view;\n        }\n        const newView = new Ctor(arrayBuffer);\n        views.set(Ctor, newView);\n        return newView;\n    };\n    attributes.forEach((attribute, ndx) => {\n        const { offset, format } = attribute;\n        const { numComponents } = numComponentsAndTypeFromVertexFormat(format);\n        const { data, offset: srcOffset, stride, } = getTypedArrayWithOffsetAndStride(typedArrays[ndx], numComponents);\n        const view = getView(data);\n        for (let i = 0; i < data.length; i += stride) {\n            const ndx = i / stride;\n            const dstOffset = (offset + ndx * arrayStride) / view.BYTES_PER_ELEMENT;\n            const srcOff = i + srcOffset;\n            const s = data.subarray(srcOff, srcOff + numComponents);\n            view.set(s, dstOffset);\n        }\n    });\n}\n/**\n * Given arrays, create buffers, fills the buffers with data if provided, optionally\n * interleaves the data (the default).\n *\n * Example:\n *\n * ```js\n *  const {\n *    buffers,\n *    bufferLayouts,\n *    indexBuffer,\n *    indexFormat,\n *    numElements,\n *  } = createBuffersAndAttributesFromArrays(device, {\n *    position: [1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1],\n *    normal: [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1],\n *    texcoord: [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],\n *    indices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23],\n *  });\n * ```\n *\n * Where `bufferLayouts` will be\n *\n * ```js\n * [\n *   {\n *     stepMode: 'vertex',\n *     arrayStride: 32,\n *     attributes: [\n *       { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *       { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *       { shaderLocation: 2, offset: 24, format: 'float32x2' },\n *     ],\n *   },\n * ]\n * ```\n *\n * * `buffers` will have one `GPUBuffer` of usage `GPUBufferUsage.VERTEX`\n * * `indexBuffer` will be `GPUBuffer` of usage `GPUBufferUsage.INDEX`\n * * `indexFormat` will be `uint32` (use a full spec or a typedarray of `Uint16Array` if you want 16bit indices)\n * * `numElements` will be 36 (this is either the number entries in the array named `indices` or if no\n *    indices are provided then it's the length of the first array divided by numComponents. See {@link Arrays})\n *\n * See {@link Arrays} for details on the various types of arrays.\n * Also see the cube and instancing examples.\n */\nfunction createBuffersAndAttributesFromArrays(device, arrays, options = {}) {\n    const usage = (options.usage || 0);\n    const { bufferLayouts, typedArrays, } = createBufferLayoutsFromArrays(arrays, options);\n    const buffers = [];\n    let numElements = -1;\n    let bufferNdx = 0;\n    for (const { attributes, arrayStride } of bufferLayouts) {\n        const attribs = attributes;\n        const attrib0 = attribs[0];\n        const { numComponents } = numComponentsAndTypeFromVertexFormat(attrib0.format);\n        const { data: data0, stride, } = getTypedArrayWithOffsetAndStride(typedArrays[bufferNdx], numComponents);\n        if (numElements < 0) {\n            numElements = data0.length / stride;\n        }\n        const size = arrayStride * numElements;\n        const buffer = device.createBuffer({\n            usage: usage | GPUBufferUsage.VERTEX,\n            size,\n            mappedAtCreation: true,\n        });\n        const arrayBuffer = buffer.getMappedRange();\n        if (attribs.length === 1 && arrayStride === data0.BYTES_PER_ELEMENT * numComponents) {\n            const view = createTypedArrayOfSameType(data0, arrayBuffer);\n            view.set(data0);\n        }\n        else {\n            interleaveVertexData(attribs, typedArrays.slice(bufferNdx), arrayStride, arrayBuffer);\n        }\n        buffer.unmap();\n        buffers.push(buffer);\n        bufferNdx += attribs.length;\n    }\n    const buffersAndAttributes = {\n        numElements,\n        bufferLayouts,\n        buffers,\n    };\n    const indicesEntry = Object.entries(arrays).find(([arrayName]) => isIndices(arrayName));\n    if (indicesEntry) {\n        const indices = makeTypedArrayFromArrayUnion(indicesEntry[1], 'indices');\n        const indexBuffer = device.createBuffer({\n            size: indices.byteLength,\n            usage: GPUBufferUsage.INDEX | usage,\n            mappedAtCreation: true,\n        });\n        const dst = createTypedArrayOfSameType(indices, indexBuffer.getMappedRange());\n        dst.set(indices);\n        indexBuffer.unmap();\n        buffersAndAttributes.indexBuffer = indexBuffer;\n        buffersAndAttributes.indexFormat = indices instanceof Uint16Array ? 'uint16' : 'uint32';\n        buffersAndAttributes.numElements = indices.length;\n    }\n    return buffersAndAttributes;\n}\n/**\n * Calls `passEncoder.setVertexBuffer` and optionally `passEncoder.setIndexBuffer`\n * for the buffers specified in `buffersAndAttributes`.\n *\n * This is extremely simple function. It is equivalent to\n *\n * ```js\n * buffersAndAttributes.buffers.forEach((buffer, i) => {\n *   passEncoder.setVertexBuffer(firstVertexBufferIndex + i, buffer);\n * });\n*\n * if (buffersAndAttributes.indexBuffer) {\n *   passEncoder.setIndexBuffer(buffersAndAttributes.indexBuffer, buffersAndAttributes.indexFormat!);\n * }\n * ```\n *\n * It exists solely for simple cases. If you have a complex case, call the passEncoder\n * yourself as appropriate.\n *\n * @param passEncoder a render pass encoder\n * @param buffersAndAttributes As returned from {@link createBuffersAndAttributesFromArrays}\n * @param firstVertexBufferIndex The first vertex buffer index. default = 0.\n */\nfunction setVertexAndIndexBuffers(passEncoder, buffersAndAttributes, firstVertexBufferIndex = 0) {\n    buffersAndAttributes.buffers.forEach((buffer, i) => {\n        passEncoder.setVertexBuffer(firstVertexBufferIndex + i, buffer);\n    });\n    if (buffersAndAttributes.indexBuffer) {\n        passEncoder.setIndexBuffer(buffersAndAttributes.indexBuffer, buffersAndAttributes.indexFormat);\n    }\n}\n/**\n * Calls {@link setVertexAndIndexBuffers} and then calls either `draw` or `drawIndexed`\n *\n * This is an extremely simple function. See  {@link setVertexAndIndexBuffers}.\n * If you need something more complex, call pass encoder functions yourself as appropriate.\n *\n * @param passEncoder a render pass encoder\n * @param buffersAndAttributes As returned from {@link createBuffersAndAttributesFromArrays}\n */\nfunction drawArrays(passEncoder, buffersAndAttributes) {\n    setVertexAndIndexBuffers(passEncoder, buffersAndAttributes);\n    if (buffersAndAttributes.indexBuffer) {\n        passEncoder.drawIndexed(buffersAndAttributes.numElements);\n    }\n    else {\n        passEncoder.draw(buffersAndAttributes.numElements);\n    }\n}\n\nfunction isTextureData(source) {\n    const src = source;\n    return isTypedArray(src.data) || Array.isArray(src.data);\n}\nfunction isTextureRawDataSource(source) {\n    return isTypedArray(source) || Array.isArray(source) || isTextureData(source);\n}\nfunction toTypedArray(v, format) {\n    if (isTypedArray(v)) {\n        return v;\n    }\n    const { Type } = getTextureFormatInfo(format);\n    return new Type(v);\n}\nfunction guessDimensions(width, height, numElements, dimension = '2d') {\n    if (numElements % 1 !== 0) {\n        throw new Error(\"can't guess dimensions\");\n    }\n    if (!width && !height) {\n        const size = Math.sqrt(numElements / (dimension === 'cube' ? 6 : 1));\n        if (size % 1 === 0) {\n            width = size;\n            height = size;\n        }\n        else {\n            width = numElements;\n            height = 1;\n        }\n    }\n    else if (!height) {\n        height = numElements / width;\n        if (height % 1) {\n            throw new Error(\"can't guess dimensions\");\n        }\n    }\n    else if (!width) {\n        width = numElements / height;\n        if (width % 1) {\n            throw new Error(\"can't guess dimensions\");\n        }\n    }\n    const depth = numElements / width / height;\n    if (depth % 1) {\n        throw new Error(\"can't guess dimensions\");\n    }\n    return [width, height, depth];\n}\nfunction textureViewDimensionToDimension(viewDimension) {\n    switch (viewDimension) {\n        case '1d': return '1d';\n        case '3d': return '3d';\n        default: return '2d';\n    }\n}\nconst kFormatToTypedArray = {\n    '8snorm': Int8Array,\n    '8unorm': Uint8Array,\n    '8sint': Int8Array,\n    '8uint': Uint8Array,\n    '16snorm': Int16Array,\n    '16unorm': Uint16Array,\n    '16sint': Int16Array,\n    '16uint': Uint16Array,\n    '32snorm': Int32Array,\n    '32unorm': Uint32Array,\n    '32sint': Int32Array,\n    '32uint': Uint32Array,\n    '16float': Uint16Array,\n    '32float': Float32Array,\n};\nconst kTextureFormatRE = /([a-z]+)(\\d+)([a-z]+)/;\nfunction getTextureFormatInfo(format) {\n    // this is a hack! It will only work for common formats\n    const [, channels, bits, typeName] = kTextureFormatRE.exec(format);\n    // TODO: if the regex fails, use table for other formats?\n    const numChannels = channels.length;\n    const bytesPerChannel = parseInt(bits) / 8;\n    const bytesPerElement = numChannels * bytesPerChannel;\n    const Type = kFormatToTypedArray[`${bits}${typeName}`];\n    return {\n        channels,\n        numChannels,\n        bytesPerChannel,\n        bytesPerElement,\n        Type,\n    };\n}\n/**\n * Gets the size of a mipLevel. Returns an array of 3 numbers [width, height, depthOrArrayLayers]\n */\nfunction getSizeForMipFromTexture(texture, mipLevel) {\n    return [\n        texture.width,\n        texture.height,\n        texture.depthOrArrayLayers,\n    ].map(v => Math.max(1, Math.floor(v / 2 ** mipLevel)));\n}\n/**\n * Uploads Data to a texture\n */\nfunction uploadDataToTexture(device, texture, source, options) {\n    const data = toTypedArray(source.data || source, texture.format);\n    const mipLevel = 0;\n    const size = getSizeForMipFromTexture(texture, mipLevel);\n    const { bytesPerElement } = getTextureFormatInfo(texture.format);\n    const origin = options.origin || [0, 0, 0];\n    device.queue.writeTexture({ texture, origin }, data, { bytesPerRow: bytesPerElement * size[0], rowsPerImage: size[1] }, size);\n}\n/**\n * Copies a an array of \"sources\" (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * to a texture and then optionally generates mip levels\n */\nfunction copySourcesToTexture(device, texture, sources, options = {}) {\n    let tempTexture;\n    sources.forEach((source, layer) => {\n        const origin = [0, 0, layer + (options.baseArrayLayer || 0)];\n        if (isTextureRawDataSource(source)) {\n            uploadDataToTexture(device, texture, source, { origin });\n        }\n        else {\n            const s = source;\n            // work around limit that you can't call copyExternalImageToTexture for 3d texture.\n            // sse https://github.com/gpuweb/gpuweb/issues/4697 for if we can remove this\n            let dstTexture = texture;\n            let copyOrigin = origin;\n            if (texture.dimension === '3d') {\n                tempTexture = tempTexture ?? device.createTexture({\n                    format: texture.format,\n                    usage: texture.usage | GPUTextureUsage.COPY_SRC,\n                    size: [texture.width, texture.height, 1],\n                });\n                dstTexture = tempTexture;\n                copyOrigin = [0, 0, 0];\n            }\n            const { flipY, premultipliedAlpha, colorSpace } = options;\n            device.queue.copyExternalImageToTexture({ source: s, flipY, }, { texture: dstTexture, premultipliedAlpha, colorSpace, origin: copyOrigin }, getSizeFromSource(s, options));\n            if (tempTexture) {\n                const encoder = device.createCommandEncoder();\n                encoder.copyTextureToTexture({ texture: tempTexture }, { texture, origin }, tempTexture);\n                device.queue.submit([encoder.finish()]);\n            }\n        }\n    });\n    if (tempTexture) {\n        tempTexture.destroy();\n    }\n    if (texture.mipLevelCount > 1) {\n        generateMipmap(device, texture);\n    }\n}\n/**\n * Copies a \"source\" (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * to a texture and then optionally generates mip levels\n */\nfunction copySourceToTexture(device, texture, source, options = {}) {\n    copySourcesToTexture(device, texture, [source], options);\n}\n/**\n * Gets the size from a source. This is to smooth out the fact that different\n * sources have a different way to get their size.\n */\nfunction getSizeFromSource(source, options) {\n    if (source instanceof HTMLVideoElement) {\n        return [source.videoWidth, source.videoHeight, 1];\n    }\n    else {\n        const maybeHasWidthAndHeight = source;\n        const { width, height } = maybeHasWidthAndHeight;\n        if (width > 0 && height > 0 && !isTextureRawDataSource(source)) {\n            // this should cover Canvas, Image, ImageData, ImageBitmap, TextureCreationData\n            return [width, height, 1];\n        }\n        const format = options.format || 'rgba8unorm';\n        const { bytesPerElement, bytesPerChannel } = getTextureFormatInfo(format);\n        const data = isTypedArray(source) || Array.isArray(source)\n            ? source\n            : source.data;\n        const numBytes = isTypedArray(data)\n            ? data.byteLength\n            : (data.length * bytesPerChannel);\n        const numElements = numBytes / bytesPerElement;\n        return guessDimensions(width, height, numElements);\n    }\n}\n/**\n * Create a texture from an array of sources (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * and optionally create mip levels. If you set `mips: true` and don't set a mipLevelCount\n * then it will automatically make the correct number of mip levels.\n *\n * Example:\n *\n * ```js\n * const texture = createTextureFromSource(\n *     device,\n *     [\n *        someCanvasOrVideoOrImageImageBitmap0,\n *        someCanvasOrVideoOrImageImageBitmap1,\n *     ],\n *     {\n *       usage: GPUTextureUsage.TEXTURE_BINDING |\n *              GPUTextureUsage.RENDER_ATTACHMENT |\n *              GPUTextureUsage.COPY_DST,\n *       mips: true,\n *     }\n * );\n * ```\n */\nfunction createTextureFromSources(device, sources, options = {}) {\n    // NOTE: We assume all the sizes are the same. If they are not you'll get\n    // an error.\n    const size = getSizeFromSource(sources[0], options);\n    size[2] = size[2] > 1 ? size[2] : sources.length;\n    const texture = device.createTexture({\n        dimension: textureViewDimensionToDimension(options.dimension),\n        format: options.format || 'rgba8unorm',\n        mipLevelCount: options.mipLevelCount\n            ? options.mipLevelCount\n            : options.mips ? numMipLevels(size) : 1,\n        size,\n        usage: (options.usage ?? 0) |\n            GPUTextureUsage.TEXTURE_BINDING |\n            GPUTextureUsage.COPY_DST |\n            GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    copySourcesToTexture(device, texture, sources, options);\n    return texture;\n}\n/**\n * Create a texture from a source (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * and optionally create mip levels. If you set `mips: true` and don't set a mipLevelCount\n * then it will automatically make the correct number of mip levels.\n *\n * Example:\n *\n * ```js\n * const texture = createTextureFromSource(\n *     device,\n *     someCanvasOrVideoOrImageImageBitmap,\n *     {\n *       usage: GPUTextureUsage.TEXTURE_BINDING |\n *              GPUTextureUsage.RENDER_ATTACHMENT |\n *              GPUTextureUsage.COPY_DST,\n *       mips: true,\n *     }\n * );\n * ```\n */\nfunction createTextureFromSource(device, source, options = {}) {\n    return createTextureFromSources(device, [source], options);\n}\n/**\n * Load an ImageBitmap\n * @param url\n * @param options\n * @returns the loaded ImageBitmap\n */\nasync function loadImageBitmap(url, options = {}) {\n    const res = await fetch(url);\n    const blob = await res.blob();\n    const opt = {\n        ...options,\n        ...(options.colorSpaceConversion !== undefined && { colorSpaceConversion: 'none' }),\n    };\n    return await createImageBitmap(blob, opt);\n}\n/**\n * Load images and create a texture from them, optionally generating mip levels\n *\n * Assumes all the urls reference images of the same size.\n *\n * Example:\n *\n * ```js\n * const texture = await createTextureFromImage(\n *   device,\n *   [\n *     'https://someimage1.url',\n *     'https://someimage2.url',\n *   ],\n *   {\n *     mips: true,\n *     flipY: true,\n *   },\n * );\n * ```\n */\nasync function createTextureFromImages(device, urls, options = {}) {\n    // TODO: start once we've loaded one?\n    // We need at least 1 to know the size of the texture to create\n    const imgBitmaps = await Promise.all(urls.map(url => loadImageBitmap(url)));\n    return createTextureFromSources(device, imgBitmaps, options);\n}\n/**\n * Load an image and create a texture from it, optionally generating mip levels\n *\n * Example:\n *\n * ```js\n * const texture = await createTextureFromImage(device, 'https://someimage.url', {\n *   mips: true,\n *   flipY: true,\n * });\n * ```\n */\nasync function createTextureFromImage(device, url, options = {}) {\n    return createTextureFromImages(device, [url], options);\n}\n\n/*\n * Copyright 2023 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * A class to provide `push` on a typed array.\n *\n * example:\n *\n * ```js\n * const positions = new TypedArrayWrapper(new Float32Array(300), 3);\n * positions.push(1, 2, 3); // add a position\n * positions.push([4, 5, 6]);  // add a position\n * positions.push(new Float32Array(6)); // add 2 positions\n * const data = positions.typedArray;\n * ```\n */\nclass TypedArrayWrapper {\n    typedArray;\n    cursor = 0;\n    numComponents;\n    constructor(arr, numComponents) {\n        this.typedArray = arr;\n        this.numComponents = numComponents;\n    }\n    get numElements() {\n        return this.typedArray.length / this.numComponents;\n    }\n    push(...data) {\n        for (const value of data) {\n            if (Array.isArray(value) || isTypedArray(value)) {\n                const asArray = data;\n                this.typedArray.set(asArray, this.cursor);\n                this.cursor += asArray.length;\n            }\n            else {\n                this.typedArray[this.cursor++] = value;\n            }\n        }\n    }\n    reset(index = 0) {\n        this.cursor = index;\n    }\n}\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2, Float32Array);\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param numComponents number of components\n * @param numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param Type A constructor for the type. Default = `Float32Array`.\n */\nfunction createAugmentedTypedArray(numComponents, numElements, Type) {\n    return new TypedArrayWrapper(new Type(numComponents * numElements), numComponents);\n}\n// I couldn't figure out how to make this because TypedArrayWrapper wants a type\n// but this is explicity kind of type-less.\nfunction createAugmentedTypedArrayFromExisting(numComponents, numElements, existingArray) {\n    const Ctor = existingArray.constructor;\n    const array = new Ctor(numComponents * numElements);\n    return new TypedArrayWrapper(array, numComponents);\n}\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param params\n * @param params.size the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param params.xOffset the amount to offset the quad in X. Default = 0\n * @param params.yOffset the amount to offset the quad in Y. Default = 0\n * @return the created XY Quad vertices\n */\nfunction createXYQuadVertices({ size: inSize = 2, xOffset = 0, yOffset = 0 } = {}) {\n    const size = inSize * 0.5;\n    return {\n        position: {\n            numComponents: 2,\n            data: [\n                xOffset + -1 * size, yOffset + -1 * size,\n                xOffset + 1 * size, yOffset + -1 * size,\n                xOffset + -1 * size, yOffset + 1 * size,\n                xOffset + 1 * size, yOffset + 1 * size,\n            ],\n        },\n        normal: [\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n        ],\n        texcoord: [\n            0, 0,\n            1, 0,\n            0, 1,\n            1, 1,\n        ],\n        indices: [0, 1, 2, 2, 1, 3],\n    };\n}\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param params\n * @param params.width Width of the plane. Default = 1\n * @param params.depth Depth of the plane. Default = 1\n * @param params.subdivisionsWidth Number of steps across the plane. Default = 1\n * @param params.subdivisionsDepth Number of steps down the plane. Default = 1\n * @return The created plane vertices.\n */\nfunction createPlaneVertices({ width = 1, depth = 1, subdivisionsWidth = 1, subdivisionsDepth = 1, } = {}) {\n    const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n    const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const normals = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n    for (let z = 0; z <= subdivisionsDepth; z++) {\n        for (let x = 0; x <= subdivisionsWidth; x++) {\n            const u = x / subdivisionsWidth;\n            const v = z / subdivisionsDepth;\n            positions.push(width * u - width * 0.5, 0, depth * v - depth * 0.5);\n            normals.push(0, 1, 0);\n            texcoords.push(u, v);\n        }\n    }\n    const numVertsAcross = subdivisionsWidth + 1;\n    const indices = createAugmentedTypedArray(3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n    for (let z = 0; z < subdivisionsDepth; z++) { // eslint-disable-line\n        for (let x = 0; x < subdivisionsWidth; x++) { // eslint-disable-line\n            // Make triangle 1 of quad.\n            indices.push((z + 0) * numVertsAcross + x, (z + 1) * numVertsAcross + x, (z + 0) * numVertsAcross + x + 1);\n            // Make triangle 2 of quad.\n            indices.push((z + 1) * numVertsAcross + x, (z + 1) * numVertsAcross + x + 1, (z + 0) * numVertsAcross + x + 1);\n        }\n    }\n    return {\n        position: positions.typedArray,\n        normal: normals.typedArray,\n        texcoord: texcoords.typedArray,\n        indices: indices.typedArray,\n    };\n}\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param params\n * @param params.radius radius of the sphere. Default = 1\n * @param params.subdivisionsAxis number of steps around the sphere. Default = 24\n * @param params.subdivisionsHeight number of vertically on the sphere. Default = 12\n * @param params.startLatitudeInRadians where to start the\n *     top of the sphere. Default = 0\n * @param params.endLatitudeInRadians Where to end the\n *     bottom of the sphere. Default = π\n * @param params.startLongitudeInRadians where to start\n *     wrapping the sphere. Default = 0\n * @param params.endLongitudeInRadians where to end\n *     wrapping the sphere. Default = 2π\n * @return The created sphere vertices.\n */\nfunction createSphereVertices({ radius = 1, subdivisionsAxis = 24, subdivisionsHeight = 12, startLatitudeInRadians = 0, endLatitudeInRadians = Math.PI, startLongitudeInRadians = 0, endLongitudeInRadians = Math.PI * 2, } = {}) {\n    if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n        throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n    }\n    const latRange = endLatitudeInRadians - startLatitudeInRadians;\n    const longRange = endLongitudeInRadians - startLongitudeInRadians;\n    // We are going to generate our sphere by iterating through its\n    // spherical coordinates and generating 2 triangles for each quad on a\n    // ring of the sphere.\n    const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n    const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const normals = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n    // Generate the individual vertices in our vertex buffer.\n    for (let y = 0; y <= subdivisionsHeight; y++) {\n        for (let x = 0; x <= subdivisionsAxis; x++) {\n            // Generate a vertex based on its spherical coordinates\n            const u = x / subdivisionsAxis;\n            const v = y / subdivisionsHeight;\n            const theta = longRange * u + startLongitudeInRadians;\n            const phi = latRange * v + startLatitudeInRadians;\n            const sinTheta = Math.sin(theta);\n            const cosTheta = Math.cos(theta);\n            const sinPhi = Math.sin(phi);\n            const cosPhi = Math.cos(phi);\n            const ux = cosTheta * sinPhi;\n            const uy = cosPhi;\n            const uz = sinTheta * sinPhi;\n            positions.push(radius * ux, radius * uy, radius * uz);\n            normals.push(ux, uy, uz);\n            texcoords.push(1 - u, v);\n        }\n    }\n    const numVertsAround = subdivisionsAxis + 1;\n    const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n    for (let x = 0; x < subdivisionsAxis; x++) { // eslint-disable-line\n        for (let y = 0; y < subdivisionsHeight; y++) { // eslint-disable-line\n            // Make triangle 1 of quad.\n            indices.push((y + 0) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x);\n            // Make triangle 2 of quad.\n            indices.push((y + 1) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x + 1);\n        }\n    }\n    return {\n        position: positions.typedArray,\n        normal: normals.typedArray,\n        texcoord: texcoords.typedArray,\n        indices: indices.typedArray,\n    };\n}\n/**\n * Array of the indices of corners of each face of a cube.\n */\nconst CUBE_FACE_INDICES = [\n    [3, 7, 5, 1],\n    [6, 2, 0, 4],\n    [6, 7, 3, 2],\n    [0, 1, 5, 4],\n    [7, 6, 4, 5],\n    [2, 3, 1, 0], // back\n];\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param params\n * @param params.size width, height and depth of the cube. Default = 1\n * @return The created vertices.\n */\nfunction createCubeVertices({ size = 1 } = {}) {\n    const k = size / 2;\n    const cornerVertices = [\n        [-k, -k, -k],\n        [+k, -k, -k],\n        [-k, +k, -k],\n        [+k, +k, -k],\n        [-k, -k, +k],\n        [+k, -k, +k],\n        [-k, +k, +k],\n        [+k, +k, +k],\n    ];\n    const faceNormals = [\n        [+1, +0, +0],\n        [-1, +0, +0],\n        [+0, +1, +0],\n        [+0, -1, +0],\n        [+0, +0, +1],\n        [+0, +0, -1],\n    ];\n    const uvCoords = [\n        [1, 0],\n        [0, 0],\n        [0, 1],\n        [1, 1],\n    ];\n    const numVertices = 6 * 4;\n    const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const normals = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n    const indices = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n    for (let f = 0; f < 6; ++f) {\n        const faceIndices = CUBE_FACE_INDICES[f];\n        for (let v = 0; v < 4; ++v) {\n            const position = cornerVertices[faceIndices[v]];\n            const normal = faceNormals[f];\n            const uv = uvCoords[v];\n            // Each face needs all four vertices because the normals and texture\n            // coordinates are not all the same.\n            positions.push(...position);\n            normals.push(...normal);\n            texcoords.push(...uv);\n        }\n        // Two triangles make a square face.\n        const offset = 4 * f;\n        indices.push(offset + 0, offset + 1, offset + 2);\n        indices.push(offset + 0, offset + 2, offset + 3);\n    }\n    return {\n        position: positions.typedArray,\n        normal: normals.typedArray,\n        texcoord: texcoords.typedArray,\n        indices: indices.typedArray,\n    };\n}\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param bottomRadius Bottom radius of truncated cone. Default = 1\n * @param topRadius Top radius of truncated cone. Default = 0\n * @param height Height of truncated cone. Default = 1\n * @param radialSubdivisions The number of subdivisions around the\n *     truncated cone. Default = 24\n * @param verticalSubdivisions The number of subdivisions down the\n *     truncated cone. Default = 1\n * @param topCap Create top cap. Default = true.\n * @param bottomCap Create bottom cap. Default = true.\n * @return The created cone vertices.\n */\nfunction createTruncatedConeVertices({ bottomRadius = 1, topRadius = 0, height = 1, radialSubdivisions = 24, verticalSubdivisions = 1, topCap = true, bottomCap = true, } = {}) {\n    if (radialSubdivisions < 3) {\n        throw new Error('radialSubdivisions must be 3 or greater');\n    }\n    if (verticalSubdivisions < 1) {\n        throw new Error('verticalSubdivisions must be 1 or greater');\n    }\n    const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n    const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n    const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const normals = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n    const indices = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n    const vertsAroundEdge = radialSubdivisions + 1;\n    // The slant of the cone is constant across its surface\n    const slant = Math.atan2(bottomRadius - topRadius, height);\n    const cosSlant = Math.cos(slant);\n    const sinSlant = Math.sin(slant);\n    const start = topCap ? -2 : 0;\n    const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n    for (let yy = start; yy <= end; ++yy) {\n        let v = yy / verticalSubdivisions;\n        let y = height * v;\n        let ringRadius;\n        if (yy < 0) {\n            y = 0;\n            v = 1;\n            ringRadius = bottomRadius;\n        }\n        else if (yy > verticalSubdivisions) {\n            y = height;\n            v = 1;\n            ringRadius = topRadius;\n        }\n        else {\n            ringRadius = bottomRadius +\n                (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n        }\n        if (yy === -2 || yy === verticalSubdivisions + 2) {\n            ringRadius = 0;\n            v = 0;\n        }\n        y -= height / 2;\n        for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n            const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n            const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n            positions.push(sin * ringRadius, y, cos * ringRadius);\n            if (yy < 0) {\n                normals.push(0, -1, 0);\n            }\n            else if (yy > verticalSubdivisions) {\n                normals.push(0, 1, 0);\n            }\n            else if (ringRadius === 0.0) {\n                normals.push(0, 0, 0);\n            }\n            else {\n                normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n            }\n            texcoords.push((ii / radialSubdivisions), 1 - v);\n        }\n    }\n    for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) { // eslint-disable-line\n        if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n            continue;\n        }\n        for (let ii = 0; ii < radialSubdivisions; ++ii) { // eslint-disable-line\n            indices.push(vertsAroundEdge * (yy + 0) + 0 + ii, vertsAroundEdge * (yy + 0) + 1 + ii, vertsAroundEdge * (yy + 1) + 1 + ii);\n            indices.push(vertsAroundEdge * (yy + 0) + 0 + ii, vertsAroundEdge * (yy + 1) + 1 + ii, vertsAroundEdge * (yy + 1) + 0 + ii);\n        }\n    }\n    return {\n        position: positions.typedArray,\n        normal: normals.typedArray,\n        texcoord: texcoords.typedArray,\n        indices: indices.typedArray,\n    };\n}\n/**\n * Expands RLE data\n * @param rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param padding value to add each entry with.\n * @return the expanded rleData\n */\nfunction expandRLEData(rleData, padding = []) {\n    padding = padding || [];\n    const data = [];\n    for (let ii = 0; ii < rleData.length; ii += 4) {\n        const runLength = rleData[ii];\n        const element = rleData.slice(ii + 1, ii + 4);\n        element.push(...padding);\n        for (let jj = 0; jj < runLength; ++jj) {\n            data.push(...element);\n        }\n    }\n    return data;\n}\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return The created vertices.\n */\nfunction create3DFVertices() {\n    const positions = [\n        // left column front\n        0, 0, 0,\n        0, 150, 0,\n        30, 0, 0,\n        0, 150, 0,\n        30, 150, 0,\n        30, 0, 0,\n        // top rung front\n        30, 0, 0,\n        30, 30, 0,\n        100, 0, 0,\n        30, 30, 0,\n        100, 30, 0,\n        100, 0, 0,\n        // middle rung front\n        30, 60, 0,\n        30, 90, 0,\n        67, 60, 0,\n        30, 90, 0,\n        67, 90, 0,\n        67, 60, 0,\n        // left column back\n        0, 0, 30,\n        30, 0, 30,\n        0, 150, 30,\n        0, 150, 30,\n        30, 0, 30,\n        30, 150, 30,\n        // top rung back\n        30, 0, 30,\n        100, 0, 30,\n        30, 30, 30,\n        30, 30, 30,\n        100, 0, 30,\n        100, 30, 30,\n        // middle rung back\n        30, 60, 30,\n        67, 60, 30,\n        30, 90, 30,\n        30, 90, 30,\n        67, 60, 30,\n        67, 90, 30,\n        // top\n        0, 0, 0,\n        100, 0, 0,\n        100, 0, 30,\n        0, 0, 0,\n        100, 0, 30,\n        0, 0, 30,\n        // top rung front\n        100, 0, 0,\n        100, 30, 0,\n        100, 30, 30,\n        100, 0, 0,\n        100, 30, 30,\n        100, 0, 30,\n        // under top rung\n        30, 30, 0,\n        30, 30, 30,\n        100, 30, 30,\n        30, 30, 0,\n        100, 30, 30,\n        100, 30, 0,\n        // between top rung and middle\n        30, 30, 0,\n        30, 60, 30,\n        30, 30, 30,\n        30, 30, 0,\n        30, 60, 0,\n        30, 60, 30,\n        // top of middle rung\n        30, 60, 0,\n        67, 60, 30,\n        30, 60, 30,\n        30, 60, 0,\n        67, 60, 0,\n        67, 60, 30,\n        // front of middle rung\n        67, 60, 0,\n        67, 90, 30,\n        67, 60, 30,\n        67, 60, 0,\n        67, 90, 0,\n        67, 90, 30,\n        // bottom of middle rung.\n        30, 90, 0,\n        30, 90, 30,\n        67, 90, 30,\n        30, 90, 0,\n        67, 90, 30,\n        67, 90, 0,\n        // front of bottom\n        30, 90, 0,\n        30, 150, 30,\n        30, 90, 30,\n        30, 90, 0,\n        30, 150, 0,\n        30, 150, 30,\n        // bottom\n        0, 150, 0,\n        0, 150, 30,\n        30, 150, 30,\n        0, 150, 0,\n        30, 150, 30,\n        30, 150, 0,\n        // left side\n        0, 0, 0,\n        0, 0, 30,\n        0, 150, 30,\n        0, 0, 0,\n        0, 150, 30,\n        0, 150, 0,\n    ];\n    const texcoords = [\n        // left column front\n        0.22, 0.19,\n        0.22, 0.79,\n        0.34, 0.19,\n        0.22, 0.79,\n        0.34, 0.79,\n        0.34, 0.19,\n        // top rung front\n        0.34, 0.19,\n        0.34, 0.31,\n        0.62, 0.19,\n        0.34, 0.31,\n        0.62, 0.31,\n        0.62, 0.19,\n        // middle rung front\n        0.34, 0.43,\n        0.34, 0.55,\n        0.49, 0.43,\n        0.34, 0.55,\n        0.49, 0.55,\n        0.49, 0.43,\n        // left column back\n        0, 0,\n        1, 0,\n        0, 1,\n        0, 1,\n        1, 0,\n        1, 1,\n        // top rung back\n        0, 0,\n        1, 0,\n        0, 1,\n        0, 1,\n        1, 0,\n        1, 1,\n        // middle rung back\n        0, 0,\n        1, 0,\n        0, 1,\n        0, 1,\n        1, 0,\n        1, 1,\n        // top\n        0, 0,\n        1, 0,\n        1, 1,\n        0, 0,\n        1, 1,\n        0, 1,\n        // top rung front\n        0, 0,\n        1, 0,\n        1, 1,\n        0, 0,\n        1, 1,\n        0, 1,\n        // under top rung\n        0, 0,\n        0, 1,\n        1, 1,\n        0, 0,\n        1, 1,\n        1, 0,\n        // between top rung and middle\n        0, 0,\n        1, 1,\n        0, 1,\n        0, 0,\n        1, 0,\n        1, 1,\n        // top of middle rung\n        0, 0,\n        1, 1,\n        0, 1,\n        0, 0,\n        1, 0,\n        1, 1,\n        // front of middle rung\n        0, 0,\n        1, 1,\n        0, 1,\n        0, 0,\n        1, 0,\n        1, 1,\n        // bottom of middle rung.\n        0, 0,\n        0, 1,\n        1, 1,\n        0, 0,\n        1, 1,\n        1, 0,\n        // front of bottom\n        0, 0,\n        1, 1,\n        0, 1,\n        0, 0,\n        1, 0,\n        1, 1,\n        // bottom\n        0, 0,\n        0, 1,\n        1, 1,\n        0, 0,\n        1, 1,\n        1, 0,\n        // left side\n        0, 0,\n        0, 1,\n        1, 1,\n        0, 0,\n        1, 1,\n        1, 0,\n    ];\n    const normals = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n        18, 0, 0, 1,\n        // left column back\n        // top rung back\n        // middle rung back\n        18, 0, 0, -1,\n        // top\n        6, 0, 1, 0,\n        // top rung front\n        6, 1, 0, 0,\n        // under top rung\n        6, 0, -1, 0,\n        // between top rung and middle\n        6, 1, 0, 0,\n        // top of middle rung\n        6, 0, 1, 0,\n        // front of middle rung\n        6, 1, 0, 0,\n        // bottom of middle rung.\n        6, 0, -1, 0,\n        // front of bottom\n        6, 1, 0, 0,\n        // bottom\n        6, 0, -1, 0,\n        // left side\n        6, -1, 0, 0,\n    ]);\n    const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n        18, 200, 70, 120,\n        // left column back\n        // top rung back\n        // middle rung back\n        18, 80, 70, 200,\n        // top\n        6, 70, 200, 210,\n        // top rung front\n        6, 200, 200, 70,\n        // under top rung\n        6, 210, 100, 70,\n        // between top rung and middle\n        6, 210, 160, 70,\n        // top of middle rung\n        6, 70, 180, 210,\n        // front of middle rung\n        6, 100, 70, 210,\n        // bottom of middle rung.\n        6, 76, 210, 100,\n        // front of bottom\n        6, 140, 210, 80,\n        // bottom\n        6, 90, 130, 110,\n        // left side\n        6, 160, 160, 220,\n    ], [255]);\n    const numVerts = positions.length / 3;\n    const arrays = {\n        position: createAugmentedTypedArray(3, numVerts, Float32Array),\n        texcoord: createAugmentedTypedArray(2, numVerts, Float32Array),\n        normal: createAugmentedTypedArray(3, numVerts, Float32Array),\n        color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n        indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n    };\n    arrays.position.push(positions);\n    arrays.texcoord.push(texcoords);\n    arrays.normal.push(normals);\n    arrays.color.push(colors);\n    for (let ii = 0; ii < numVerts; ++ii) {\n        arrays.indices.push(ii);\n    }\n    return Object.fromEntries(Object.entries(arrays).map(([k, v]) => [k, v.typedArray]));\n}\n/**\n * Creates cylinder vertices. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param params\n * @param params.radius Radius of cylinder. Default = 1\n * @param params.height Height of cylinder. Default = 1\n * @param params.radialSubdivisions The number of subdivisions around the cylinder. Default = 24\n * @param params.verticalSubdivisions The number of subdivisions down the cylinder. Default = 1\n * @param params.topCap Create top cap. Default = true.\n * @param params.bottomCap Create bottom cap. Default = true.\n * @return The created vertices.\n */\nfunction createCylinderVertices({ radius = 1, height = 1, radialSubdivisions = 24, verticalSubdivisions = 1, topCap = true, bottomCap = true, } = {}) {\n    return createTruncatedConeVertices({\n        bottomRadius: radius,\n        topRadius: radius,\n        height,\n        radialSubdivisions,\n        verticalSubdivisions,\n        topCap,\n        bottomCap,\n    });\n}\n/**\n * Creates vertices for a torus\n *\n * @param params\n * @param params.radius radius of center of torus circle. Default = 1\n * @param params.thickness radius of torus ring. Default = 0.24\n * @param params.radialSubdivisions The number of subdivisions around the torus. Default = 24\n * @param params.bodySubdivisions The number of subdivisions around the body torus. Default = 12\n * @param params.startAngle start angle in radians. Default = 0.\n * @param params.endAngle end angle in radians. Default = Math.PI * 2.\n * @return The created vertices.\n */\nfunction createTorusVertices({ radius = 1, thickness = 0.24, radialSubdivisions = 24, bodySubdivisions = 12, startAngle = 0, endAngle = Math.PI * 2, } = {}) {\n    if (radialSubdivisions < 3) {\n        throw new Error('radialSubdivisions must be 3 or greater');\n    }\n    if (bodySubdivisions < 3) {\n        throw new Error('verticalSubdivisions must be 3 or greater');\n    }\n    const range = endAngle - startAngle;\n    const radialParts = radialSubdivisions + 1;\n    const bodyParts = bodySubdivisions + 1;\n    const numVertices = radialParts * bodyParts;\n    const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const normals = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n    const indices = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n    for (let slice = 0; slice < bodyParts; ++slice) {\n        const v = slice / bodySubdivisions;\n        const sliceAngle = v * Math.PI * 2;\n        const sliceSin = Math.sin(sliceAngle);\n        const ringRadius = radius + sliceSin * thickness;\n        const ny = Math.cos(sliceAngle);\n        const y = ny * thickness;\n        for (let ring = 0; ring < radialParts; ++ring) {\n            const u = ring / radialSubdivisions;\n            const ringAngle = startAngle + u * range;\n            const xSin = Math.sin(ringAngle);\n            const zCos = Math.cos(ringAngle);\n            const x = xSin * ringRadius;\n            const z = zCos * ringRadius;\n            const nx = xSin * sliceSin;\n            const nz = zCos * sliceSin;\n            positions.push(x, y, z);\n            normals.push(nx, ny, nz);\n            texcoords.push(u, 1 - v);\n        }\n    }\n    for (let slice = 0; slice < bodySubdivisions; ++slice) { // eslint-disable-line\n        for (let ring = 0; ring < radialSubdivisions; ++ring) { // eslint-disable-line\n            const nextRingIndex = 1 + ring;\n            const nextSliceIndex = 1 + slice;\n            indices.push(radialParts * slice + ring, radialParts * nextSliceIndex + ring, radialParts * slice + nextRingIndex);\n            indices.push(radialParts * nextSliceIndex + ring, radialParts * nextSliceIndex + nextRingIndex, radialParts * slice + nextRingIndex);\n        }\n    }\n    return {\n        position: positions.typedArray,\n        normal: normals.typedArray,\n        texcoord: texcoords.typedArray,\n        indices: indices.typedArray,\n    };\n}\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param params\n * @param params.radius Radius of the ground plane. Default = 1\n * @param params.divisions Number of triangles in the ground plane (at least 3). Default = 24\n * @param params.stacks Number of radial divisions. Default = 1\n * @param params.innerRadius Default = 0\n * @param params.stackPower Power to raise stack size to for decreasing width. Default = 1\n * @return The created vertices.\n */\nfunction createDiscVertices({ radius = 1, divisions = 24, stacks = 1, innerRadius = 0, stackPower = 1, } = {}) {\n    if (divisions < 3) {\n        throw new Error('divisions must be at least 3');\n    }\n    // Note: We don't share the center vertex because that would\n    // mess up texture coordinates.\n    const numVertices = (divisions + 1) * (stacks + 1);\n    const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const normals = createAugmentedTypedArray(3, numVertices, Float32Array);\n    const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n    const indices = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n    let firstIndex = 0;\n    const radiusSpan = radius - innerRadius;\n    const pointsPerStack = divisions + 1;\n    // Build the disk one stack at a time.\n    for (let stack = 0; stack <= stacks; ++stack) {\n        const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n        for (let i = 0; i <= divisions; ++i) {\n            const theta = 2.0 * Math.PI * i / divisions;\n            const x = stackRadius * Math.cos(theta);\n            const z = stackRadius * Math.sin(theta);\n            positions.push(x, 0, z);\n            normals.push(0, 1, 0);\n            texcoords.push(1 - (i / divisions), stack / stacks);\n            if (stack > 0 && i !== divisions) {\n                // a, b, c and d are the indices of the vertices of a quad.  unless\n                // the current stack is the one closest to the center, in which case\n                // the vertices a and b connect to the center vertex.\n                const a = firstIndex + (i + 1);\n                const b = firstIndex + i;\n                const c = firstIndex + i - pointsPerStack;\n                const d = firstIndex + (i + 1) - pointsPerStack;\n                // Make a quad of the vertices a, b, c, d.\n                indices.push(a, b, c);\n                indices.push(a, c, d);\n            }\n        }\n        firstIndex += divisions + 1;\n    }\n    return {\n        position: positions.typedArray,\n        normal: normals.typedArray,\n        texcoord: texcoords.typedArray,\n        indices: indices.typedArray,\n    };\n}\nfunction allButIndices(name) {\n    return name !== \"indices\";\n}\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the vertices by index.\n */\nfunction deindex(arrays) {\n    const indicesP = arrays.indices;\n    const newVertices = {};\n    const indices = makeTypedArrayFromArrayUnion(indicesP, 'indices');\n    const numElements = indices.length;\n    function expandToUnindexed(channel) {\n        const srcBuffer = makeTypedArrayFromArrayUnion(arrays[channel], channel);\n        const numComponents = getNumComponents(srcBuffer, channel);\n        const dstBuffer = createAugmentedTypedArrayFromExisting(numComponents, numElements, srcBuffer);\n        for (let ii = 0; ii < numElements; ++ii) {\n            const ndx = indices[ii];\n            const offset = ndx * numComponents;\n            for (let jj = 0; jj < numComponents; ++jj) {\n                dstBuffer.push(srcBuffer[offset + jj]);\n            }\n        }\n        newVertices[channel] = dstBuffer.typedArray;\n    }\n    Object.keys(arrays).filter(allButIndices).forEach(expandToUnindexed);\n    return newVertices;\n}\n// I don't want to pull in a whole math library\nconst normalize = ([x, y, z]) => {\n    const len = x * x + y * y + z * z;\n    return new Float32Array([x / len, y / len, z / len]);\n};\nconst subtract = (a, b) => {\n    const r = new Float32Array(a.length);\n    for (let i = 0; i < a.length; ++i) {\n        r[i] = a[i] - b[i];\n    }\n    return r;\n};\nconst cross = (a, b) => {\n    const r = new Float32Array(a.length);\n    r[0] = a[1] * b[2] - a[2] * b[1];\n    r[1] = a[2] * b[0] - a[0] * b[2];\n    r[2] = a[0] * b[1] - a[1] * b[0];\n    return r;\n};\n/**\n * Generate triangle normals from positions.\n * Assumes every 3 values is a position and every 3 positions come from the same triangle\n */\nfunction generateTriangleNormals(positions) {\n    const normals = new Float32Array(positions.length);\n    for (let ii = 0; ii < positions.length; ii += 9) {\n        // pull out the 3 positions for this triangle\n        const p0 = positions.subarray(ii, ii + 3);\n        const p1 = positions.subarray(ii + 3, ii + 6);\n        const p2 = positions.subarray(ii + 6, ii + 9);\n        const n0 = normalize(subtract(p0, p1));\n        const n1 = normalize(subtract(p0, p2));\n        const n = cross(n0, n1);\n        // copy them back in\n        normals.set(n, ii);\n        normals.set(n, ii + 3);\n        normals.set(n, ii + 6);\n    }\n    return normals;\n}\n\nvar primitives = {\n    __proto__: null,\n    TypedArrayWrapper: TypedArrayWrapper,\n    create3DFVertices: create3DFVertices,\n    createCubeVertices: createCubeVertices,\n    createCylinderVertices: createCylinderVertices,\n    createDiscVertices: createDiscVertices,\n    createPlaneVertices: createPlaneVertices,\n    createSphereVertices: createSphereVertices,\n    createTorusVertices: createTorusVertices,\n    createTruncatedConeVertices: createTruncatedConeVertices,\n    createXYQuadVertices: createXYQuadVertices,\n    deindex: deindex,\n    generateTriangleNormals: generateTriangleNormals\n};\n\nexport { TypedArrayViewGenerator, copySourceToTexture, copySourcesToTexture, createBufferLayoutsFromArrays, createBuffersAndAttributesFromArrays, createTextureFromImage, createTextureFromImages, createTextureFromSource, createTextureFromSources, drawArrays, generateMipmap, getNumComponents, getSizeAndAlignmentOfUnsizedArrayElement, getSizeForMipFromTexture, getSizeFromSource, interleaveVertexData, isTypedArray, loadImageBitmap, makeBindGroupLayoutDescriptors, makeShaderDataDefinitions, makeStructuredView, makeTypedArrayFromArrayUnion, makeTypedArrayViews, normalizeGPUExtent3D, numMipLevels, primitives, setIntrinsicsToView, setStructuredValues, setStructuredView, setTypedValues, setVertexAndIndexBuffers, subarray };\n//# sourceMappingURL=webgpu-utils.module.js.map\n","import {\n  assert\n} from './validation.js';\n\ntype EncoderState = 'open' | 'locked' | 'ended';\n\nexport type EncoderInfo = {\n  state: EncoderState;\n}\n\nexport function validateEncoderState(encoder: GPUComputePassEncoder | GPURenderPassEncoder | GPUCommandEncoder | GPURenderBundleEncoder, state: EncoderState) {\n  assert(state === 'open', () => `encoder state(${state}) is not \"open\"`, [encoder]);\n}\n\nconst s_commandEncoderToInfoMap = new WeakMap<GPUCommandEncoder, EncoderInfo>();\n\nexport function createCommandEncoder(commandEncoder: GPUCommandEncoder) {\n  s_commandEncoderToInfoMap.set(commandEncoder, { state: 'open' });\n}\n\nexport function unlockCommandEncoder(commandEncoder: GPUCommandEncoder) {\n  const info = s_commandEncoderToInfoMap.get(commandEncoder)!;\n  assert(info.state === 'locked');\n  info.state = 'open';\n}\n\nexport function lockCommandEncoder(commandEncoder: GPUCommandEncoder) {\n  getCommandBufferInfoAndValidateState(commandEncoder).state = 'locked';\n}\n\nexport function finishCommandEncoder(commandEncoder: GPUCommandEncoder) {\n  getCommandBufferInfoAndValidateState(commandEncoder).state = 'ended';\n}\n\nexport function getCommandBufferInfoAndValidateState(commandEncoder: GPUCommandEncoder) {\n  const info = s_commandEncoderToInfoMap.get(commandEncoder)!;\n  validateEncoderState(commandEncoder, info.state);\n  return info;\n}\n\n\n//function validateBindGroups(this: PassEncoder, _: void) {\n//  const {pipeline, bindGroups} = s_passToState.get(this)!;\n//  if (!pipeline) {\n//    emitError('no pipeline', [this]);\n//    return;\n//  }\n//  // get bind group indices needed for current pipeline\n//  const requiredGroupLayouts = s_pipelineToRequiredGroupLayouts.get(pipeline) || [];\n//  for (const {ndx, layout: requiredLayout} of requiredGroupLayouts) {\n//    const bindGroup = bindGroups[ndx];\n//    if (!bindGroup) {\n//      emitError(`no bindGroup at ndx: ${ndx}`);\n//      return;\n//    }\n//\n//    {\n//      const error = validateBindGroupIsGroupEquivalent(requiredLayout, bindGroup);\n//      if (error) {\n//        emitError(error);\n//        return;\n//      }\n//    }\n//\n//    {\n//      const error = validateMinBindingSize(requiredLayout, bindGroup));\n//      if (eror)\n//      emitErr\n//    }\n//  }\n//}\n\n","// A normal GPUPipelineDescriptor just has references to GPUBindGroupLayout objects\n// but we need the GPUBindGroupLayoutDescriptor for each. They don't exist for\n\nimport { RenderPassLayoutInfo } from './render-commands-mixin.js';\nimport { arraysEqual, trimNulls } from './utils.js';\nimport { wrapFunctionAfter } from \"./wrap-api.js\";\n\ntype BindGroupLayoutDescriptor = {\n  entries: GPUBindGroupLayoutEntry[];\n};\n\nexport type BindGroupLayoutDescriptorPlus = {\n  bindGroupLayoutDescriptor: BindGroupLayoutDescriptor,\n  dynamicOffsetCount: number,\n  signature: string,\n}\n\nexport type ReifiedPipelineLayoutDescriptor = {\n  bindGroupLayoutDescriptors: BindGroupLayoutDescriptorPlus[];\n}\n\nexport const s_bindGroupLayoutToBindGroupLayoutDescriptorPlus = new WeakMap<GPUBindGroupLayout, BindGroupLayoutDescriptorPlus>();\nexport const s_pipelineLayoutToBindGroupLayoutDescriptorsPlus = new WeakMap<GPUPipelineLayout, BindGroupLayoutDescriptorPlus[]>();\n\n// getBindGroupLayout always returns a different object which means we can't\n// use it as a key in a map to look up it's layout descriptor ┌∩┐(◣_◢)┌∩┐\nfunction trackNewBindGroupLayout(this: GPUComputePipeline | GPURenderPipeline, layout: GPUBindGroupLayout, [group]: [number]) {\n  // We need to associate this with it's BindGroupLayoutDescriptorPlus\n  const pipelineLayout = s_pipelineToReifiedPipelineLayoutDescriptor.get(this)!;\n  const descPlus = pipelineLayout.bindGroupLayoutDescriptors[group];\n  s_bindGroupLayoutToBindGroupLayoutDescriptorPlus.set(layout, descPlus);\n}\n\nwrapFunctionAfter(GPUComputePipeline, 'getBindGroupLayout', trackNewBindGroupLayout);\nwrapFunctionAfter(GPURenderPipeline, 'getBindGroupLayout', trackNewBindGroupLayout);\n\n// We're using JSON.stringify to make a hash/id\n// so we need the properties to be in the same order\nexport function createRenderPassLayout(\n  colorFormats: (GPUTextureFormat | null | undefined)[],\n  sampleCount: number,\n  depthStencilFormat?: GPUTextureFormat,\n): RenderPassLayout {\n  return {\n    colorFormats,\n    sampleCount,\n    ...(depthStencilFormat && {depthStencilFormat}),\n  };\n}\n\nexport type RenderPassLayout = {\n  colorFormats: (GPUTextureFormat | null | undefined)[];\n  depthStencilFormat?: GPUTextureFormat;\n  sampleCount: number;\n};\n\ntype RenderPipelineDescriptor = {\n    vertex: GPUVertexState,\n    primitive?: GPUPrimitiveState,\n    depthStencil?: GPUDepthStencilState,\n    multisample?: GPUMultisampleState,\n    fragment?: GPUFragmentState,\n    passLayoutInfo: RenderPassLayoutInfo,\n};\n\nexport function renderPassLayoutsEqual(a: RenderPassLayout, b: RenderPassLayout) {\n  return a.sampleCount === b.sampleCount &&\n         a.depthStencilFormat === b.depthStencilFormat &&\n         arraysEqual(a.colorFormats, b.colorFormats);\n}\n\n\nexport const s_renderPipelineToRenderPipelineDescriptor = new WeakMap<GPURenderPipeline, RenderPipelineDescriptor>();\nexport const s_pipelineToReifiedPipelineLayoutDescriptor = new WeakMap<GPUPipelineBase, ReifiedPipelineLayoutDescriptor>();\n\nfunction reifyConstants(c: Record<string, number>) {\n  return { ...c };\n}\n\nfunction reifyProgramableStage(ps: GPUProgrammableStage) {\n  const { /*module,*/ entryPoint, constants } = ps;\n  return {\n    ...(entryPoint && { entryPoint }),\n    ...(constants && { constants: reifyConstants(constants) }),\n  } as GPUProgrammableStage;\n}\n\nfunction reifyVertexAttribute(attr: GPUVertexAttribute): GPUVertexAttribute {\n  const { format, offset, shaderLocation } = attr;\n  return { format, offset, shaderLocation };\n}\n\nfunction reifyVertexBufferLayout(buffer: GPUVertexBufferLayout): GPUVertexBufferLayout {\n  const { arrayStride, stepMode = 'vertex', attributes } = buffer;\n  return {\n    arrayStride,\n    stepMode,\n    attributes: [...attributes].map(reifyVertexAttribute),\n  };\n}\n\nfunction reifyVertexState(vertex: GPUVertexState): GPUVertexState {\n  const { buffers } = vertex;\n  return {\n    ...reifyProgramableStage(vertex),\n    ...(buffers && { buffers: [...buffers].map(b => b ? reifyVertexBufferLayout(b) : null) }),\n  };\n}\n\nfunction reifyBlendComponent(bc: GPUBlendComponent): GPUBlendComponent {\n  const { operation = 'add', srcFactor = 'one', dstFactor = 'zero' } = bc;\n  return {\n    operation,\n    srcFactor,\n    dstFactor,\n  };\n}\n\nfunction reifyBlendState(blend: GPUBlendState): GPUBlendState {\n  return {\n    color: reifyBlendComponent(blend.color),\n    alpha: reifyBlendComponent(blend.alpha),\n  };\n}\n\nfunction reifyColorTargetState(cts: GPUColorTargetState): GPUColorTargetState {\n  const { format, blend, writeMask } = cts;\n  return {\n    format,\n    ...(blend && {blend: reifyBlendState(blend)}),\n    writeMask: writeMask ?? 0xF,\n  };\n}\nfunction reifyFragmentState(fragment: GPUFragmentState): GPUFragmentState {\n  return {\n    ...reifyProgramableStage(fragment),\n    targets: [...fragment.targets].map(t => t ? reifyColorTargetState(t) : null),\n  };\n}\n\nfunction reifyPrimitiveState(p: GPUPrimitiveState): GPUPrimitiveState {\n  const {\n    topology = 'triangle-list',\n    stripIndexFormat,\n    frontFace = 'ccw',\n    cullMode = 'none',\n    // unclippedDepth,\n  } = p;\n  return {\n    topology,\n    ...(stripIndexFormat && { stripIndexFormat }),\n    frontFace,\n    cullMode,\n  };\n}\n\nfunction reifyStencilFaceState(sf: GPUStencilFaceState): GPUStencilFaceState {\n  const {\n    compare = \"always\",\n    failOp = \"keep\",\n    depthFailOp = \"keep\",\n    passOp = \"keep\",\n  } = sf;\n  return {\n    compare, failOp, depthFailOp, passOp,\n  };\n}\n\nfunction reifyDepthStencilState(ds: GPUDepthStencilState): GPUDepthStencilState {\n  const {\n    format,\n    depthWriteEnabled,\n    depthCompare,\n    stencilFront,\n    stencilBack,\n    stencilReadMask = 0xFFFFFFFF,\n    stencilWriteMask = 0xFFFFFFFF,\n    depthBias = 0,\n    depthBiasSlopeScale = 0,\n    depthBiasClamp = 0,\n  } = ds;\n  return {\n    format,\n    ...(depthCompare && { depthCompare }),\n    ...(depthWriteEnabled !== undefined && { depthWriteEnabled }),\n    ...(stencilFront && { stencilFront: reifyStencilFaceState(stencilFront) }),\n    ...(stencilBack && { stencilBack: reifyStencilFaceState(stencilBack) }),\n    stencilReadMask,\n    stencilWriteMask,\n    depthBias,\n    depthBiasSlopeScale,\n    depthBiasClamp,\n  };\n}\n\nfunction reifyMultisampleState(ms: GPUMultisampleState): GPUMultisampleState {\n  const {\n    count = 1,\n    mask = 0xFFFFFFFF,\n    alphaToCoverageEnabled = false,\n  } = ms;\n  return { count, mask, alphaToCoverageEnabled };\n}\n\nfunction reifyRenderPipelineDescriptor(desc: GPURenderPipelineDescriptor): RenderPipelineDescriptor {\n  const {\n    vertex,\n    fragment,\n    primitive,\n    depthStencil,\n    multisample,\n  } = desc;\n  const renderPassLayout = createRenderPassLayout(\n    fragment ? trimNulls([...fragment.targets].map(t => t ? t.format : null)) : [],\n    multisample?.count || 1,\n    depthStencil?.format);\n  return {\n    vertex: reifyVertexState(vertex),\n    ...(fragment && reifyFragmentState(fragment)),\n    ...(primitive && reifyPrimitiveState(primitive)),\n    ...(depthStencil && reifyDepthStencilState(depthStencil)),\n    ...(multisample && reifyMultisampleState(multisample)),\n    passLayoutInfo: {\n      renderPassLayout,\n      passLayoutSignature: JSON.stringify(renderPassLayout),\n    },\n  };\n}\n\nexport function trackRenderPipelineDescriptor(pipeline: GPURenderPipeline, desc: GPURenderPipelineDescriptor) {\n  s_renderPipelineToRenderPipelineDescriptor.set(pipeline, reifyRenderPipelineDescriptor(desc));\n}\n","import {\n  wrapFunctionBefore,\n  wrapFunctionAfter,\n} from './wrap-api.js';\n\nexport type TextureViewDescriptor = {\n  format: GPUTextureFormat;\n  dimension: GPUTextureViewDimension;\n  aspect: GPUTextureAspect;\n  baseMipLevel: GPUIntegerCoordinate;\n  mipLevelCount: GPUIntegerCoordinate;\n  baseArrayLayer: GPUIntegerCoordinate;\n  arrayLayerCount: GPUIntegerCoordinate;\n};\nexport const s_textureViewToTexture = new WeakMap<GPUTextureView, GPUTexture>();\nexport const s_textureViewToDesc = new WeakMap<GPUTextureView, TextureViewDescriptor>();\n\nfunction reifyTextureViewDescriptor(texture: GPUTexture, desc: GPUTextureViewDescriptor | undefined): TextureViewDescriptor {\n  const {\n    format = texture.format,\n    dimension = texture.dimension === '2d'\n      ? (texture.depthOrArrayLayers === 1 ? '2d' : '2d-array')\n      : texture.dimension,\n    aspect = 'all',\n    baseMipLevel = 0,\n    mipLevelCount = texture.mipLevelCount,\n    baseArrayLayer = 0,\n    arrayLayerCount = texture.depthOrArrayLayers,\n  } = desc || {};\n  return {\n    format, dimension, aspect, baseMipLevel, mipLevelCount, baseArrayLayer, arrayLayerCount,\n  };\n}\n\nlet lastDesc: GPUTextureViewDescriptor | undefined;\nwrapFunctionBefore(GPUTexture, 'createView', function (this: GPUTexture, [desc]) {\n  lastDesc = desc;\n});\n\nwrapFunctionAfter(GPUTexture, 'createView', function (this: GPUTexture, view: GPUTextureView) {\n  s_textureViewToTexture.set(view, this);\n  s_textureViewToDesc.set(view, reifyTextureViewDescriptor(this, lastDesc));\n});\n","import {\n  EncoderInfo,\n  validateEncoderState,\n} from './encoder-utils.js';\nimport {\n  BindGroupLayoutDescriptorPlus,\n  s_pipelineToReifiedPipelineLayoutDescriptor,\n} from './pipeline.js';\nimport {\n  BindGroupInfo,\n  assertNotDestroyed,\n  getIdForObject,\n  s_bindGroupToInfo,\n  s_objToDevice,\n} from './shared-state.js';\nimport { s_textureViewToDesc, s_textureViewToTexture } from './texture.js';\nimport {\n  assert,\n} from './validation.js';\nimport {\n  wrapFunctionBefore,\n} from './wrap-api.js';\n\nexport type BindGroupBinding = {\n  bindGroup: GPUBindGroup,\n  dynamicOffsets?: Uint32Array,\n} | undefined;\n\nexport type PassInfo = EncoderInfo & {\n  bindGroups: BindGroupBinding[],\n}\n\ntype BindingMixin =\n  | GPUComputePassEncoder\n  | GPURenderPassEncoder\n  | GPURenderBundleEncoder;\n\ntype Ctor<T extends BindingMixin> = {\n   new (): never;\n   prototype: T;\n};\n\nfunction getResourceFromBindingResource(bindingResource: GPUBindingResource) {\n  if (bindingResource instanceof GPUTextureView) {\n    return s_textureViewToTexture.get(bindingResource)!;\n  } else if (bindingResource instanceof GPUSampler ||\n        bindingResource instanceof GPUExternalTexture) {\n    return bindingResource;\n  } else {\n    return bindingResource.buffer;\n  }\n}\n\nconst autoIdRE = /^(.*?)autoId\\((\\d+)\\)/;\nfunction generateErrorMessageForMismatchedBindGroupLayouts(group: number, bindGroupInfo: BindGroupInfo, bindGroupLayoutDescriptor: BindGroupLayoutDescriptorPlus) {\n  const bgAuto = autoIdRE.exec(bindGroupInfo.layoutPlus.signature);\n  const bglAuto = autoIdRE.exec(bindGroupLayoutDescriptor.signature);\n  if (bgAuto || bglAuto) {\n    // are they both auto?\n    if (!bgAuto === !bglAuto) {\n      if (bgAuto![2] !== bglAuto![2]) {\n      return `bindGroup in group(${group}) is not compatible with pipeline requirements for that group \\\nbecause they are from different layout: 'auto' pipelines.`;\n      }\n    } else {\n      return `bindGroup in group(${group}) is not compatible with pipeline requirements for that group \\\nbecause bindGroup's layout ${bgAuto ? 'is' : 'is not'} from a layout: 'auto' pipeline \\\nand the pipeline's bindGroup layout requirements ${bglAuto ? 'is' : 'is not'} from a layout: 'auto' pipeline`;\n    }\n  }\n  return `bindGroup in group(${group}) is not compatible with pipeline requirements for that group\n\nbindGroup.layout = ${JSON.stringify(bindGroupInfo.layoutPlus.bindGroupLayoutDescriptor, null, 2)}\n\npipeline.group[${group}] requirements = ${JSON.stringify(bindGroupLayoutDescriptor.bindGroupLayoutDescriptor, null, 2)}`;\n}\n\n//function validateEncoderBindGroupsDoNotAliasAWritableResource() {\n//  //\n//}\n\nexport function validateEncoderBindGroups(bindGroups: BindGroupBinding[], pipeline?: GPURenderPipeline | GPUComputePipeline) {\n  assert(!!pipeline, 'no pipeline set');\n  const device = s_objToDevice.get(pipeline);\n\n  const reifiedPipelineDescriptor = s_pipelineToReifiedPipelineLayoutDescriptor.get(pipeline)!;\n  reifiedPipelineDescriptor.bindGroupLayoutDescriptors.forEach((bindGroupLayoutDescriptor, group) => {\n    const binding = bindGroups[group];\n    assert(!!binding, () => `required bindGroup missing from group(${group})`);\n    const bindGroupInfo = s_bindGroupToInfo.get(binding.bindGroup)!;\n    assert(\n      bindGroupInfo.layoutPlus.signature === bindGroupLayoutDescriptor.signature,\n      () => generateErrorMessageForMismatchedBindGroupLayouts(group, bindGroupInfo, bindGroupLayoutDescriptor),\n    );\n    for (const {binding, resource: bindingResource} of bindGroupInfo.entries) {\n      const resource = getResourceFromBindingResource(bindingResource);\n      if (resource instanceof GPUTexture || resource instanceof GPUBuffer) {\n        assertNotDestroyed(resource);\n      }\n      assert(s_objToDevice.get(resource) === device, () => `texture at binding(${binding}) group(${group}) is not from same device`, [resource]);\n    }\n  });\n\n  const bindGroupSpaceUsed = 0;\n  return bindGroupSpaceUsed;\n}\n\nexport function validateBindGroupResourcesNotDestroyed(entries: GPUBindGroupEntry[]) {\n for (const {resource} of entries) {\n    if (resource instanceof GPUTextureView) {\n      const texture = s_textureViewToTexture.get(resource)!;\n      assertNotDestroyed(texture);\n    } else {\n      const asBufferBinding = resource as GPUBufferBinding;\n      const buffer = asBufferBinding.buffer;\n      if (buffer instanceof GPUBuffer) {\n        assertNotDestroyed(buffer);\n      }\n    }\n  }\n}\n\n\n\ntype BoundBufferRange = {\n  bindGroupLayoutEntry: GPUBindGroupLayoutEntry,\n  resource: GPUBufferBinding,\n};\n\nfunction makeIdForBoundBufferRange(boundBufferRange: BoundBufferRange) {\n  const { binding, visibility, buffer: b } = boundBufferRange.bindGroupLayoutEntry;\n  const { type = 'uniform', hasDynamicOffset = false, minBindingSize = 0 } = b!;\n  const { buffer, offset = 0, size } = boundBufferRange.resource;\n  return `\n${binding}]\n${visibility}\n${type}\n${hasDynamicOffset}\n${minBindingSize}\n${getIdForObject(buffer)}\n${offset}\n${size}\n`;\n}\n\nfunction boundBufferRanges(info: BindGroupInfo, dynamicOffsets: Uint32Array) {\n  const result = new Map<string, BoundBufferRange>();\n  let dynamicOffsetIndex = 0;\n  for (const bindGroupEntry of info.entries) {\n    const bindGroupLayoutEntry = info.layoutPlus.bindGroupLayoutDescriptor.entries[bindGroupEntry.binding];\n    if (!bindGroupLayoutEntry.buffer) {\n      continue;\n    }\n    const bound = {\n      offset: 0,\n      ...bindGroupEntry.resource,\n    } as GPUBufferBinding;\n    if (bindGroupLayoutEntry.buffer.hasDynamicOffset) {\n      bound.offset! += dynamicOffsets[dynamicOffsetIndex++];\n    }\n    const boundBufferRange = {\n      bindGroupLayoutEntry,\n      resource: bound,\n    };\n    result.set(makeIdForBoundBufferRange(boundBufferRange), boundBufferRange);\n  }\n  return result;\n}\n\nfunction intersect(aStart: number, aLen: number, bStart: number, bLen: number) {\n  const aEnd = aStart + aLen;\n  const bEnd = bStart + bLen;\n  return (aEnd > bStart) && (aStart < bEnd);\n}\n\nfunction isBufferBindingAliasing(a: GPUBufferBinding, b: GPUBufferBinding) {\n  if (a.buffer !== b.buffer) {\n    return false;\n  }\n  const aSize = a.size ?? a.buffer.size;\n  const bSize = b.size ?? b.buffer.size;\n  const aStart = a.offset ?? 0;\n  const bStart = b.offset ?? 0;\n  return intersect(aStart, aSize, bStart, bSize);\n}\n\nfunction aspectToBits(aspect: GPUTextureAspect): number {\n  switch (aspect) {\n    case 'stencil-only': return 1;\n    case 'depth-only': return 2;\n    case 'all': return 3;\n  }\n  throw new Error('unreachable');\n}\n\nfunction isTextureViewAliasing(a: GPUTextureView, b: GPUTextureView) {\n  const aTex = s_textureViewToTexture.get(a);\n  const bTex = s_textureViewToTexture.get(b);\n  if (aTex !== bTex) {\n    return false;\n  }\n  const aInfo = s_textureViewToDesc.get(a)!;\n  const bInfo = s_textureViewToDesc.get(b)!;\n\n  const aAspect = aspectToBits(aInfo.aspect);\n  const bAspect = aspectToBits(bInfo.aspect);\n\n  if ((aAspect & bAspect) === 0) {\n    return false;\n  }\n\n  const layersIntersect = intersect(aInfo.baseArrayLayer, aInfo.arrayLayerCount, bInfo.baseArrayLayer, bInfo.arrayLayerCount);\n  if (!layersIntersect) {\n    return false;\n  }\n  return intersect(aInfo.baseMipLevel, aInfo.mipLevelCount, bInfo.baseMipLevel, bInfo.mipLevelCount);\n}\n\nconst kStages = [\n  GPUShaderStage.VERTEX,\n  GPUShaderStage.FRAGMENT,\n  GPUShaderStage.COMPUTE,\n];\n\nexport function encoderBindGroupsAliasAWritableResource(\n    bindGroups: BindGroupBinding[],\n    dynamicOffsets: Uint32Array[],\n    bindGroupLayoutDescriptorPlus: BindGroupLayoutDescriptorPlus[]) {\n  for (const stage of kStages) {\n    const bufferBindings = new Map<GPUBufferBinding, boolean>();\n    const textureViews = new Map<GPUTextureView, boolean>();\n    for (let bindGroupIndex = 0; bindGroupIndex < bindGroups.length; ++bindGroupIndex) {\n      const bindGroupBinding = bindGroups[bindGroupIndex];\n      if (!bindGroupBinding) {\n        continue;\n      }\n      const bindGroupInfo = s_bindGroupToInfo.get(bindGroupBinding.bindGroup)!;\n\n      // check buffers\n      const bufferRanges = boundBufferRanges(bindGroupInfo, dynamicOffsets[bindGroupIndex]);\n      for (const {bindGroupLayoutEntry, resource} of bufferRanges.values()) {\n        if ((bindGroupLayoutEntry.visibility & stage) === 0) {\n          continue;\n        }\n        const resourceWritable = bindGroupLayoutEntry.buffer!.type === 'storage';\n        for (const [pastResource, pastResourceWritable] of bufferBindings.entries()) {\n          if ((resourceWritable || pastResourceWritable) && isBufferBindingAliasing(pastResource, resource)) {\n            return true;\n          }\n        }\n        bufferBindings.set(resource, resourceWritable);\n      }\n\n      // check textures\n      const textureEntries = bindGroupLayoutDescriptorPlus[bindGroupIndex].bindGroupLayoutDescriptor.entries.filter(e => (e.visibility & stage) !== 0 && (e.texture || e.storageTexture));\n      for (const entry of textureEntries) {\n        const resource = bindGroupInfo.entries[entry.binding].resource as GPUTextureView;\n        const access = entry.storageTexture?.access;\n        const resourceWritable = access === 'read-write' || access === 'write-only';\n        if (!entry.storageTexture) {\n          continue;\n        }\n        for (const [pastResource, pastResourceWritable] of textureViews.entries()) {\n          if ((resourceWritable || pastResourceWritable) && isTextureViewAliasing(pastResource, resource)) {\n            return true;\n          }\n        }\n        textureViews.set(resource, resourceWritable);\n      }\n    }\n  }\n  return false;\n}\n\nfunction* forEachDynamicBinding(info: BindGroupInfo) {\n  let dynamicOffsetIndex = 0;\n  const layout = info.layoutPlus.bindGroupLayoutDescriptor;\n  for (const entry of info.entries) {\n    const bindingDescriptor = layout.entries[entry.binding];\n    if (bindingDescriptor.buffer?.hasDynamicOffset) {\n      const bufferBinding = entry.resource as GPUBufferBinding;\n      const bufferLayout = bindingDescriptor.buffer;\n      yield {bufferBinding, bufferLayout, dynamicOffsetIndex};\n      ++dynamicOffsetIndex;\n    }\n  }\n}\n\nexport function wrapBindingCommandsMixin<T extends BindingMixin>(\n  API: Ctor<T>,\n  s_passToPassInfoMap: WeakMap<T, PassInfo>) {\n\n  wrapFunctionBefore(API, 'setBindGroup', function (this: T, [index, bindGroup, dynamicOffsetsArg, dynamicOffsetDataStart, dynamicOffsetDataLength]) {\n    const info = s_passToPassInfoMap.get(this)!;\n    validateEncoderState(this, info.state);\n    const bindGroupBindings = info.bindGroups;\n\n    const dynamicOffsetCount = bindGroup\n      ? s_bindGroupToInfo.get(bindGroup)!.layoutPlus.dynamicOffsetCount\n      : 0;\n    dynamicOffsetsArg = dynamicOffsetsArg ? new Uint32Array(dynamicOffsetsArg) : new Uint32Array(0);\n    dynamicOffsetDataStart = dynamicOffsetDataStart ?? 0;\n    dynamicOffsetDataLength = dynamicOffsetDataLength ?? dynamicOffsetsArg.length;\n    const dynamicOffsets = dynamicOffsetsArg.slice(dynamicOffsetDataStart, dynamicOffsetDataLength);\n\n    assert(dynamicOffsets.length === dynamicOffsetCount, `there must be the same number of dynamicOffsets(${dynamicOffsets.length}) as the layout requires (${dynamicOffsetCount})`);\n\n    const device = s_objToDevice.get(this)!;\n    const maxIndex = device.limits.maxBindGroups;\n    assert(index >= 0, () => `index(${index}) must be >= 0`);\n    assert(index < maxIndex, () => `index(${index}) must be < device.limits.maxBindGroups(${maxIndex})`);\n    if (bindGroup) {\n      assert(device === s_objToDevice.get(bindGroup), () => `bindGroup must be from same device as ${parent.constructor.name}`, [bindGroup, parent]);\n\n      // Validate resources are not destroyed\n      const info = s_bindGroupToInfo.get(bindGroup)!;\n      validateBindGroupResourcesNotDestroyed(info.entries);\n\n      // Validate Dynamic Offsets\n      for (const {bufferBinding, bufferLayout, dynamicOffsetIndex} of forEachDynamicBinding(info)) {\n        const dynamicOffset = dynamicOffsets[dynamicOffsetIndex];\n        assert((bufferBinding.offset || 0) + dynamicOffset + (bufferLayout.minBindingSize || 0) <= bufferBinding.buffer.size, 'dynamic offset is out of range');\n        switch (bufferLayout.type) {\n          case 'uniform':\n            assert(dynamicOffset % device.limits.minUniformBufferOffsetAlignment === 0, () => `dynamicOffset[${dynamicOffsetIndex}](${dynamicOffset}) used for a uniform buffer is not a multiple of device.limits.minUniformBufferOffsetAlignment(${device.limits.minUniformBufferOffsetAlignment})`);\n            break;\n          case 'storage':\n          case 'read-only-storage':\n            assert(dynamicOffset % device.limits.minStorageBufferOffsetAlignment === 0, () => `dynamicOffset[${dynamicOffsetIndex}](${dynamicOffset}) used for a uniform buffer is not a multiple of device.limits.minStorageBufferOffsetAlignment(${device.limits.minStorageBufferOffsetAlignment})`);\n            break;\n        }\n      }\n\n      bindGroupBindings[index] = {\n        bindGroup,\n        dynamicOffsets,\n      };\n    } else {\n      bindGroupBindings[index] = undefined;\n    }\n  });\n\n}\n\n","import {\n  PassInfo,\n  validateEncoderBindGroups,\n} from './binding-mixin.js';\nimport {\n  validateEncoderState,\n} from './encoder-utils.js';\nimport {\n  assertNotDestroyed,\n  s_objToDevice,\n} from './shared-state.js';\nimport {\n  assert,\n} from './validation.js';\nimport {\n  RenderPassLayout,\n  s_renderPipelineToRenderPipelineDescriptor,\n} from './pipeline.js';\nimport {\n  bufferUsageToString,\n} from './utils.js';\nimport {\n  wrapFunctionBefore,\n} from './wrap-api.js';\n\ntype RenderMixin = GPURenderPassEncoder | GPURenderBundleEncoder;\n\ntype BufferWithOffsetAndSize = {\n  buffer: GPUBuffer,\n  offset: number,\n  size: number,\n};\n\nexport type RenderDrawInfo = PassInfo & {\n  pipeline?: GPURenderPipeline,\n  indexBuffer?: BufferWithOffsetAndSize,\n  indexFormat?: GPUIndexFormat,\n  vertexBuffers: (BufferWithOffsetAndSize | undefined)[],\n};\n\nfunction toArray<T>(v: Iterable<T>): T[] {\n  return Array.isArray(v) ? v : [...v];\n}\n\ntype VertexBufferValidationFn = (slot: number, layout: GPUVertexBufferLayout, vertexBufferBinding: BufferWithOffsetAndSize) => void;\n\nfunction validateValidToDraw(mixin: RenderMixin, info: RenderDrawInfo, fn: VertexBufferValidationFn) {\n  const bindGroupSpaceUsed = validateEncoderBindGroups(info.bindGroups, info.pipeline);\n  const pipelineDescriptor = s_renderPipelineToRenderPipelineDescriptor.get(info.pipeline!)!;\n  const device = s_objToDevice.get(mixin)!;\n  let vertexBufferSpaceUsed = 0;\n  if (pipelineDescriptor.vertex.buffers) {\n    // buffers is sequence so no forEach, convert to array\n    const buffers = toArray(pipelineDescriptor.vertex.buffers);\n    buffers.forEach((buffer, slot) => {\n      if (buffer) {\n        const vertexBufferBinding = info.vertexBuffers[slot];\n        assert(!!vertexBufferBinding, () => `no vertexBuffer in slot(${slot})`);\n        assertNotDestroyed(vertexBufferBinding.buffer);\n        fn(slot, buffer, vertexBufferBinding);\n        // don't need to check that vertex buffer is same device as was checked at setVertexBuffer\n        vertexBufferSpaceUsed = slot;\n      }\n    });\n  }\n\n  // TODO: test!\n  assert(\n    bindGroupSpaceUsed + vertexBufferSpaceUsed <= device.limits.maxBindGroupsPlusVertexBuffers,\n    () => `bindGroupSpaceUsed(${bindGroupSpaceUsed}) + vertexBufferSpaceUsed(${vertexBufferSpaceUsed}) <= device.limits.maxBindGroupsPlusVertexBuffers(${device.limits.maxBindGroupsPlusVertexBuffers})`);\n}\n\nfunction validateValidToDrawIndexed(mixin: RenderMixin, info: RenderDrawInfo, fn: VertexBufferValidationFn) {\n  assert(!!info.indexBuffer, 'indexBuffer is not set');\n  const device = s_objToDevice.get(mixin)!;\n  assertNotDestroyed(info.indexBuffer.buffer);\n  assert(device === s_objToDevice.get(info.indexBuffer.buffer), 'indexBuffer is not from same device');\n  validateValidToDraw(mixin, info, fn);\n\n  const pipelineDescriptor = s_renderPipelineToRenderPipelineDescriptor.get(info.pipeline!)!;\n  switch (pipelineDescriptor.primitive?.topology) {\n    case 'line-strip':\n    case 'triangle-strip':\n      assert(\n        info.indexFormat === pipelineDescriptor.primitive?.stripIndexFormat,\n        () => `indexFormat(${info.indexFormat}) !== pipeline.primitive.stripIndexFormat(${pipelineDescriptor.primitive?.stripIndexFormat})`,\n      );\n  }\n}\n\nfunction bufferSizeFromBufferBinding({buffer, offset, size}: BufferWithOffsetAndSize) {\n  offset = offset ?? 0;\n  return size ?? buffer.size - offset;\n}\n\nconst kVertexFormatInfo = {\n  \"uint8x2\":   { components: 2, bytes:  2, type: \"vec2<u32>\" },\n  \"uint8x4\":   { components: 4, bytes:  4, type: \"vec4<u32>\" },\n  \"sint8x2\":   { components: 2, bytes:  2, type: \"vec2<i32>\" },\n  \"sint8x4\":   { components: 4, bytes:  4, type: \"vec4<i32>\" },\n  \"unorm8x2\":  { components: 2, bytes:  2, type: \"vec2<f32>\" },\n  \"unorm8x4\":  { components: 4, bytes:  4, type: \"vec4<f32>\" },\n  \"snorm8x2\":  { components: 2, bytes:  2, type: \"vec2<f32>\" },\n  \"snorm8x4\":  { components: 4, bytes:  4, type: \"vec4<f32>\" },\n  \"uint16x2\":  { components: 2, bytes:  4, type: \"vec2<u32>\" },\n  \"uint16x4\":  { components: 4, bytes:  8, type: \"vec4<u32>\" },\n  \"sint16x2\":  { components: 2, bytes:  4, type: \"vec2<i32>\" },\n  \"sint16x4\":  { components: 4, bytes:  8, type: \"vec4<i32>\" },\n  \"unorm16x2\": { components: 2, bytes:  4, type: \"vec2<f32>\" },\n  \"unorm16x4\": { components: 4, bytes:  8, type: \"vec4<f32>\" },\n  \"snorm16x2\": { components: 2, bytes:  4, type: \"vec2<f32>\" },\n  \"snorm16x4\": { components: 4, bytes:  8, type: \"vec4<f32>\" },\n  \"float16x2\": { components: 2, bytes:  4, type: \"vec2<f16>\" },\n  \"float16x4\": { components: 4, bytes:  8, type: \"vec4<f16>\" },\n  \"float32\":   { components: 1, bytes:  4, type: \"f32\" },\n  \"float32x2\": { components: 2, bytes:  8, type: \"vec2<f32>\" },\n  \"float32x3\": { components: 3, bytes: 12, type: \"vec3<f32>\" },\n  \"float32x4\": { components: 4, bytes: 16, type: \"vec4<f32>\" },\n  \"uint32\":    { components: 1, bytes:  4, type: \"u32\" },\n  \"uint32x2\":  { components: 2, bytes:  8, type: \"vec2<u32>\" },\n  \"uint32x3\":  { components: 3, bytes: 12, type: \"vec3<u32>\" },\n  \"uint32x4\":  { components: 4, bytes: 16, type: \"vec4<u32>\" },\n  \"sint32\":    { components: 1, bytes:  4, type: \"i32\" },\n  \"sint32x2\":  { components: 2, bytes:  8, type: \"vec2<i32>\" },\n  \"sint32x3\":  { components: 3, bytes: 12, type: \"vec3<i32>\" },\n  \"sint32x4\":  { components: 4, bytes: 16, type: \"vec4<i32>\" },\n  \"unorm10-10-10-2\": { components: 4, bytes:4, type:\"vec4<f32>\" },\n};\n\nfunction getLastStride(layout: GPUVertexBufferLayout) {\n  let lastStride = 0;\n  for (const {offset, format} of layout.attributes) {\n    lastStride = Math.max(lastStride, offset + kVertexFormatInfo[format].bytes);\n  }\n  return lastStride;\n}\n\ntype Ctor<T extends RenderMixin> = {\n   new (): never;\n   prototype: T;\n};\n\nexport type RenderPassLayoutInfo = {\n  renderPassLayout: RenderPassLayout,\n  passLayoutSignature: string,\n}\n\nexport function wrapRenderCommandsMixin<T extends RenderMixin>(\n  API: Ctor<T>,\n  s_renderPassToPassInfoMap: WeakMap<T, RenderDrawInfo>,\n  getRenderPassInfo: (pass: T) => RenderPassLayoutInfo) {\n\n  wrapFunctionBefore(API, 'draw', function (this: T, [vertexCount, a_instanceCount, a_firstVertex, a_firstInstance]) {\n    const instanceCount = a_instanceCount ?? 1;\n    const firstVertex = a_firstVertex ?? 0;\n    const firstInstance = a_firstInstance ?? 0;\n    const info = s_renderPassToPassInfoMap.get(this)!;\n    validateEncoderState(this, info.state);\n    validateValidToDraw(this, info, (slot: number, layout: GPUVertexBufferLayout, vertexBufferBinding: BufferWithOffsetAndSize) => {\n      const bufferSize = bufferSizeFromBufferBinding(vertexBufferBinding);\n      const stride = layout.arrayStride;\n      const lastStride = getLastStride(layout);\n      const strideCount = layout.stepMode === 'instance'\n          ? firstInstance + instanceCount\n          : firstVertex + vertexCount;\n      if (strideCount !== 0) {\n        const bytesNeeded = (strideCount - 1) * stride + lastStride;\n        assert(bytesNeeded <= bufferSize, () => `slot(${slot}) vertex buffer binding size ${bufferSize} is not large enough for bytes needed(${bytesNeeded})`);\n      }\n    });\n  });\n\n  wrapFunctionBefore(API, 'drawIndexed', function (this: T, [indexCount, a_instanceCount, a_firstIndex, /*a_baseVertex*/, a_firstInstance]) {\n    const instanceCount = a_instanceCount ?? 1;\n    const firstIndex = a_firstIndex ?? 0;\n    // const baseVertex = a_baseVertex ?? 0;\n    const firstInstance = a_firstInstance ?? 0;\n    const info = s_renderPassToPassInfoMap.get(this)!;\n    validateEncoderState(this, info.state);\n    validateValidToDrawIndexed(this, info, (slot: number, layout: GPUVertexBufferLayout, vertexBufferBinding: BufferWithOffsetAndSize) => {\n      const bufferSize = bufferSizeFromBufferBinding(vertexBufferBinding);\n      const stride = layout.arrayStride;\n      const lastStride = getLastStride(layout);\n      const strideCount = firstInstance + instanceCount;\n      if (layout.stepMode === 'instance') {\n        const bytesNeeded = (strideCount - 1) * stride + lastStride;\n        assert(bytesNeeded <= bufferSize, () => `slot(${slot}) vertex buffer binding size ${bufferSize} is not large enough for bytes needed(${bytesNeeded})`);\n      }\n    });\n    const bufferSize = bufferSizeFromBufferBinding(info.indexBuffer!);\n    const indexByteSize = info.indexFormat === 'uint16' ? 2 : 4;\n    const bytesNeeded = firstIndex + indexCount * indexByteSize;\n    assert(bytesNeeded <= bufferSize, () => `indexBuffer bound size(${bufferSize}) is not large enough for bytesNeeded(${bytesNeeded})`);\n  });\n\n  const kIndirectDrawParametersSize = 16;\n  wrapFunctionBefore(API, 'drawIndirect', function (this: T, [indirectBuffer, indirectOffset]) {\n    const info = s_renderPassToPassInfoMap.get(this)!;\n    validateEncoderState(this, info.state);\n    validateValidToDraw(this, info, () => {});\n    assertNotDestroyed(indirectBuffer);\n    const device = s_objToDevice.get(this)!;\n    assert(device === s_objToDevice.get(indirectBuffer), 'indirectBuffer is not from same device', [indirectBuffer]);\n    assert(!!(indirectBuffer.usage & GPUBufferUsage.INDIRECT), () => `buffer(${bufferUsageToString(indirectBuffer.usage)}) must have usage INDIRECT`, [indirectBuffer, this]);\n    assert(indirectOffset + kIndirectDrawParametersSize <= indirectBuffer.size, `indirectOffset(${indirectOffset}) + sizeOfIndirectParameters(${kIndirectDrawParametersSize}) > indirectBuffer.size(${indirectBuffer.size})`, [indirectBuffer]);\n    assert(indirectOffset % 4 === 0, () => `indirectOffset(${indirectOffset}) is not multiple of 4`);\n  });\n\n  const kIndirectDrawIndexedParametersSize = 20;\n  wrapFunctionBefore(API, 'drawIndexedIndirect', function (this: T, [indirectBuffer, indirectOffset]) {\n    const info = s_renderPassToPassInfoMap.get(this)!;\n    validateEncoderState(this, info.state);\n    validateValidToDrawIndexed(this, info, () => {});\n    assertNotDestroyed(indirectBuffer);\n    const device = s_objToDevice.get(this)!;\n    assert(device === s_objToDevice.get(indirectBuffer), 'indirectBuffer is not from same device', [indirectBuffer]);\n    assert(!!(indirectBuffer.usage & GPUBufferUsage.INDIRECT), () => `buffer(${bufferUsageToString(indirectBuffer.usage)}) must have usage INDIRECT`, [indirectBuffer, this]);\n    assert(indirectOffset + kIndirectDrawIndexedParametersSize <= indirectBuffer.size, `indirectOffset(${indirectOffset}) + sizeOfIndirectParameters(${kIndirectDrawIndexedParametersSize}) > indirectBuffer.size(${indirectBuffer.size})`, [indirectBuffer]);\n    assert(indirectOffset % 4 === 0, () => `indirectOffset(${indirectOffset}) is not multiple of 4`);\n  });\n\n\n  wrapFunctionBefore(API, 'setPipeline', function (this: T, [pipeline]) {\n    const info = s_renderPassToPassInfoMap.get(this)!;\n    validateEncoderState(this, info.state);\n    assert(s_objToDevice.get(this) === s_objToDevice.get(pipeline), 'pipeline must be from same device as renderPassEncoder', [pipeline, this]);\n    const pipelineDesc = s_renderPipelineToRenderPipelineDescriptor.get(pipeline)!;\n    const passLayoutInfo = getRenderPassInfo(this);\n    assert(pipelineDesc.passLayoutInfo.passLayoutSignature === passLayoutInfo.passLayoutSignature,\n           () => `pipeline is not compatible with ${this.constructor.name}\n\n${this.constructor.name} expects ${JSON.stringify(passLayoutInfo.renderPassLayout, null, 2)}\n\npipeline is: ${JSON.stringify(pipelineDesc.passLayoutInfo.renderPassLayout, null, 2)}\n`,\n      [pipeline, this],\n    );\n    info.pipeline = pipeline;\n  });\n\n\n  wrapFunctionBefore(API, 'setIndexBuffer', function (this: T, [buffer, format, offset, size]) {\n    const info = s_renderPassToPassInfoMap.get(this)!;\n    validateEncoderState(this, info.state);\n    const device = s_objToDevice.get(this)!;\n    offset = offset ?? 0;\n    size = size ?? Math.max(0, buffer.size - offset);\n\n    assert(device === s_objToDevice.get(buffer), 'buffer must be from the same device', [buffer, this]);\n    assertNotDestroyed(buffer);\n    assert(!!(buffer.usage & GPUBufferUsage.INDEX), () => `buffer(${bufferUsageToString(buffer.usage)}) must have usage INDEX`, [buffer, this]);\n    const align =  format === 'uint16' ? 2 : 4;\n    assert(offset % align === 0, () => `offset(${offset}) must be multiple of index format: ${format}`, [buffer, this]);\n    assert(offset + size <= buffer.size, () => `offset(${offset}) + size(${size}) is not <= buffer.size(${buffer.size})`, [buffer, this]);\n\n    info.indexBuffer = {\n      buffer,\n      offset,\n      size,\n    };\n    info.indexFormat = format;\n  });\n\n  wrapFunctionBefore(API, 'setVertexBuffer', function (this: T, [slot, buffer, offset, size]) {\n    const info = s_renderPassToPassInfoMap.get(this)!;\n    validateEncoderState(this, info.state);\n    const device = s_objToDevice.get(this)!;\n    const maxSlot = device.limits.maxVertexBuffers;\n    const bufferSize = buffer?.size || 0;\n    offset = offset ?? 0;\n    size = size ?? Math.max(0, bufferSize - offset);\n    assert(slot >= 0, () => `slot(${slot}) must be >= 0`, [this]);\n    assert(slot < maxSlot, () => `slot(${slot}) must be < device.limits.maxVertexBuffers(${maxSlot})`, [this]);\n    assert(offset % 4 === 0, () => `offset(${offset}) must be multiple of 4`, [this]);\n    assert(offset + size <= bufferSize, () => `offset(${offset}) + size(${size}) is not <= buffer.size(${bufferSize})`, [this, ...(buffer ? [buffer] : [])]);\n    if (!buffer) {\n      info.vertexBuffers[slot] = undefined;\n    } else {\n      assert(device === s_objToDevice.get(buffer), 'buffer must be from the same device', [buffer, this]);\n      assertNotDestroyed(buffer);\n      assert(!!(buffer.usage & GPUBufferUsage.VERTEX), () => `buffer(${bufferUsageToString(buffer.usage)}) must have usage VERTEX`, [buffer, this]);\n      info.vertexBuffers[slot] = {\n        buffer,\n        offset,\n        size,\n      };\n    }\n  });\n  }","import {\n  wrapBindingCommandsMixin\n} from './binding-mixin.js';\nimport {\n  validateEncoderState,\n} from './encoder-utils.js';\nimport { createRenderPassLayout } from './pipeline.js';\nimport {\n  RenderDrawInfo,\n  RenderPassLayoutInfo,\n  wrapRenderCommandsMixin,\n} from './render-commands-mixin.js';\nimport { s_objToDevice } from './shared-state.js';\nimport {\n  trimNulls,\n} from './utils.js';\nimport {\n  wrapFunctionAfter,\n  wrapFunctionBefore,\n} from './wrap-api.js';\n\ntype BundleEncoderInfo = RenderDrawInfo & {\n  desc: GPURenderBundleDescriptor,\n  passLayoutInfo: RenderPassLayoutInfo,\n};\n\nconst s_bundleEncoderToPassInfoMap = new WeakMap<GPURenderBundleEncoder, BundleEncoderInfo>();\nconst s_bundleToPassInfoMap = new WeakMap<GPURenderBundle, BundleEncoderInfo>();\n\nfunction getRenderPassLayout(bundleEncoder: GPURenderBundleEncoder): RenderPassLayoutInfo {\n  return s_bundleEncoderToPassInfoMap.get(bundleEncoder)!.passLayoutInfo;\n}\n\nexport function getRenderPassLayoutForRenderBundle(bundle: GPURenderBundle) {\n  return s_bundleToPassInfoMap.get(bundle)!;\n}\n\nwrapRenderCommandsMixin(\n  GPURenderBundleEncoder,\n  s_bundleEncoderToPassInfoMap,\n   getRenderPassLayout,\n);\n\nexport function createRenderBundleEncoder(encoder: GPURenderBundleEncoder, desc: GPURenderBundleEncoderDescriptor) {\n  const { sampleCount = 1, depthStencilFormat, colorFormats } = desc;\n  const renderPassLayout = createRenderPassLayout(\n    trimNulls([...colorFormats]),\n    sampleCount,\n    depthStencilFormat);\n  s_bundleEncoderToPassInfoMap.set(encoder, {\n    state: 'open',  // this is not needed. should we move it?\n    desc: {...desc},\n    vertexBuffers: [],\n    bindGroups: [],\n    passLayoutInfo: {\n      renderPassLayout,\n      passLayoutSignature: JSON.stringify(renderPassLayout),\n    },\n  });\n}\n\nwrapBindingCommandsMixin(GPURenderBundleEncoder, s_bundleEncoderToPassInfoMap);\n\nwrapFunctionBefore(GPURenderBundleEncoder, 'finish', function (this: GPURenderBundleEncoder) {\n  const info = s_bundleEncoderToPassInfoMap.get(this)!;\n  validateEncoderState(this, info.state);\n  info.state = 'ended';\n});\n\nwrapFunctionAfter(GPURenderBundleEncoder, 'finish', function (this: GPURenderBundleEncoder, bundle: GPURenderBundle) {\n  s_objToDevice.set(bundle, s_objToDevice.get(this)!);\n  s_bundleToPassInfoMap.set(bundle, s_bundleEncoderToPassInfoMap.get(this)!);\n});","import {\n  makeBindGroupLayoutDescriptors,\n  makeShaderDataDefinitions,\n  ShaderDataDefinitions,\n} from 'webgpu-utils';\n\nimport {\n  validateBindGroupResourcesNotDestroyed,\n} from './binding-mixin.js';\nimport {\n  createCommandEncoder,\n} from './encoder-utils.js';\nimport {\n  BindGroupLayoutDescriptorPlus,\n  s_bindGroupLayoutToBindGroupLayoutDescriptorPlus,\n  s_pipelineToReifiedPipelineLayoutDescriptor,\n  s_pipelineLayoutToBindGroupLayoutDescriptorsPlus,\n  trackRenderPipelineDescriptor,\n} from './pipeline.js';\nimport {\n  createRenderBundleEncoder,\n} from './render-bundle-encoder.js';\nimport {\n  assertNotDestroyed,\n  s_bindGroupToInfo,\n  s_objToDevice,\n} from './shared-state.js';\nimport {\n  assert\n} from './validation.js';\nimport {\n  wrapFunctionAfter,\n  wrapAsyncFunctionAfter,\n} from './wrap-api.js';\n\nconst s_shaderModuleToDefs = new WeakMap<GPUShaderModule, ShaderDataDefinitions>();\n\nfunction addDefs(defs: ShaderDataDefinitions[], stage: GPUProgrammableStage | undefined) {\n  if (stage) {\n    defs.push(s_shaderModuleToDefs.get(stage.module)!);\n  }\n}\n\nfunction reifyBufferLayout(buffer: GPUBufferBindingLayout) {\n  return {\n    type: buffer.type ?? 'uniform',\n    hasDynamicOffset: !!buffer.hasDynamicOffset,\n    minBindingSize: buffer.minBindingSize ?? 0,\n  };\n}\n\nfunction reifySamplerLayout(sampler: GPUSamplerBindingLayout) {\n  return {\n    type: sampler.type ?? 'filtering',\n  };\n}\n\nfunction reifyTextureLayout(texture: GPUTextureBindingLayout) {\n  return {\n    sampleType: texture.sampleType ?? 'float',\n    viewDimension: texture.viewDimension ?? '2d',\n    multisampled: !!texture.multisampled,\n  };\n}\n\nfunction reifyStorageTexture(storageTexture: GPUStorageTextureBindingLayout) {\n  return {\n    access: storageTexture.access ?? 'write-only',\n    format: storageTexture.format,\n    viewDimension: storageTexture.viewDimension ?? '2d',\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction reifyExternalTexture(externalTexture: GPUExternalTextureBindingLayout) {\n  return {\n  };\n}\n\nfunction reifyBindGroupLayoutEntry({\n    binding,\n    visibility,\n    buffer,\n    sampler,\n    texture,\n    storageTexture,\n    externalTexture,\n  }: GPUBindGroupLayoutEntry): GPUBindGroupLayoutEntry {\n  return {\n    binding,\n    visibility,\n    ...(buffer && { buffer: reifyBufferLayout(buffer) }),\n    ...(sampler && { sampler: reifySamplerLayout(sampler) }),\n    ...(texture && { texture: reifyTextureLayout(texture) }),\n    ...(storageTexture && { storageTexture: reifyStorageTexture(storageTexture) }),\n    ...(externalTexture && { externalTexture: reifyExternalTexture(externalTexture) }),\n  };\n}\n\nfunction  bindGroupLayoutDescriptorToBindGroupLayoutDescriptorPlus(\n    src: GPUBindGroupLayoutDescriptor,\n    autoId: number): BindGroupLayoutDescriptorPlus {\n  const bindGroupLayoutDescriptor = {\n    entries: [...src.entries].map(reifyBindGroupLayoutEntry).sort((a, b) => a.binding - b.binding),\n  };\n  const dynamicOffsetCount = bindGroupLayoutDescriptor.entries.reduce((a, v) => a + (v.buffer?.hasDynamicOffset ? 1 : 0), 0);\n  const signature = `${JSON.stringify(bindGroupLayoutDescriptor)}${autoId ? `:autoId(${autoId})` : ''})`;\n  return {\n    bindGroupLayoutDescriptor,\n    dynamicOffsetCount,\n    signature,\n  };\n}\n\nlet s_autoCount = 1;\nfunction getReifiedPipelineLayoutDescriptor(desc: GPUComputePipelineDescriptor | GPURenderPipelineDescriptor) {\n  if (desc.layout === 'auto') {\n    // It's auto so we need to make a reified pipeline descriptor\n    const defs: ShaderDataDefinitions[] = [];\n    addDefs(defs, (desc as GPURenderPipelineDescriptor).vertex);\n    addDefs(defs, (desc as GPURenderPipelineDescriptor).fragment);\n    addDefs(defs, (desc as GPUComputePipelineDescriptor).compute);\n    const autoId = s_autoCount++;\n    const bindGroupLayoutDescriptors = makeBindGroupLayoutDescriptors(defs, desc).map(b => bindGroupLayoutDescriptorToBindGroupLayoutDescriptorPlus(b, autoId));\n    return {\n      bindGroupLayoutDescriptors,\n    };\n  } else {\n    const bindGroupLayoutDescriptors = s_pipelineLayoutToBindGroupLayoutDescriptorsPlus.get(desc.layout)!;\n    return {\n      bindGroupLayoutDescriptors,\n    };\n  }\n}\n\nfunction trackPipelineLayouts(device: GPUDevice, pipeline: GPUPipelineBase, desc: GPUComputePipelineDescriptor | GPURenderPipelineDescriptor) {\n  s_pipelineToReifiedPipelineLayoutDescriptor.set(pipeline, getReifiedPipelineLayoutDescriptor(desc));\n}\n\nwrapFunctionAfter(GPUDevice, 'createShaderModule', function (this: GPUDevice, module: GPUShaderModule, [desc]: [GPUShaderModuleDescriptor]) {\n  assertNotDestroyed(this);\n  s_objToDevice.set(module, this);\n  s_shaderModuleToDefs.set(module, makeShaderDataDefinitions(desc.code));\n});\n\nwrapFunctionAfter(GPUDevice, 'createBindGroup', function (this: GPUDevice, bindGroup: GPUBindGroup, [desc]: [GPUBindGroupDescriptor]) {\n  s_objToDevice.set(bindGroup, this);\n  const { layout } = desc;\n  // copy the entries since the user might change them\n  const entries = [];\n  for (const {binding, resource} of [...desc.entries]) {\n    const r = resource instanceof GPUSampler ||\n              resource instanceof GPUTextureView ||\n              resource instanceof GPUExternalTexture\n        ? resource\n        : { ...resource };\n    const rb = r as GPUBufferBinding;\n    if (rb.buffer instanceof GPUBuffer) {\n      const offset = rb.offset || 0;\n      const size = rb.size || rb.buffer.size - offset;\n      assert(offset + size <= rb.buffer.size, () => `offset(${offset} + size(${size}) > buffer.size(${rb.buffer.size}))`, [rb.buffer]);\n    }\n    entries.push({\n      binding,\n      resource: r,\n    });\n  }\n  entries.sort((a, b) => a.binding - b.binding);\n  validateBindGroupResourcesNotDestroyed(entries);\n  const layoutPlus = s_bindGroupLayoutToBindGroupLayoutDescriptorPlus.get(layout)!;\n  s_bindGroupToInfo.set(bindGroup, {\n    entries,\n    layoutPlus,\n  });\n});\n\nwrapFunctionAfter(GPUDevice, 'createBuffer', function (this: GPUDevice, buffer: GPUBuffer) {\n  assertNotDestroyed(this);\n  s_objToDevice.set(buffer, this);\n});\n\nwrapFunctionAfter(GPUDevice, 'createQuerySet', function (this: GPUDevice, querySet: GPUQuerySet) {\n  assertNotDestroyed(this);\n  s_objToDevice.set(querySet, this);\n});\n\nwrapFunctionAfter(GPUDevice, 'createSampler', function (this: GPUDevice, sampler: GPUSampler) {\n  assertNotDestroyed(this);\n  s_objToDevice.set(sampler, this);\n});\n\nwrapFunctionAfter(GPUDevice, 'createTexture', function (this: GPUDevice, texture: GPUTexture) {\n  assertNotDestroyed(this);\n  s_objToDevice.set(texture, this);\n});\n\nwrapFunctionAfter(GPUDevice, 'importExternalTexture', function (this: GPUDevice, externalTexture: GPUExternalTexture) {\n  s_objToDevice.set(externalTexture, this);\n});\n\nwrapFunctionAfter(GPUDevice, 'createCommandEncoder', function (this: GPUDevice, commandEncoder: GPUCommandEncoder) {\n  assertNotDestroyed(this);\n  s_objToDevice.set(commandEncoder, this);\n  createCommandEncoder(commandEncoder);\n});\n\nwrapFunctionAfter(GPUDevice, 'createRenderBundleEncoder', function (this: GPUDevice, bundleEncoder: GPURenderBundleEncoder, [desc]) {\n  assertNotDestroyed(this);\n  s_objToDevice.set(bundleEncoder, this);\n  createRenderBundleEncoder(bundleEncoder, desc);\n});\n\nwrapFunctionAfter(GPUDevice, 'createRenderPipeline', function (this: GPUDevice, pipeline: GPURenderPipeline, [desc]) {\n  assertNotDestroyed(this);\n  s_objToDevice.set(pipeline, this);\n  trackRenderPipelineDescriptor(pipeline, desc);\n  trackPipelineLayouts(this, pipeline, desc);\n});\n\nwrapFunctionAfter(GPUDevice, 'createComputePipeline', function (this: GPUDevice, pipeline: GPUComputePipeline, [desc]) {\n  assertNotDestroyed(this);\n  s_objToDevice.set(pipeline, this);\n  trackPipelineLayouts(this, pipeline, desc);\n});\n\nwrapAsyncFunctionAfter(GPUDevice, 'createRenderPipelineAsync', function (this: GPUDevice, pipeline: GPURenderPipeline, [desc]) {\n  assertNotDestroyed(this);\n  s_objToDevice.set(pipeline, this);\n  trackRenderPipelineDescriptor(pipeline, desc);\n  trackPipelineLayouts(this, pipeline, desc);\n});\n\nwrapAsyncFunctionAfter(GPUDevice, 'createComputePipelineAsync', function (this: GPUDevice, pipeline: GPUComputePipeline, [desc]) {\n  assertNotDestroyed(this);\n  s_objToDevice.set(pipeline, this);\n  trackPipelineLayouts(this, pipeline, desc);\n});\n\nwrapFunctionAfter(GPUDevice, 'createBindGroupLayout', function (this: GPUDevice, bindGroupLayout: GPUBindGroupLayout, [desc]) {\n  s_bindGroupLayoutToBindGroupLayoutDescriptorPlus.set(\n    bindGroupLayout,\n    bindGroupLayoutDescriptorToBindGroupLayoutDescriptorPlus(desc, 0),\n  );\n});\n\nwrapFunctionAfter(GPUDevice, 'createPipelineLayout', function (this: GPUDevice, pipelineLayout: GPUPipelineLayout, [desc]) {\n  // need to copy the description because the user may change it after\n  const bglDescriptorsPlus: BindGroupLayoutDescriptorPlus[] =\n    [...desc.bindGroupLayouts].map(bgl =>  s_bindGroupLayoutToBindGroupLayoutDescriptorPlus.get(bgl)!);\n  s_pipelineLayoutToBindGroupLayoutDescriptorsPlus.set(pipelineLayout, bglDescriptorsPlus);\n}\n\n);\n\n","\nimport {\n  s_objToDevice,\n} from './shared-state.js';\nimport {\n  wrapFunctionAfter,\n  wrapFunctionBefore,\n} from './wrap-api.js';\n\n\nwrapFunctionBefore(GPUCanvasContext, 'configure', function (this: GPUCanvasContext, [desc]) {\n  s_objToDevice.set(this, desc.device);\n});\n\nwrapFunctionBefore(GPUCanvasContext, 'unconfigure', function (this: GPUCanvasContext) {\n  s_objToDevice.delete(this);\n});\n\nwrapFunctionAfter(GPUCanvasContext, 'getCurrentTexture', function (this: GPUCanvasContext, texture: GPUTexture) {\n  const device = s_objToDevice.get(this)!;\n  s_objToDevice.set(texture, device);\n});\n","import {\n  assertNotDestroyed,\n  s_objToDevice,\n} from './shared-state.js';\nimport {\n  assert,\n} from './validation.js';\n\nexport function validateTimestampWrites(device: GPUDevice, timestampWrites: GPUComputePassTimestampWrites | GPURenderPassTimestampWrites) {\n  const { querySet, beginningOfPassWriteIndex, endOfPassWriteIndex } = timestampWrites;\n  assertNotDestroyed(querySet);\n  assert(s_objToDevice.get(querySet) === device, 'querySet not from same device', [querySet]);\n  assert(querySet.type === 'timestamp', () => `querySet.type(${querySet.type}) !== 'timestamp'`);\n  assert(beginningOfPassWriteIndex === undefined || beginningOfPassWriteIndex < querySet.count, () => `timestampWrites.beginningOfPassWriteIndex(${beginningOfPassWriteIndex}) is >= querySet.count(${querySet.count})`);\n  assert(endOfPassWriteIndex === undefined || endOfPassWriteIndex < querySet.count, () => `timestampWrites.endOfPassWriteIndex(${endOfPassWriteIndex}) is >= querySet.count(${querySet.count})`);\n  assert(\n    beginningOfPassWriteIndex !== undefined || endOfPassWriteIndex !== undefined,\n    () => `at least one of beginningOfPassWriteIndex(${beginningOfPassWriteIndex}) or endOfPassWriteIndex(${endOfPassWriteIndex})`);\n  assert(beginningOfPassWriteIndex !== endOfPassWriteIndex,\n     () => `beginningOfPassWriteIndex(${beginningOfPassWriteIndex}) and endOfPassWriteIndex(${endOfPassWriteIndex}) may not be the same`);\n}\n\n","import {\n  PassInfo,\n  validateEncoderBindGroups,\n  wrapBindingCommandsMixin,\n} from './binding-mixin.js';\nimport {\n  unlockCommandEncoder,\n  validateEncoderState,\n} from './encoder-utils.js';\nimport {\n  validateTimestampWrites,\n} from './query-support.js';\nimport {\n  assertNotDestroyed,\n  s_objToDevice,\n} from './shared-state.js';\nimport {\n  bufferUsageToString,\n} from './utils.js';\nimport {\n  assert,\n} from './validation.js';\nimport {\n  wrapFunctionBefore,\n} from './wrap-api.js';\n\ntype ComputePassInfo = PassInfo & {\n  commandEncoder: GPUCommandEncoder,\n  pipeline?: GPUComputePipeline,\n};\n\nconst s_computePassToPassInfoMap = new WeakMap<GPUComputePassEncoder, ComputePassInfo>();\n\nexport function beginComputePass(commandEncoder: GPUCommandEncoder, passEncoder: GPUComputePassEncoder, desc: GPUComputePassDescriptor | undefined) {\n  const device = s_objToDevice.get(commandEncoder)!;\n  const { timestampWrites } = desc || {};\n\n  if (timestampWrites) {\n    validateTimestampWrites(device, timestampWrites);\n  }\n\n  s_computePassToPassInfoMap.set(passEncoder, {\n    state: 'open',\n    commandEncoder,\n    bindGroups: [],\n  });\n}\n\nwrapBindingCommandsMixin(GPUComputePassEncoder, s_computePassToPassInfoMap);\n\nwrapFunctionBefore(GPUComputePassEncoder, 'setPipeline', function (this: GPUComputePassEncoder, [pipeline]) {\n  const info = s_computePassToPassInfoMap.get(this)!;\n  validateEncoderState(this, info.state);\n  assert(s_objToDevice.get(info.commandEncoder) === s_objToDevice.get(pipeline), 'pipeline must be from same device as computePassEncoder', [this, info.commandEncoder]);\n  info.pipeline = pipeline;\n});\n\nwrapFunctionBefore(GPUComputePassEncoder, 'end', function (this: GPUComputePassEncoder) {\n  const info = s_computePassToPassInfoMap.get(this)!;\n  validateEncoderState(this, info.state);\n  info.state = 'ended';\n  unlockCommandEncoder(info.commandEncoder);\n});\n\nwrapFunctionBefore(GPUComputePassEncoder, 'dispatchWorkgroups', function (this: GPUComputePassEncoder, [workgroupCountX, workgroupCountY = 1, workgroupCountZ = 1]) {\n  const info = s_computePassToPassInfoMap.get(this)!;\n  validateEncoderState(this, info.state);\n  validateEncoderBindGroups(info.bindGroups, info.pipeline);\n\n  const device = s_objToDevice.get(this)!;\n  assert(workgroupCountX < device.limits.maxComputeWorkgroupsPerDimension, () => `workGroupCountX(${workgroupCountX} > device.limits.maxComputeWorkgroupsPerDimension(${device.limits.maxComputeWorkgroupsPerDimension})`);\n  assert(workgroupCountY < device.limits.maxComputeWorkgroupsPerDimension, () => `workGroupCountY(${workgroupCountY} > device.limits.maxComputeWorkgroupsPerDimension(${device.limits.maxComputeWorkgroupsPerDimension})`);\n  assert(workgroupCountZ < device.limits.maxComputeWorkgroupsPerDimension, () => `workGroupCountZ(${workgroupCountZ} > device.limits.maxComputeWorkgroupsPerDimension(${device.limits.maxComputeWorkgroupsPerDimension})`);\n});\n\nconst kIndirectDispatchWorkgroupsParametersSize = 12;\nwrapFunctionBefore(GPUComputePassEncoder, 'dispatchWorkgroupsIndirect', function (this: GPUComputePassEncoder, [indirectBuffer, indirectOffset]) {\n  const info = s_computePassToPassInfoMap.get(this)!;\n  validateEncoderState(this, info.state);\n  validateEncoderBindGroups(info.bindGroups, info.pipeline);\n  assertNotDestroyed(indirectBuffer);\n  const device = s_objToDevice.get(this)!;\n  assert(device === s_objToDevice.get(indirectBuffer), 'indirectBuffer is not from same device', [indirectBuffer]);\n  assert(!!(indirectBuffer.usage & GPUBufferUsage.INDIRECT), () => `buffer(${bufferUsageToString(indirectBuffer.usage)}) must have usage INDIRECT`, [indirectBuffer, this]);\n  assert(indirectOffset + kIndirectDispatchWorkgroupsParametersSize <= indirectBuffer.size, `indirectOffset(${indirectOffset}) + sizeOfIndirectParameters(${kIndirectDispatchWorkgroupsParametersSize}) > indirectBuffer.size(${indirectBuffer.size})`, [indirectBuffer]);\n  assert(indirectOffset % 4 === 0, () => `indirectOffset(${indirectOffset}) is not multiple of 4`);\n});\n","import {\n  wrapBindingCommandsMixin,\n} from './binding-mixin.js';\nimport {\n  unlockCommandEncoder,\n  validateEncoderState,\n} from './encoder-utils.js';\nimport { kAllTextureFormatInfo } from './format-info.js';\nimport {\n  createRenderPassLayout,\n} from './pipeline.js';\nimport {\n  validateTimestampWrites,\n} from './query-support.js';\nimport {\n  getRenderPassLayoutForRenderBundle\n} from './render-bundle-encoder.js';\nimport {\n  RenderDrawInfo,\n  RenderPassLayoutInfo,\n  wrapRenderCommandsMixin,\n} from './render-commands-mixin.js';\nimport {\n  assertNotDestroyed,\n  s_objToDevice,\n} from './shared-state.js';\nimport {\n  TextureViewDescriptor,\n  s_textureViewToDesc,\n  s_textureViewToTexture,\n} from './texture.js';\nimport {\n  logicalMipLevelSpecificTextureExtent,\n  roundUp,\n  textureUsageToString,\n  trimNulls,\n} from './utils.js';\nimport {\n  assert,\n  emitError,\n} from './validation.js';\nimport {\n  wrapFunctionBefore,\n} from './wrap-api.js';\n\ntype InUseMipLevels = Set<number>;\ntype InUseDepthOrArrayLayers = Map<number, InUseMipLevels>;\ntype InUseTextures = Map<GPUTexture, InUseDepthOrArrayLayers>;\n\ntype RenderPassInfo = RenderDrawInfo & {\n  commandEncoder: GPUCommandEncoder,\n  targetWidth: number,\n  targetHeight: number,\n  passLayoutInfo: RenderPassLayoutInfo,\n  occlusionQuerySet?: GPUQuerySet,\n  occlusionIndices: Map<number, Error>,\n  occlusionQueryActive?: Error,\n  occlusionQueryActiveIndex: number,\n  inuseTextures: InUseTextures,\n};\n\nconst s_renderPassToPassInfoMap = new WeakMap<GPURenderPassEncoder, RenderPassInfo>();\n\nfunction getRenderPassLayout(passEncoder: GPURenderPassEncoder): RenderPassLayoutInfo {\n  return s_renderPassToPassInfoMap.get(passEncoder)!.passLayoutInfo;\n}\n\n/*\nfunction checkTextureNotInUse(inuseTextures: InUseTextures, texture: GPUTexture, fullView: TextureViewDescriptor) {\n  const views = inuseTextures.get(texture);\n  if (!views) {\n    return;\n  }\n}\n*/\n\nfunction markTextureInUse(inuseTextures: InUseTextures, texture: GPUTexture, view: GPUTextureView) {\n  const fullView = s_textureViewToDesc.get(view)!;\n  const inUseDepthOrArrayLayers = inuseTextures.get(texture) || new Map<number, InUseMipLevels>();\n  inuseTextures.set(texture, inUseDepthOrArrayLayers);\n  for (let l = 0; l < fullView.arrayLayerCount; ++l) {\n    const layer = l + fullView.baseArrayLayer;\n    const inUseMipLevels = inUseDepthOrArrayLayers.get(layer) || new Set<number>();\n    inUseDepthOrArrayLayers.set(layer, inUseMipLevels);\n    for (let m = 0; m < fullView.mipLevelCount; ++m) {\n      const mipLevel = m + fullView.baseMipLevel;\n      assert(!inUseMipLevels.has(mipLevel), () => `mipLevel(${mipLevel}) of layer(${layer}) is already in use`, [texture]);\n      inUseMipLevels.add(mipLevel);\n    }\n  }\n}\n\nfunction validateViewAspectIsAllAspectsOfTexture(texture: GPUTexture, aspect: GPUTextureAspect) {\n   const {depth, stencil} = kAllTextureFormatInfo[texture.format];\n   if (depth && stencil) {\n    assert(aspect === 'all', 'aspect must be all for depth-stencil textures', [texture]);\n   } else if (depth) {\n      assert(aspect === 'all' || aspect === 'depth-only',\n        'aspect must be all or depth-only for depth textures', [texture]);\n   } else if (stencil) {\n      assert(aspect === 'all' || aspect === 'stencil-only',\n        'aspect must be all or stencil-only for stencil textures', [texture]);\n   }\n}\n\nfunction validateRenderableTextureView(texture: GPUTexture, viewDesc: TextureViewDescriptor) {\n  assert((texture.usage & GPUTextureUsage.RENDER_ATTACHMENT) !== 0,\n    () => `texture.usage(${textureUsageToString(texture.usage)}) is missing RENDER_ATTACHMENT`, [texture]\n  );\n  const { dimension, mipLevelCount, arrayLayerCount, aspect } = viewDesc;\n  assert(dimension === '2d' || dimension === '3d', () => `dimension(${dimension}) must be 2d or 3d`);\n  assert(mipLevelCount === 1, () => `mipLevelCount(${mipLevelCount}) must be 1`);\n  assert(arrayLayerCount === 1, () => `arrayLayerCount(${arrayLayerCount}) must be 1`);\n  validateViewAspectIsAllAspectsOfTexture(texture, aspect);\n}\n\nfunction validateRenderPassColorAttachment(attachment: GPURenderPassColorAttachment, slot: number) {\n  const {view, resolveTarget, depthSlice, loadOp } = attachment;\n  const renderViewDesc = s_textureViewToDesc.get(view)!;\n  const renderTexture = s_textureViewToTexture.get(view)!;\n  const formatInfo = kAllTextureFormatInfo[renderViewDesc.format];\n  validateRenderableTextureView(renderTexture, renderViewDesc);\n  assert(!!formatInfo.colorRender, () => `format(${renderViewDesc.format}) is not color renderable`);\n  if (renderViewDesc.dimension === '3d') {\n    assert(!!depthSlice, () => `attachment(${slot})'s dimension is '3d' but depthSlice is missing`);\n    const [, , d] = logicalMipLevelSpecificTextureExtent(renderTexture, renderViewDesc.baseMipLevel);\n    assert(depthSlice < d, () => `depthSlice(${depthSlice}) must be < depth(${d}) at mipLevel(${renderViewDesc.mipLevelCount}) of texture`, [renderTexture]);\n  } else {\n    assert(depthSlice === undefined, `attachment(${slot}) is not 3d so depthSlice must NOT be provided`);\n  }\n  if (loadOp) {\n    // check that clearValue is valid\n  }\n  if (resolveTarget) {\n    const resolveViewDesc = s_textureViewToDesc.get(resolveTarget)!;\n    const resolveTexture = s_textureViewToTexture.get(resolveTarget)!;\n    const [tw, th] = logicalMipLevelSpecificTextureExtent(renderTexture, renderViewDesc.baseMipLevel);\n    const [rw, rh] = logicalMipLevelSpecificTextureExtent(resolveTexture, resolveViewDesc.baseMipLevel);\n    assert(tw === rw && th === rh, () => `resolveTarget render extent(${rw}, ${rh}) != view render extent (${tw}, ${th})`);\n    assert(renderTexture.sampleCount > 1, 'resolveTarget is set so view texture must have sampleCount > 1', [renderTexture]);\n    assert(resolveTexture.sampleCount === 1, 'resolveTarget.sampleCount must be 1', [resolveTarget]);\n    validateRenderableTextureView(resolveTexture, resolveViewDesc);\n    assert(resolveViewDesc.format === renderViewDesc.format, () => `resolveTarget.view.format(${resolveViewDesc.format}) must equal target.view.format(${renderViewDesc.format})`);\n    assert(resolveTexture.format === renderTexture.format, () => `resolve texture format(${resolveTexture.format}) must equal target texture format(${renderTexture.format})`);\n    const resolveFormatInfo = kAllTextureFormatInfo[resolveTexture.format];\n    assert(!!resolveFormatInfo?.colorRender?.resolve, () => `resolve texture.format(${resolveTexture.format}) does not support resolving`);\n  }\n}\n\nwrapRenderCommandsMixin(GPURenderPassEncoder, s_renderPassToPassInfoMap, getRenderPassLayout);\n\nexport function beginRenderPass(commandEncoder: GPUCommandEncoder, passEncoder: GPURenderPassEncoder, desc: GPURenderPassDescriptor) {\n  let targetWidth: number | undefined;\n  let targetHeight: number | undefined;\n  const device = s_objToDevice.get(commandEncoder)!;\n\n  const inuseTextures = new Map<GPUTexture, InUseDepthOrArrayLayers>();\n  const colorFormats: (GPUTextureFormat | null)[] = [];\n  let passSampleCount: number | undefined;\n  let depthStencilFormat: GPUTextureFormat | undefined;\n  let bytesPerSample = 0;\n  let numAttachments = 0;\n\n  const checkRenderExtent = (texture: GPUTexture, view: GPUTextureView) => {\n    const desc = s_textureViewToDesc.get(view)!;\n    const [width, height] = logicalMipLevelSpecificTextureExtent(texture, desc.baseMipLevel);\n    if (targetWidth === undefined) {\n      targetWidth = width;\n      targetHeight = height;\n    } else if (targetWidth !== width || targetHeight !== height) {\n      emitError('attachments are not all the same width and height', [view, texture, passEncoder, commandEncoder]);\n    }\n  };\n\n  const addView = (attachment: GPURenderPassColorAttachment | GPURenderPassDepthStencilAttachment | null | undefined, isDepth?: boolean) => {\n    if (!attachment) {\n      if (!isDepth) {\n        colorFormats.push(null);\n      }\n      return;\n    }\n    ++numAttachments;\n    const {view} = attachment;\n    const texture = s_textureViewToTexture.get(view)!;\n    assertNotDestroyed(texture);\n    assert(s_objToDevice.get(texture) === device, 'texture is not from same device as command encoder', [texture, commandEncoder]);\n    const {sampleCount, format} = texture;\n    const formatInfo = kAllTextureFormatInfo[format];\n    markTextureInUse(inuseTextures, texture, view);\n    const { colorRender, depth, stencil } = formatInfo;\n    checkRenderExtent(texture, view);\n    if (isDepth) {\n      assert(!!depth || !!stencil, () => `format(${format}) is not a depth stencil format`);\n      depthStencilFormat = format;\n    } else {\n      validateRenderPassColorAttachment(attachment as GPURenderPassColorAttachment, colorFormats.length - 1);\n      colorFormats.push(format);\n      bytesPerSample += roundUp(colorRender!.byteCost, colorRender!.alignment);\n    }\n    if (!passSampleCount) {\n      passSampleCount = sampleCount;\n    } else {\n      assert(sampleCount === passSampleCount, 'all attachments do not have the same sampleCount');\n    }\n  };\n\n  const { timestampWrites, colorAttachments, depthStencilAttachment, occlusionQuerySet } = desc;\n\n  for (const colorAttachment of colorAttachments || []) {\n      addView(colorAttachment);\n  }\n\n  addView(depthStencilAttachment, true);\n\n  assert(numAttachments > 0, 'there must be at least 1 colorAttachment or depthStencilAttachment');\n  assert(numAttachments <= device.limits.maxColorAttachments, () => `numAttachments(${numAttachments}) > device.limits.maxColorAttachments(${device.limits.maxColorAttachments})`);\n  assert(bytesPerSample <= device.limits.maxColorAttachmentBytesPerSample,\n    () => `color attachments bytesPerSample(${bytesPerSample}) > device.limits.maxColorAttachmentBytesPerSample(${device.limits.maxColorAttachmentBytesPerSample})`);\n\n  if (timestampWrites) {\n    validateTimestampWrites(device, timestampWrites);\n  }\n\n  if (occlusionQuerySet) {\n    assertNotDestroyed(occlusionQuerySet);\n    assert(device === s_objToDevice.get(occlusionQuerySet), 'occlusionQuerySet is not from same device', [occlusionQuerySet]);\n    assert(occlusionQuerySet.type === 'occlusion', () => `occlusionQuerySet.type(${occlusionQuerySet.type}) is not 'occlusion'`, [occlusionQuerySet]);\n  }\n\n  const renderPassLayout = createRenderPassLayout(\n    trimNulls(colorFormats),\n    passSampleCount!,\n    depthStencilFormat);\n\n  s_renderPassToPassInfoMap.set(passEncoder, {\n    state: 'open',\n    commandEncoder,\n    targetWidth: targetWidth || 0,\n    targetHeight: targetHeight || 0,\n    vertexBuffers: [],\n    bindGroups: [],\n    occlusionQuerySet,\n    occlusionIndices: new Map<number, Error>(),\n    occlusionQueryActiveIndex: -1,\n    passLayoutInfo: {\n      renderPassLayout,\n      passLayoutSignature: JSON.stringify(renderPassLayout),\n    },\n    inuseTextures,\n  });\n}\n\nwrapFunctionBefore(GPURenderPassEncoder, 'executeBundles', function (this: GPURenderPassEncoder, [bundles]) {\n  const info = s_renderPassToPassInfoMap.get(this)!;\n  validateEncoderState(this, info.state);\n  const device = s_objToDevice.get(this)!;\n\n  let bundleCount = 0;\n  for (const bundle of bundles) {\n    assert(s_objToDevice.get(bundle) === device, () => 'bundle[${count}] is not from same device as render pass encoder', [bundle]);\n    const count = bundleCount;\n    const bundleDesc = getRenderPassLayoutForRenderBundle(bundle)!;\n    const passLayoutInfo = getRenderPassLayout(this);\n    assert(bundleDesc.passLayoutInfo.passLayoutSignature === passLayoutInfo.passLayoutSignature,\n           () => `bundle[${count}] is not compatible with ${this.constructor.name}\n\n${this.constructor.name} expects ${JSON.stringify(passLayoutInfo.renderPassLayout, null, 2)}\n\nbundle is: ${JSON.stringify(bundleDesc.passLayoutInfo.renderPassLayout, null, 2)}\n`,\n      [bundle, this],\n    );\n    ++bundleCount;\n  }\n\n  info.bindGroups.length = 0;\n  info.pipeline = undefined;\n  info.indexBuffer = undefined;\n  info.indexFormat = undefined;\n  info.vertexBuffers.length = 0;\n});\n\nwrapFunctionBefore(GPURenderPassEncoder, 'beginOcclusionQuery', function (this: GPURenderPassEncoder, [queryIndex]) {\n  const info = s_renderPassToPassInfoMap.get(this)!;\n  validateEncoderState(this, info.state);\n  const { occlusionIndices, occlusionQueryActive, occlusionQuerySet } = info;\n  assert(!!occlusionQuerySet, 'no occlusionQuerySet in pass');\n  assertNotDestroyed(occlusionQuerySet);\n  assert(queryIndex < occlusionQuerySet.count, () => `queryIndex(${queryIndex}) >= occlusionQuerySet.count(${occlusionQuerySet.count})`, [occlusionQuerySet]);\n  const queryErr = occlusionIndices.get(queryIndex);\n  assert(!queryErr, () => `queryIndex(${queryIndex}) was already used in this pass at ${queryErr!.stack}`);\n  assert(!occlusionQueryActive, () => `another query is already active from ${occlusionQueryActive!.stack}`);\n  info.occlusionQueryActive = new Error();\n  info.occlusionQueryActiveIndex = queryIndex;\n});\n\nwrapFunctionBefore(GPURenderPassEncoder, 'endOcclusionQuery', function (this: GPURenderPassEncoder) {\n  const info = s_renderPassToPassInfoMap.get(this)!;\n  validateEncoderState(this, info.state);\n  const { occlusionIndices, occlusionQueryActive, occlusionQueryActiveIndex, occlusionQuerySet } = info;\n  assert(!!info.occlusionQueryActive, 'no occlusion query is active');\n  occlusionIndices.set(occlusionQueryActiveIndex, occlusionQueryActive!);\n  if (occlusionQuerySet) {\n    assertNotDestroyed(occlusionQuerySet);\n  }\n  info.occlusionQueryActive = undefined;\n});\n\nwrapBindingCommandsMixin(GPURenderPassEncoder, s_renderPassToPassInfoMap);\n\nwrapFunctionBefore(GPURenderPassEncoder, 'end', function (this: GPURenderPassEncoder) {\n  const info = s_renderPassToPassInfoMap.get(this)!;\n  validateEncoderState(this, info.state);\n  info.state = 'ended';\n  unlockCommandEncoder(info.commandEncoder)!;\n  assert(!info.occlusionQueryActive, () => `occlusion queryIndex(${info.occlusionQueryActiveIndex}) is still active`);\n});\n\nwrapFunctionBefore(GPURenderPassEncoder, 'setViewport', function (this: GPURenderPassEncoder, [x, y, width, height, minDepth, maxDepth]: [number, number, number, number, number, number]) {\n  const info = s_renderPassToPassInfoMap.get(this)!;\n  validateEncoderState(this, info.state);\n  const {\n    targetWidth,\n    targetHeight,\n  } = info;\n\n  assert(x >= 0, () => `x(${x}) < 0`, [this]);\n  assert(y >= 0, () => `y(${y}) < 0`, [this]);\n  assert(x + width <= targetWidth, () => `x(${x}) + width(${width}) > texture.width(${targetWidth})`, [this]);\n  assert(y + height <= targetHeight, () => `y(${x}) + height(${height}) > texture.height(${targetHeight})`, [this]);\n  assert(minDepth >= 0 && minDepth <= 1.0, () => `minDepth(${minDepth}) must be >= 0 and <= 1`);\n  assert(maxDepth >= 0 && maxDepth <= 1.0, () => `maxDepth(${maxDepth}) must be >= 0 and <= 1`);\n  assert(minDepth < maxDepth, () => `minDepth(${minDepth}) must be < maxDepth(${maxDepth})`);\n});\n\nwrapFunctionBefore(GPURenderPassEncoder, 'setScissorRect', function (this: GPURenderPassEncoder, [x, y, width, height]: [number, number, number, number]) {\n  const info = s_renderPassToPassInfoMap.get(this)!;\n  validateEncoderState(this, info.state);\n  const {\n    targetWidth,\n    targetHeight,\n  } = info;\n  assert(x >= 0, () => `x(${x}) < 0`, [this]);\n  assert(y >= 0, () => `y(${y}) < 0`, [this]);\n  assert(x + width <= targetWidth, () => `x(${x}) + width(${width}) > texture.width(${targetWidth})`, [this]);\n  assert(y + height <= targetHeight, () => `y(${x}) + height(${height}) > texture.height(${targetHeight})`, [this]);\n});\n\n","import {\n  beginComputePass,\n} from './compute-pass-encoder.js';\nimport {\n  lockCommandEncoder,\n  finishCommandEncoder,\n  getCommandBufferInfoAndValidateState,\n} from './encoder-utils.js';\nimport {\n  kAllTextureFormatInfo\n} from './format-info.js';\nimport {\n  beginRenderPass,\n} from './render-pass-encoder.js';\nimport { assertNotDestroyed, s_objToDevice } from './shared-state.js';\nimport { bufferUsageToString, physicalMipLevelSpecificTextureExtent, reifyGPUExtent3D, reifyGPUOrigin3D, textureUsageToString } from './utils.js';\nimport { assert } from './validation.js';\nimport {\n  wrapFunctionAfter,\n  wrapFunctionBefore,\n} from './wrap-api.js';\n\nwrapFunctionAfter(GPUCommandEncoder, 'beginComputePass', function (this: GPUCommandEncoder, passEncoder: GPUComputePassEncoder, [desc]) {\n  s_objToDevice.set(passEncoder, s_objToDevice.get(this)!);\n  lockCommandEncoder(this);\n  beginComputePass(this, passEncoder, desc);\n});\n\nwrapFunctionAfter(GPUCommandEncoder, 'beginRenderPass', function (this: GPUCommandEncoder, passEncoder: GPURenderPassEncoder, [desc]) {\n  s_objToDevice.set(passEncoder, s_objToDevice.get(this)!);\n  lockCommandEncoder(this);\n  beginRenderPass(this, passEncoder, desc);\n});\n\nwrapFunctionBefore(GPUCommandEncoder, 'finish', function (this: GPUCommandEncoder) {\n  finishCommandEncoder(this);\n});\n\nwrapFunctionBefore(GPUCommandEncoder, 'copyBufferToBuffer', function (this: GPUCommandEncoder, [src, srcOffset, dst, dstOffset, size]) {\n  getCommandBufferInfoAndValidateState(this);\n  assertNotDestroyed(src);\n  assertNotDestroyed(dst);\n  const device = s_objToDevice.get(this);\n  assert(device === s_objToDevice.get(src), 'src is not from same device as commandEncoder', [src, this]);\n  assert(device === s_objToDevice.get(dst), 'dst is not from same device as commandEncoder', [dst, this]);\n  assert(src !== dst, 'src must not be same buffer as dst', [src, dst]);\n  assert(!!(src.usage & GPUBufferUsage.COPY_SRC), () => `src.usage(${bufferUsageToString(src.usage)} missing COPY_SRC)`, [src]);\n  assert(!!(dst.usage & GPUBufferUsage.COPY_DST), () => `dst.usage(${bufferUsageToString(dst.usage)} missing COPY_DST)`, [dst]);\n  assert(srcOffset + size <= src.size, () => `srcOffset(${srcOffset}) + size(${size}) > srcBuffer.size(${src.size})`, [src]);\n  assert(dstOffset + size <= dst.size, () => `dstOffset(${dstOffset}) + size(${size}) > dstBuffer.size(${dst.size})`, [dst]);\n  assert(size % 4 === 0, () => `size(${size}) is not multiple of 4`);\n  assert(srcOffset % 4 === 0, () => `srcOffset(${srcOffset}) is not multiple of 4`);\n  assert(dstOffset % 4 === 0, () => `dstOffset(${dstOffset}) is not multiple of 4`);\n});\n\nfunction validateImageCopyBuffer(icb: GPUImageCopyBuffer) {\n  assertNotDestroyed(icb.buffer);\n  const bytesPerRow = icb.bytesPerRow || 0;\n  assert(bytesPerRow % 256 === 0, () => `src.bytesPerRow(${bytesPerRow}) not multiple of 256`, [icb.buffer]);\n}\n\nfunction validateImageCopyTexture(ict: GPUImageCopyTexture, copySize: GPUExtent3D) {\n  assertNotDestroyed(ict.texture);\n\n  const formatInfo = kAllTextureFormatInfo[ict.texture.format];\n  const {\n    blockWidth,\n    blockHeight,\n  } = formatInfo;\n\n  const mipLevel = ict.mipLevel || 0;\n  const [origX, origY] = reifyGPUOrigin3D(ict.origin);\n  assert(mipLevel < ict.texture.mipLevelCount, () => `mipLevel(${mipLevel}) must be less than texture.mipLevelCount(${ict.texture.mipLevelCount})`, [ict.texture]);\n  assert(origX % blockWidth === 0, () => `origin.x(${origX}) not multiple of blockWidth(${blockWidth})`, [ict.texture]);\n  assert(origY % blockHeight === 0, () => `origin.y(${origY}) not multiple of blockHeight(${blockHeight})`, [ict.texture]);\n\n  const [copyWidth, copyHeight, copyDepthOrArrayLayers] = reifyGPUExtent3D(copySize);\n\n  if (formatInfo.depth && formatInfo.stencil && ict.texture.sampleCount > 1) {\n    const [w, h, d] = physicalMipLevelSpecificTextureExtent(ict.texture, mipLevel);\n    assert(copyWidth === w &&\n           copyHeight === h &&\n           copyDepthOrArrayLayers === d, 'copySize must match textureSize for depth-stencil textures', [ict.texture]);\n  }\n}\n\nfunction validateTextureCopyRange(ict: GPUImageCopyTexture, copySize: GPUExtent3D) {\n  const formatInfo = kAllTextureFormatInfo[ict.texture.format];\n  const {\n    blockWidth,\n    blockHeight,\n  } = formatInfo;\n  const mipLevel = ict.mipLevel || 0;\n  const [origX, origY, origZ] = reifyGPUOrigin3D(ict.origin);\n  const [copyWidth, copyHeight, copyDepthOrArrayLayers] = reifyGPUExtent3D(copySize);\n  const [w, h, d] = physicalMipLevelSpecificTextureExtent(ict.texture, mipLevel);\n\n  const res = [ict.texture];\n  assert(origX + copyWidth <= w, () => `origin.x(${origX}) + copySize.width(${copyWidth}) is > physical width(${w}) of mipLevel(${mipLevel})`, res);\n  assert(origY + copyHeight <= h, () => `origin.y(${origY}) + copySize.height(${copyHeight}) is > physical height(${h}) of mipLevel(${mipLevel})`, res);\n  assert(origZ + copyDepthOrArrayLayers <= d, () => `origin.z(${origZ}) + copySize.depthOrArrayBuffers(${copyDepthOrArrayLayers}) is > texture.depthOrArrayLayers(${d}) of mipLevel(${mipLevel})`, res);\n  assert(copyWidth % blockWidth === 0, () => `copySize.width(${copyWidth}) is not multiple of blockWidth(${blockWidth})`, res);\n  assert(copyHeight % blockHeight === 0, () => `copySize.height(${copyHeight}) is not multiple of blockHeight(${blockHeight})`, res);\n}\n\nfunction validateLinearTextureData(idl: GPUImageDataLayout, byteSize: number, format: GPUTextureFormat, copyExtent: GPUExtent3D) {\n  const formatInfo = kAllTextureFormatInfo[format];\n  const [copyWidth, copyHeight, copyDepthOrArrayLayers] = reifyGPUExtent3D(copyExtent);\n  const { blockWidth, blockHeight } = formatInfo;\n  const widthInBlocks = copyWidth / blockWidth;\n  const heightInBlocks = copyHeight / blockHeight;\n  const bytesInLastRow = widthInBlocks * formatInfo.bytesPerBlock!;\n\n  assert(widthInBlocks % 1 === 0, () => `width(${copyWidth}) must be multiple of blockWidth${blockWidth}`);\n  assert(heightInBlocks % 1 === 0, () => `height(${copyHeight}) must be multiple of blockHeight${blockHeight}`);\n  if (heightInBlocks > 1) {\n    assert(idl.bytesPerRow !== undefined, () => `bytesPerRow must be set if heightInBlocks(${heightInBlocks}) > 1`);\n  }\n\n  if (copyDepthOrArrayLayers > 1) {\n    assert(idl.bytesPerRow !== undefined, () => `bytesPerRow must be set if copySize.depthOrArrayLayers(${copyDepthOrArrayLayers}) > 1`);\n  }\n  if (copyDepthOrArrayLayers > 1) {\n    assert(idl.rowsPerImage !== undefined, () => `rowsPerImage must be set if copySize.depthOrArrayLayers(${copyDepthOrArrayLayers}) > 1`);\n  }\n  if (idl.bytesPerRow !== undefined) {\n    assert(idl.bytesPerRow >= bytesInLastRow, () => `bytesPerRow(${idl.bytesPerRow}) must be >= bytes in the last row(${bytesInLastRow})`);\n  }\n  if (idl.rowsPerImage !== undefined) {\n    assert(idl.rowsPerImage >= heightInBlocks, () => `rowsPerImage(${idl.rowsPerImage}) must be >= heightInBlocks(${heightInBlocks})`);\n  }\n\n  const bytesPerRow = idl.bytesPerRow ?? 0;\n  const rowsPerImage = idl.rowsPerImage ?? 0;\n  let requiredBytesInCopy = 0;\n  if (copyDepthOrArrayLayers > 0) {\n    // all layers except the last one\n    requiredBytesInCopy += bytesPerRow * rowsPerImage * (copyDepthOrArrayLayers - 1);\n    if (heightInBlocks > 0) {\n      // last layer = all rows padded + last row\n      requiredBytesInCopy += bytesPerRow * (heightInBlocks - 1) + bytesInLastRow;\n    }\n  }\n  const offset = idl.offset ?? 0;\n  assert(offset + requiredBytesInCopy <= byteSize, () => `offset(${offset}) + requiredBytesInCopy(${requiredBytesInCopy}) must be <= buffer.size(${byteSize})`);\n}\n\nfunction validateB2TorT2BCopy(encoder: GPUCommandEncoder, buf: GPUImageCopyBuffer, tex: GPUImageCopyTexture, copySize: GPUExtent3D, bufferIsSource: boolean) {\n  const device = s_objToDevice.get(encoder);\n  assert(device === s_objToDevice.get(buf.buffer), 'buffer is not from same device as commandEncoder', [buf.buffer, encoder]);\n  assert(device === s_objToDevice.get(tex.texture), 'texture is not from same device as commandEncoder', [tex.texture, encoder]);\n\n  validateImageCopyBuffer(buf);\n  const [bufRequiredUsage, texRequiredUsage]: [keyof GPUBufferUsage, keyof GPUTextureUsage] = bufferIsSource\n     ? ['COPY_SRC', 'COPY_DST']\n     : ['COPY_DST', 'COPY_SRC'];\n  assert(!!(buf.buffer.usage & GPUBufferUsage[bufRequiredUsage]), () => `src.usage(${bufferUsageToString(buf.buffer.usage)} missing ${bufRequiredUsage})`, [buf.buffer]);\n\n  validateImageCopyTexture(tex, copySize);\n\n  const formatInfo = kAllTextureFormatInfo[tex.texture.format];\n\n  assert(!!(tex.texture.usage & GPUTextureUsage[texRequiredUsage]), () => `dst.texture.usage(${textureUsageToString(tex.texture.usage)} missing ${texRequiredUsage})`, [tex.texture]);\n  assert(tex.texture.sampleCount === 1, 'sampleCount must be 1', [tex.texture]);\n\n  let aspectSpecificFormat = tex.texture.format;\n  const isDepthOrStencil = formatInfo.depth || formatInfo.stencil;\n  if (isDepthOrStencil) {\n    if (!formatInfo.stencil) {\n      assert(tex.aspect !== 'stencil-only', 'can not use stencil-only aspect on non stencil texture', [tex.texture]);\n    }\n    if (!formatInfo.depth) {\n      assert(tex.aspect !== 'depth-only', 'can not use depth-only aspect on non depth texture', [tex.texture]);\n    }\n    assert(tex.aspect === 'depth-only' || tex.aspect === 'stencil-only', 'must use one aspect');\n    const aspect = tex.aspect === 'depth-only' ? 'depth' : 'stencil';\n    const info = formatInfo[aspect];\n    assert(!!info?.copyDst, `can not copy to ${tex.aspect} of texture of format(${tex.texture.format})`, [tex.texture]);\n\n    if (aspectSpecificFormat === 'depth24plus-stencil8') {\n      aspectSpecificFormat = tex.aspect === 'depth-only'\n        ? 'depth24plus'\n        : 'stencil8';\n    } else if (aspectSpecificFormat === 'depth32float-stencil8') {\n      aspectSpecificFormat = tex.aspect === 'depth-only'\n        ? 'depth32float'\n        : 'stencil8';\n    }\n  }\n\n  validateTextureCopyRange(tex, copySize);\n\n  const srcOffset = buf.offset || 0;\n  if (!isDepthOrStencil) {\n    const texelCopyBlockFootPrint = formatInfo.bytesPerBlock!;\n    assert(srcOffset % texelCopyBlockFootPrint === 0, () => `src.offset(${srcOffset}) must multiple of blockSize(${texelCopyBlockFootPrint})`);\n  } else {\n    assert(srcOffset % 4 === 0, () => `src.offset(${srcOffset}) must by multiple of 4 for depth and/or stencil textures`);\n  }\n\n  validateLinearTextureData(buf, buf.buffer.size, aspectSpecificFormat, copySize);\n}\n\nfunction isCopyCompatible(format1: GPUTextureFormat, format2: GPUTextureFormat) {\n  return format1.replace('-srgb', '') === format2.replace('-srgb', '');\n}\n\nfunction isIntersectingAxis(v1: number, v2: number, size: number) {\n  const distance = Math.abs(v2 - v1);\n  const gap = distance - size;\n  return gap < 0;\n}\n\nwrapFunctionBefore(GPUCommandEncoder, 'copyBufferToTexture', function (this: GPUCommandEncoder, [src, dst, copySize]) {\n  getCommandBufferInfoAndValidateState(this);\n  validateB2TorT2BCopy(this, src, dst, copySize, true);\n});\n\nwrapFunctionBefore(GPUCommandEncoder, 'copyTextureToBuffer', function (this: GPUCommandEncoder, [src, dst, copySize]) {\n  getCommandBufferInfoAndValidateState(this);\n  validateB2TorT2BCopy(this, dst, src, copySize, false);\n});\n\nwrapFunctionBefore(GPUCommandEncoder, 'copyTextureToTexture', function (this: GPUCommandEncoder, [src, dst, copySize]) {\n  getCommandBufferInfoAndValidateState(this);\n\n  const device = s_objToDevice.get(this);\n  assert(device === s_objToDevice.get(src.texture), 'src.texture is not from same device as commandEncoder', [src, this]);\n  assert(device === s_objToDevice.get(dst.texture), 'dst.texture is not from same device as commandEncoder', [dst, this]);\n\n  validateImageCopyTexture(src, copySize);\n  assert(!!(src.texture.usage & GPUTextureUsage.COPY_SRC), () => `src.texture.usage(${textureUsageToString(src.texture.usage)} missing COPY_SRC`, [src.texture]);\n\n  validateImageCopyTexture(dst, copySize);\n  assert(!!(dst.texture.usage & GPUTextureUsage.COPY_DST), () => `src.texture.usage(${textureUsageToString(dst.texture.usage)} missing COPY_DST`, [dst.texture]);\n\n  assert(src.texture.sampleCount === dst.texture.sampleCount, () => `src.texture.sampleCount(${src.texture.sampleCount}) must equal dst.texture.sampleCount(${dst.texture.sampleCount})`, [src.texture, dst.texture]);\n  assert(isCopyCompatible(src.texture.format, dst.texture.format), () => `src.texture.format(${src.texture.format}) must be copy compatible with dst.texture.format(${dst.texture.format})`, [src.texture, dst.texture]);\n\n  const formatInfo = kAllTextureFormatInfo[src.texture.format];\n  const isDepthStencil = !!formatInfo.depth && !!formatInfo.stencil;\n  if (isDepthStencil) {\n    assert(src.aspect === 'all', () => `src.aspect must be 'all' when format(${src.texture.format}) is a depth-stencil format`, [src.texture]);\n    assert(dst.aspect === 'all', () => `dst.aspect must be 'all' when format(${dst.texture.format}) is a depth-stencil format`, [dst.texture]);\n  }\n\n  validateTextureCopyRange(src, copySize);\n  validateTextureCopyRange(dst, copySize);\n\n  if (src.texture === dst.texture) {\n    const srcOrigin = reifyGPUOrigin3D(src.origin);\n    const dstOrigin = reifyGPUOrigin3D(dst.origin);\n    const size = reifyGPUExtent3D(copySize);\n    assert(\n      !isIntersectingAxis(srcOrigin[0], dstOrigin[0], size[0]) &&\n      !isIntersectingAxis(srcOrigin[1], dstOrigin[1], size[1]) &&\n      !isIntersectingAxis(srcOrigin[2], dstOrigin[2], size[2]),\n      () => `when src and dst textures are the same texture, copy boxes must not overlap`, [src.texture, dst.texture]);\n  }\n});\n\nwrapFunctionBefore(GPUCommandEncoder, 'clearBuffer', function (this: GPUCommandEncoder, [buffer, offset, size]) {\n  getCommandBufferInfoAndValidateState(this);\n  assertNotDestroyed(buffer);\n  offset = offset ?? 0;\n  size = size ?? buffer.size - offset;\n  assert(s_objToDevice.get(this) === s_objToDevice.get(buffer), 'buffer not from same device as encoder', [buffer, this]);\n  assert(!!(buffer.usage & GPUBufferUsage.COPY_DST), () => `buffer.usage(${bufferUsageToString(buffer.usage)}) must have COPY_DST`, [buffer]);\n  assert(size % 4 === 0, () => `size(${size}) must be multiple of 4`);\n  assert(offset % 4 === 0, () => `offset(${offset}) must be multiple of 4`);\n  assert(offset + size <= buffer.size, () => `offset(${offset}) + size(${size}) must be <= buffer.size(${buffer.size})`);\n});\n\nwrapFunctionBefore(GPUCommandEncoder, 'resolveQuerySet', function (this: GPUCommandEncoder, [querySet, firstQuery, queryCount, destination, destinationOffset]) {\n  getCommandBufferInfoAndValidateState(this);\n  assertNotDestroyed(querySet);\n  assertNotDestroyed(destination);\n  const device = s_objToDevice.get(this);\n  assert(s_objToDevice.get(querySet) === device, 'querySet not from same device', [querySet]);\n  assert(s_objToDevice.get(destination) === device, 'destination buffer not from same device', [destination]);\n  assert((destination.usage & GPUBufferUsage.QUERY_RESOLVE) !== 0, () => `destination.usage(${bufferUsageToString(destination.usage)} does not contain QUERY_RESOLVE)`, [destination]);\n  assert(firstQuery < querySet.count, () => `firstQuery(${firstQuery}) out of range for querySet.count(${querySet.count})`);\n  assert(firstQuery + queryCount <= querySet.count, () => `firstQuery(${firstQuery}) + queryCount(${queryCount}) > querySet.count(${querySet.count})`);\n  assert(destinationOffset % 256 === 0, () => `destinationOffset(${destinationOffset}) is not multiple of 256`);\n  assert(destinationOffset + queryCount * 8 < destination.size, () => `destinationOffset(${destinationOffset}) + queryCount(${queryCount}) * 8 > destination.size(${destination.size})`);\n});","import './error-scope-wrapper.js';\nimport './device.js';\nimport './canvas-context.js';\nimport './command-encoder.js';\nimport './compute-pass-encoder.js';\nimport './render-pass-encoder.js';\nimport './render-bundle-encoder.js';\nimport './texture.js';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst _ = import.meta; // webgpu-debug-helper must be imported as a module with import or `<script type=\"module\" ...>`\nconsole.log('webgpu-debug-helper loaded:', _ !== undefined);"],"names":["assert","getRenderPassLayout"],"mappings":"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","x_google_ignoreList":[6]}